<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/**
 *
 * Mobile APP Related functions
 * @author Teamtweaks
 * @Modified Author - yamuna
 */
class Mobile extends MY_Controller {
    /*Loading wanted Model and Form validations, Model class, Google map Api key loading from config*/
    function __construct(){
        parent::__construct();
        $this->load->helper(array('cookie','date','form','email'));
        $this->load->library(array('encrypt','form_validation','resizeimage'));
        $this->load->model('mobile_model');
        $this->google_map_api = $this->config->item('google_map_api');
        $this->paypal_curency="USD";
        $this->paypal_symbol="$";
        define("API_LOGINID", $this->config->item('payment_2'));
        define("StripeDetails", $this->config->item('payment_1'));
        $this->output->set_content_type('application/json');

        if ($this->lang->line('parm_missing') != ''){  $this->parm_missing = stripslashes($this->lang->line('parm_missing')); } else { $this->parm_missing = "Parameter missing"; }
        if ($this->lang->line('succ') != '') {  $this->succ = stripslashes($this->lang->line('succ')); } else { $this->succ = "Success"; }
    }
    public function index(){
    }
    public function discoverfeatured(){
        $perpage = 10;
        $page=intval($_GET['page_Id']);
        $email = $_GET['email_id'];
        $userSection = array();
        if($email != '')
        {
            $userDetails = $this->mobile_model->get_all_details(USERS, array('email'=>$email));
            $userSection['user_name']   = $userDetails->row()->user_name;
            $userSection['firstname']   = $userDetails->row()->firstname;
            $userSection['lastname']    = $userDetails->row()->lastname;
            $userSection['is_verified']   = $userDetails->row()->is_verified;
            $userSection['id_verified']   = $userDetails->row()->id_verified;
            $userSection['ph_verified']   = $userDetails->row()->ph_verified;
            $userSection['phone_no']    = $userDetails->row()->phone_no;
            $userSection['since']     = date('Y-m-d', strtotime($userDetails->row()->created));
            $userSection['gender']    = $userDetails->row()->gender;
            $userSection['description']   = $userDetails->row()->description;
            if($userDetails->row()->dob_date != 0) {
                $date = $userDetails->row()->dob_date."-";
            } else {
                $date = '';
            }
            if($userDetails->row()->dob_month != 0) {
                $month = $userDetails->row()->dob_month."-";
            } else {
                $month = '';
            }
            if($userDetails->row()->dob_year != 0) {
                $year = $userDetails->row()->dob_year;
            } else {
                $year = '';
            }
            $userSection['dob']       = $date.$month.$year;
            if($userDetails->row()->image != '') {
                $userSection['image']     = $userDetails->row()->image;
            } else {
                $userSection['image']     = 'profile.jpg';
            }
        }
        $this->db->select('u.state_code,u.name,u.id,c.name as countryname,u.citythumb as citylogo');
        $this->db->from(CITY.' as u');
        $this->db->join(LOCATIONS.' as c' , 'u.countryid = c.id');
        $this->db->where('u.status','Active');
        $this->db->where('u.featured','1');
        $this->db->order_by('u.name');
        if($page>0){
            $this->db->limit($perpage,($page*$perpage)-$perpage);
        }else{
            $page=1;
            $this->db->limit($perpage,0);
        }
        $city = $this->db->get();
        $CatArr = array();
        foreach($city->result() as $catVal){
            $googleAddress = $catVal->name.", ".$catVal->countryname;
            $googleAddress = str_replace(" ", "+", $googleAddress);
            $json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$googleAddress&sensor=false&key=$this->google_map_api");
            $city = '';
            $country = '';
            $json = json_decode($json);
            if($json->{'error_message'} == ''){
                $newAddress = $json->{'results'}[0]->{'address_components'};
                $this->data ['lat'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
                $this->data ['long'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};
                foreach($newAddress as $nA)
                {
                    if($nA->{'types'}[0] == 'locality')$location = $nA->{'long_name'};
                    if($nA->{'types'}[0] == 'administrative_area_level_2')$city = $nA->{'long_name'};
                    if($nA->{'types'}[0] == 'country')$country = $nA->{'long_name'};
                }
                if($city == '')
                    $city = $location;
                $this->db->from(PRODUCT.' as p');
                $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
                $this->db->where('p.status', 'Publish');
                $this->db->where('pa.city', $city);
                $this->db->where('pa.country', $country);
                $product_count=$this->db->count_all_results();
                if($catVal->citylogo != ''){
                    $renameArr = explode('.', $catVal->citylogo);
                    $catImage = $renameArr[0].'.jpg';;
                }else{
                    $catImage = 'no_image.jpg';
                }
                if($product_count != 0){
                    $CatArr[] = array("city_id" => $catVal->name, "city_name" => $catVal->name,"city_image" =>$catImage,"product_count"=>$product_count);
                }
            }
        }
        $json_encode = json_encode(array("featuredCities" => $CatArr,"pageId"=>(string)$page, "userDetails" => $userSection));
        echo $json_encode;
    }
    public function citysearch() {
        $cityname = $_GET['cityname'];
    }
    /* Rental List and search filter for rental page */
    public function rental_list_old(){
        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $conditions = array('status'=>'Active');
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        $attribute = array();
        $property = array();
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>$pro->id);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        if($pro->id == $room->listspace_id) {
                            $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                        }
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        //  print_r($_POST);
        $responseArr = array();
        $perpage =5;
        $page=intval($_POST['page_Id']);
        $email=$_POST['email_id'];
        $fav=0;
        if($_POST['city_name'] !="")$cityId=$_POST['city_name'];else$cityId='';
        $responseArr['city_name'] = $cityId;
        if($_POST['mcity_name'] !="")$mcityId=$_POST['mcity_name'];else$mcityId='';
        $responseArr['mcity_name'] = $mcityId;
        if($_POST['f_date_arrive'] !="")$arive=$_POST['f_date_arrive'];else$arive='';
        $responseArr['f_date_arrive'] = $arive;
        if($_POST['f_date_depart'] !="")$depart=$_POST['f_date_depart'];else$depart='';
        $responseArr['f_date_depart'] = $depart;
        if($_POST['f_guest'] !="")$noofguest=$_POST['f_guest'];else$noofguest='';
        $responseArr['f_guest'] = $noofguest;
        if($_POST['f_p_min'] !="")$pricemin=$_POST['f_p_min'];else$pricemin='';
        $responseArr['f_p_min'] = $pricemin;
        if($_POST['f_p_max'] !="")$pricemax=$_POST['f_p_max'];else$pricemax='';
        $responseArr['f_p_max'] = $pricemax;
        if($_POST['f_private_room'] !="")$privateroom=$_POST['f_private_room'];else$privateroom='';
        $responseArr['f_private_room'] = $privateroom;
        if($_POST['f_shared_room'] !="")$sharedroom=$_POST['f_shared_room'];else$sharedroom='';
        $responseArr['f_shared_room'] = $sharedroom;
        if($_POST['f_entire_home'] !="")$entireroom=$_POST['f_entire_home'];else$entireroom='';
        $responseArr['f_entire_home'] = $entireroom;
        if($_POST['f_bath_room'] !="")$bathroom=$_POST['f_bath_room'];else$bathroom='';
        $responseArr['f_bath_room'] = $bathroom;
        if($_POST['f_bed'] !="")$bed=$_POST['f_bed'];$bed='';
        $responseArr['f_bed'] = $bed;
        if($_POST['f_bed_room'] !="")$bedroom=$_POST['f_bed_room'];else$bedroom='';
        $responseArr['f_bed_room'] = $bedroom;
        if($noofguest != '' && $noofguest != '0'){
            $search .= " and p.accommodates >=".$noofguest;
        }
        if($pricemax != '' && $pricemin != ''){
            $search .= " and (p.price BETWEEN ".$pricemin." and ".$pricemax.')';
        }
        if($bed != '' && $bed != '0'){
            $search .= " and p.listings LIKE '%\"Beds\":\"".$bed."\"%'";
        }
        if($bedroom != '' && $bedroom != '0'){
            $search .= " and p.listings LIKE '%\"Bedrooms\":\"".$bedroom."\"%'";
        }
        if($bathroom != '' && $bathroom != '0'){
            $search .= " and p.listings LIKE '%\"Bathrooms\":\"".$bathroom."\"%'";
        }
        if($entireroom != '' && $entireroom == 'Entire home/apartment'){
            $search .= ' and p.room_type =" '.$entireroom.'"';
        }
        if($sharedroom != '' && $sharedroom == 'Shared room'){
            $search .= ' and p.room_type =" '.$sharedroom.'"';
        }
        if($privateroom != '' && $privateroom == 'Private Room'){
            $search .= ' and p.room_type ="'.$privateroom.'"';
        }
        //{"Bedrooms":"1","Beds":"1","Bathrooms":"Private","minimum_stay":"3","accommodates":"","SPACE_SIZE":""}
        if($page>0){
            $pageLimitStart=($page*$perpage)-$perpage;
            $this->db->limit($perpage,($page*$perpage)-$perpage);
        }else{
            $page=1;
            $pageLimitStart=0;
            $this->db->limit($perpage,0);
        }
        $searchPerPage=$perpage;
        $condition .= '( 1=1';
        if($cityId !='')
        {
            $googleAddress = str_replace(" ", "+", $cityId);
            $json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$googleAddress&sensor=false&key=$this->google_map_api");
            $json = json_decode($json);
            //echo '<pre>';print_r($json);die;
            $newAddress = $json->{'results'}[0]->{'address_components'};
            $this->data ['lat'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
            $this->data ['long'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};
            foreach($newAddress as $nA)
            {
                if($nA->{'types'}[0] == 'locality')$location = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'administrative_area_level_2')$city = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'country')$country = $nA->{'long_name'};
            }
            $minLat = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lat'};
            $minLong = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lng'};
            $maxLat = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lat'};
            $maxLong = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lng'};
            $condition .= ' AND (pa.lat BETWEEN "'.$minLat.'" AND "'.$maxLat.'" ) AND (pa.lang BETWEEN "'.$minLong.'" AND "'.$maxLong.'" )';
        }
        if($mcityId !='')
        {
            $googleAddress = str_replace(" ", "+", $mcityId);
            $json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$googleAddress&sensor=false&key=$this->google_map_api");
            $json = json_decode($json);
            //echo '<pre>';print_r($json);die;
            $newAddress = $json->{'results'}[0]->{'address_components'};
            $this->data ['lat'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
            $this->data ['long'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};
            foreach($newAddress as $nA)
            {
                if($nA->{'types'}[0] == 'locality')$location = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'administrative_area_level_2')$city = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'country')$country = $nA->{'long_name'};
            }
            $minLat = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lat'};
            $minLong = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lng'};
            $maxLat = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lat'};
            $maxLong = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lng'};
            $condition .= ' AND (pa.lat BETWEEN "'.$minLat.'" AND "'.$maxLat.'" ) AND (pa.lang BETWEEN "'.$minLong.'" AND "'.$maxLong.'" )';
        }
        if($mrentalId !='')
        {
            $condition .= ' and p.id = "' .$_POST['mrental_Id']. '" ';
        }
        $condition .= ' ) ';
        $condition=' where '.$condition.$search.' and p.status="Publish" group by p.id order by p.created desc limit '. $pageLimitStart . ',' . $searchPerPage;
        $select_qry = "select  p.product_title,p.description,p.id,p.price,p.currency,p.fav,p.home_type,u.image as userphoto,u.email,u.user_name,pa.lat as latitude,pa.lang as longitude, pp.product_image from ".PRODUCT." p LEFT JOIN ".PRODUCT_ADDRESS_NEW." pa on pa.productId=p.id LEFT JOIN ".PRODUCT_PHOTOS." pp on pp.product_id=p.id LEFT JOIN ".USERS." u on (u.id=p.user_id) ".$condition;
        $rentalList = $this->mobile_model->ExecuteQuery($select_qry);
        $searchcount = $rentalList->num_rows();
        echo $this->db->last_query();die;
        $mapcount=0;
        $condition = array('email'=>$email);
        $userDetails = $this->mobile_model->get_all_details ( USERS, $condition );
        $userId = $userDetails->row()->id;
        $favs = array();
        $checkFavorite = $this->mobile_model->get_all_details(LISTS_DETAILS, array('user_id'=>$userId));
        foreach($checkFavorite->result() as $result)
            $favs[] = $result->product_id;
        foreach($rentalList->result() as $rental){
            if (in_array($rental->id,$favs))$fav = 1;
            $price_details .= $rental->price.',';
            if($rental->product_image != ''){
                $p_img = explode('.',$rental->product_image);
                $suffix = strrchr($rental->product_image, ".");
                $pos = strpos  ( $rental->product_image  , $suffix);
                $name = substr_replace ($rental->product_image, "", $pos);
                // echo $suffix . "<br><br>". $name;
                $pro_img = $name.''.$suffix;
                $proImage = base_url().'images/rental/'.$pro_img;
            }else{
                $proImage = base_url().'images/rental/dummyProductImage.jpg';
            }
            if($_POST['currency_code'] != ''){
                $condition = array('currency_type'=>$_POST['currency_code']);
                $currency_rate = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                $currency_code = $currency_rate->row()->currency_symbols;
            }else{
                $currency_code = '$';
            }
            if($_POST['currency_code'] != ''){
                $condition = array('currency_type'=>$_POST['currency_code']);
                $currency_rate = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                $currency_price =$rental->price * $currency_rate->row()->currency_rate;
            }else{
                $currency_price = $rental->price;
            }
            if($rental->userphoto != '') {
                $userphoto = base_url().'images/users/'.$rental->userphoto;
            }else{
                $userphoto = base_url().'images/site/profile.jpg';
            }
            if($rental->user_name != ''){
                $host_name = $rental->user_name;
            } else {
                $host_name ="";
            }
            //$this->dyn_price($rental->email);
            //$latandlog[] = array("latitude" => $rental->latitude,"longitude" => $rental->longitude,"rental_id" => $rental->id,"description"=>$rental->description,"hostname"=>$rental->user_name,"rental_price" =>$currency_price,"rental_title" => $rental->product_title,"rental_image" =>$proImage,"userphoto" =>$userphoto,"fav"=>$fav,"user_currency"=>$currency_code,"home_type"=>$rental->home_type);
            $latandlog[] = array("rental_id" => $rental->id, "rental_title" => $rental->product_title,"description"=>$rental->description,"rental_image" =>$proImage,"latitude" => $rental->latitude,"longitude" => $rental->longitude,"userphoto" =>$userphoto,"is_favourite"=>$fav,"rental_price" =>$currency_price,"user_currency"=>$currency_code,"home_type"=>$rental->home_type,"hostname"=>$host_name);
            $rentalListArr[] = array("rental_id" => $rental->id, "rental_title" => $rental->product_title,"description"=>$rental->description,"rental_image" =>$proImage,"latitude" => $rental->latitude,"longitude" => $rental->longitude,"userphoto" =>$userphoto,"is_favourite"=>$fav,"rental_price" =>$currency_price,"user_currency"=>$currency_code,"home_type"=>$rental->home_type,"hostname"=>$host_name);
            $mapcount++;
            $fav = 0;
        }
        $all_price =  rtrim($price_details,',');
        $all_price_detail  =  explode(',',$all_price);
        if($mcityId == ''){
            if($searchcount == 0){
                $rentalListArr = array();
                $json_encode = json_encode(array("status"=>0,"message"=>"No property available","rentalList" =>$rentalListArr,"property" =>$property,"attribute"=>$attribute,'minprice'=>'0.00','maxprice'=>max($all_price_detail)));
            }else{
                if(min($all_price_detail) == max($all_price_detail))
                    $json_encode = json_encode(array("status"=>1,"message"=>"property available","rentalList" => $rentalListArr,"property" =>$property,"attribute"=>$attribute,'minprice'=>'0.00','maxprice'=>max($all_price_detail)));
                else
                    $json_encode = json_encode(array("status"=>1,"message"=>"property available","rentalList" => $rentalListArr,"property" =>$property,"attribute"=>$attribute,'minprice'=>min($all_price_detail),'maxprice'=>max($all_price_detail)));
            }
        }else{
            $json_encode = json_encode(array("status"=>1,"message"=>"property available","rentalList"=>$latandlog,"property" =>$property,"attribute"=>$attribute));
        }
        echo $json_encode;
    }
    /* Rental List and search filter for rental page */
    public function rental_list(){
        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        /* Property and Room Type and so on */
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $roomvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $roomvalueArr[] = array("child_id" =>intval($room->id),"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>intval($pro->id));
                    }
                    $rooms[]  = array("option_id"=>intval($pro->id),"option_name"=>$pro->attribute_name,"options"=>$roomvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>intval($room->id),"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>intval($pro->id));
                    }
                    $property[]  = array("option_id"=>intval($pro->id),"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>intval($list_value->id),"child_name"=>$list_value->list_value,"child_image"=>$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>intval($list_value->attr_id));
                        }
                    }
                    $attribute[]  = array("option_id"=>intval($parent_value->id),"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        //  print_r($_POST);
        $responseArr = array();
        $perpage =5;
        $page=intval($_POST['page_Id']);
        $email=$_POST['email_id'];
        $fav=0;
        if($_POST['mcity_name'] !="")$mcityId=$_POST['mcity_name'];else$mcityId='';
        $responseArr['mcity_name'] = $mcityId;
        if($_POST['f_date_arrive'] !="")$arive=$_POST['f_date_arrive'];else$arive='';
        $responseArr['f_date_arrive'] = $arive;
        if($_POST['f_date_depart'] !="")$depart=$_POST['f_date_depart'];else$depart='';
        $responseArr['f_date_depart'] = $depart;
        if($_POST['f_guest'] !="")$noofguest=$_POST['f_guest'];else$noofguest='';
        $responseArr['f_guest'] = $noofguest;
        if($_POST['f_p_min'] !="")$pricemin=$_POST['f_p_min'];else$pricemin='';
        $responseArr['f_p_min'] = $pricemin;
        if($_POST['f_p_max'] !="")$pricemax=$_POST['f_p_max'];else$pricemax='';
        $responseArr['f_p_max'] = $pricemax;
        if($_POST['f_room_type'] !="")$room_type=$_POST['f_room_type'];else$room_type='';
        if($_POST['f_home_type'] !="")$home_type=$_POST['f_home_type'];else$home_type='';
        if($_POST['f_list_type'] !="")$list_type=$_POST['f_list_type'];else$list_type='';
        if($_POST['instant_pay'] !="")$pay_option=$_POST['instant_pay'];else$pay_option='';
        if(($arive != '') && ($depart != '')){
            $newDateStart = date("Y-m-d", strtotime($arive));
            $newDateEnd = date("Y-m-d", strtotime($depart));
            $this->db->select('*');
            $this->db->from(CALENDARBOOKING);
            $this->db->where('the_date >=',$newDateStart);
            $this->db->where('the_date <=',$newDateEnd);
            $this->db->group_by('PropId');
            $restrick_booking_query = $this->db->get();
            if($restrick_booking_query->num_rows() != 0 ){
                $restrick_booking_result = $restrick_booking_query->result();
                foreach($restrick_booking_result as $restrick_data){
                    $product_restrick_id .="'".$restrick_data->PropId."',";
                }
                $product_restrick_id .='}';
                $restrick_product_id =  str_replace(',}','',$product_restrick_id );
                $search .= " and p.id NOT IN(".$restrick_product_id.")";
            }
        }
        /*if($noofguest != '' && $noofguest != '0'){
    $search .= " and p.accommodates >=".$noofguest;
    }*/
        /*get search payment option*/
        if($pay_option == 'Yes'){
            $instant_pay_val = 'Yes';
             $search.= ' and p.instant_pay ="' . $instant_pay_val.'"';
        }else{
            $search.= "";
        }
        /*end*/
        if ($noofguest != '' && $noofguest != '0') {
            if (strpos($noofguest, "+") != '') {
                $noofguest = str_replace('+', '', $noofguest);
                $search .= " and p.accommodates =" . $noofguest;
            } else {
                $search .= " and p.accommodates >=" . $noofguest;
            }
        } else {
            $search .= " and p.accommodates >= 1";
        }
        if($pricemax != '' && $pricemin != ''){
            //$search .= " and (p.price BETWEEN ".$pricemin." and ".$pricemax.')';
        }
        if($room_type != '' && $room_type != '0'){
            $find_in_set_room .=  'and p.room_type IN ( ';
            $roomvalue = explode(',',$room_type);
            foreach($roomvalue as $room) {
                $find_in_set_room .= " '$room',";
            }
        }
        if ($find_in_set_room != '') {
            $find_in_set_room = substr ( $find_in_set_room, 0, - 1 );
            $search .= ' ' . $find_in_set_room . ') ';
        }

        if($home_type != '' && $home_type != '0'){
            $find_in_set_home .=  'and p.home_type IN ( ';
            $homevalue = explode(',',$home_type);
            foreach($homevalue as $home) {
                $find_in_set_home .= " '$home',";
            }
        }
        if ($find_in_set_home != '') {
            $find_in_set_home = substr ( $find_in_set_home, 0, - 1 );
            $search .= ' ' . $find_in_set_home . ') ';
        }
        if($list_type != '' && $list_type != '0'){
            $find_in_set_categories .=  'and (';
            $listvalue = explode(',',$list_type);
            foreach($listvalue as $list) {
                $find_in_set_categories .= ' FIND_IN_SET("' . $list . '", p.list_name) OR';
            }
        }
        if ($find_in_set_categories != '') {
            $find_in_set_categories = substr ( $find_in_set_categories, 0, - 2 );
            $search .= ' ' . $find_in_set_categories . ') ';
        }
        if($page>0){
            $pageLimitStart=($page*$perpage)-$perpage;
            $this->db->limit($perpage,($page*$perpage)-$perpage);
        }else{
            $page=1;
            $pageLimitStart=0;
            $this->db->limit($perpage,0);
        }
        $searchPerPage=$perpage;
        $condition .= '( 1=1';
        $user_id = $_POST['user_id'];
        if($mcityId !='')
        {
            $google_key = $this->config->item('google_developer_key');
            $googleAddress = str_replace(" ", "+", $mcityId);
            $bing_map_api = $this->config->item('bing_developer_key');
            $json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$googleAddress&key=$google_key");
            //$json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$googleAddress&sensor=false&key=AIzaSyCwuZrRzClAyzL42-lMHVcWZfY49AhvXcM");
            //$json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$googleAddress&sensor=false&key=$this->google_map_api");
            $json = json_decode($json);
            /*START */
            // $json            = json_decode($address_details);
            // print_r($json); exit();
            $cou             = count($json->{'results'});
            // echo $cou; exit();
            /*Check if google returns address boundaries*/
            if ($cou > 0) {
                $this->data['lat']  = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
                $this->data['long'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};
                $minLat       = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lat'};
                $minLong      = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lng'};
                $maxLat       = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lat'};
                $maxLong      = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lng'};
            } else {
                /*if google does not returns any address boundaries then proceed with bing - Better performance*/
                $address_details  = file_get_contents("http://dev.virtualearth.net/REST/v1/Locations?query=$googleAddress&key=$bing_map_api");
                $json       = json_decode($address_details);
                $boundaryExtracted  = $json->resourceSets[0]->resources[0]->bbox;
                $LatLangExtracted = $json->resourceSets[0]->resources[0]->point->coordinates;
                $this->data['lat']  = $LatLangExtracted[0];
                $this->data['long'] = $LatLangExtracted[1];
                $minLat       = $boundaryExtracted[0];
                $minLong      = $boundaryExtracted[1];
                $maxLat       = $boundaryExtracted[2];
                $maxLong      = $boundaryExtracted[3];
            }
            /* END */
            /*$newAddress = $json->{'results'}[0]->{'address_components'};
      $this->data ['lat'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
      $this->data ['long'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};
      foreach($newAddress as $nA)
      {
        if($nA->{'types'}[0] == 'locality')$location = $nA->{'long_name'};
        if($nA->{'types'}[0] == 'administrative_area_level_2')$city = $nA->{'long_name'};
        if($nA->{'types'}[0] == 'country')$country = $nA->{'long_name'};
      }
      $minLat = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lat'};
      $minLong = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lng'};
      $maxLat = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lat'};
      $maxLong = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lng'};*/
            $condition .= ' AND (pa.lat BETWEEN "'.$minLat.'" AND "'.$maxLat.'" ) AND (pa.lang BETWEEN "'.$minLong.'" AND "'.$maxLong.'" )';
        }
        //echo $condition; exit;
        if($mrentalId !='')
        {
            $condition .= ' and p.id = "' .$_POST['mrental_Id']. '" ';
        }
        $condition .= ' ) ';
        //$condition=' where '.$condition.$search.' and p.status="Publish" group by p.id order by p.created desc limit '. $pageLimitStart . ',' . $searchPerPage;
        $condition=' where '.$condition.$search.' and p.status="Publish" group by p.id order by p.created desc,' . $searchPerPage;
        $select_qry = "select  p.product_title,p.instant_pay,p.description,p.id,p.price,p.currency,p.fav,p.home_type,u.image as userphoto,u.email,u.user_name,u.id as userid,pa.lat as latitude,pa.lang as longitude, pp.product_image from ".PRODUCT." p LEFT JOIN ".PRODUCT_ADDRESS_NEW." pa on pa.productId=p.id LEFT JOIN ".PRODUCT_PHOTOS." pp on pp.product_id=p.id LEFT JOIN ".USERS." u on (u.id=p.user_id) ".$condition;
        $rentalList = $this->mobile_model->ExecuteQuery($select_qry);
        $searchcount = $rentalList->num_rows();
        // echo $this->db->last_query(); //die;
        $mapcount=0;
        $condition = array('email'=>$email);
        $userDetails = $this->mobile_model->get_all_details ( USERS, $condition );
        $userId = $userDetails->row()->id;
        $favs = array();
        $checkFavorite = $this->mobile_model->get_all_details(LISTS_DETAILS, array('user_id'=>$userId));
        foreach($checkFavorite->result() as $result)
            $favs[] = $result->product_id;
        $rentalListArr = array();
        $latandlog =array();
        foreach($rentalList->result() as $rental){
            if($pricemin !="" && $pricemax !="") {
                //$filter_price = $rental->price;
                $filter_price = currency_conversion($rental->currency,$_POST['currency_code'], $rental->price);
                if($filter_price >= $pricemin && $filter_price <= $pricemax && $pricemin !="" && $pricemax !="" ) {
                    if (in_array($rental->id,$favs))$fav = 1;
                    $fav = 0;
                    if($user_id !="" || $user_id !=0) {
                        $select_qrys = "select fc_lists.id from fc_lists where  find_in_set(".$rental->id.",product_id) and user_id = ".$user_id;
                        $checkFavorite = $this->mobile_model->ExecuteQuery($select_qrys);
                        if($checkFavorite->num_rows() > 0) $fav = 1;
                        else $fav = 0;
                    }
                    $price_details .= $rental->price.',';
                    if($rental->product_image != ''){
                        $p_img = explode('.',$rental->product_image);
                        $suffix = strrchr($rental->product_image, ".");
                        $pos = strpos  ( $rental->product_image  , $suffix);
                        $name = substr_replace ($rental->product_image, "", $pos);
                        // echo $suffix . "<br><br>". $name;
                        $pro_img = $name.''.$suffix;
                        $proImage = base_url().'images/rental/'.$pro_img;
                    }else{
                        $proImage = base_url().'images/rental/dummyProductImage.jpg';
                    }
                    $condition = array('currency_type'=>$rental->currency);
                    $currency_rate = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                    $currency_code = $currency_rate->row()->currency_symbols;
                    $property_currency_symbol = $currency_rate->row()->currency_symbols;
                    $userCurrencySymbol = $this->db->select('currency_symbols')->where('currency_type',$_POST['currency_code'])->get(CURRENCY)->row()->currency_symbols;
                    //
                    if($rental->currency != $_POST['currency_code'])
                    {
                        $currency_price = currency_conversion($rental->currency,$_POST['currency_code'], $rental->price);
                    }
                    else
                    {
                        $currency_price = $rental->price;
                    }
                    if($rental->userphoto != '') {
                        $userphoto = base_url().'images/users/'.$rental->userphoto;
                    }else{
                        $userphoto = base_url().'images/site/profile.jpg';
                    }
                    if($rental->user_name != ''){
                        $host_name = $rental->user_name;
                    } else {
                        $host_name ="";
                    }
                    $latandlog[] = array("rental_id" => intval($rental->id), "rental_title" => $rental->product_title,"description"=>$rental->description,"rental_image" =>$proImage,"latitude" => $rental->latitude,"longitude" => $rental->longitude,"userphoto" =>$userphoto,"is_favourite"=>$fav,"rental_price" =>floatval($currency_price),"user_currency"=>$userCurrencySymbol,"home_type"=>$rental->home_type,"hostname"=>$host_name,"host_id"=>intval($rental->userid),"property_currency_code"=>$rental->currency,"property_currency_symbol"=>$property_currency_symbol);
                    $rentalListArr[] = array("rental_id" => intval($rental->id), "rental_title" => $rental->product_title,"description"=>$rental->description,"rental_image" =>$proImage,"latitude" => $rental->latitude,"longitude" => $rental->longitude,"userphoto" =>$userphoto,"is_favourite"=>$fav,"rental_price" =>floatval($currency_price),"user_currency"=>$userCurrencySymbol,"home_type"=>$rental->home_type,"hostname"=>$host_name,"host_id"=>intval($rental->userid),"property_currency_code"=>$rental->currency,"property_currency_symbol"=>$property_currency_symbol);
                    $mapcount++;
                    $fav = 0;
                }
            } else {
                if (in_array($rental->id,$favs))$fav = 1;
                $fav = 0;
                if($user_id !="" || $user_id !=0) {
                    $select_qrys = "select fc_lists.id from fc_lists where  find_in_set(".$rental->id.",product_id) and user_id = ".$user_id;
                    $checkFavorite = $this->mobile_model->ExecuteQuery($select_qrys);
                    if($checkFavorite->num_rows() > 0) $fav = 1;
                    else $fav = 0;
                }
                $price_details .= $rental->price.',';
                if($rental->product_image != ''){
                    $p_img = explode('.',$rental->product_image);
                    $suffix = strrchr($rental->product_image, ".");
                    $pos = strpos  ( $rental->product_image  , $suffix);
                    $name = substr_replace ($rental->product_image, "", $pos);
                    // echo $suffix . "<br><br>". $name;
                    $pro_img = $name.''.$suffix;
                    $proImage = base_url().'images/rental/'.$pro_img;
                }else{
                    $proImage = base_url().'images/rental/dummyProductImage.jpg';
                }
                $condition = array('currency_type'=>$rental->currency);
                $property_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                $property_currency_symbol = $property_currency_details->row()->currency_symbols;
                $currency_code = $property_currency_details->row()->currency_symbols;
                //$currency_price = $rental->price;
                $userCurrencySymbol = $this->db->select('currency_symbols')->where('currency_type',$_POST['currency_code'])->get(CURRENCY)->row()->currency_symbols;
                //$currency_price = $rental->price;
                if($rental->currency != $_POST['currency_code'])
                {
                    $currency_price = currency_conversion($rental->currency,$_POST['currency_code'], $rental->price);
                }
                else
                {
                    $currency_price = $rental->price;
                }
                if($rental->userphoto != '') {
                    $userphoto = base_url().'images/users/'.$rental->userphoto;
                }else{
                    $userphoto = base_url().'images/site/profile.jpg';
                }
                if($rental->user_name != ''){
                    $host_name = $rental->user_name;
                } else {
                    $host_name ="";
                }
                $latandlog[] = array("rental_id" => intval($rental->id), "rental_title" => $rental->product_title,"description"=>$rental->description,"rental_image" =>$proImage,"latitude" => $rental->latitude,"longitude" => $rental->longitude,"userphoto" =>$userphoto,"is_favourite"=>$fav,"rental_price" =>floatval($currency_price),"user_currency"=>$userCurrencySymbol,"home_type"=>$rental->home_type,"hostname"=>$host_name,"host_id"=>intval($rental->userid),"property_currency_code"=>$rental->currency,"property_currency_symbol"=>$property_currency_symbol);
                $rentalListArr[] = array("rental_id" => intval($rental->id), "rental_title" => $rental->product_title,"description"=>$rental->description,"rental_image" =>$proImage,"latitude" => $rental->latitude,"longitude" => $rental->longitude,"userphoto" =>$userphoto,"is_favourite"=>$fav,"rental_price" =>floatval($currency_price),"user_currency"=>$userCurrencySymbol,"home_type"=>$rental->home_type,"hostname"=>$host_name,"host_id"=>intval($rental->userid),"property_currency_code"=>$rental->currency,"property_currency_symbol"=>$property_currency_symbol);
                $mapcount++;
                $fav = 0;
            }
        }
        $currency_val = array();
        if($mcityId == ''){
            if($searchcount == 0){
                $rentalListArr = array();
                $json_encode = json_encode(array("status"=>0,"message"=>"No property available","rentalList" =>$rentalListArr,"property" =>$property,"rooms" =>$rooms,"attribute"=>$attribute,"currency_list"=>$currency_val));
            }else{
                $json_encode = json_encode(array("status"=>1,"message"=>"property available","rentalList" => $rentalListArr,"property" =>$property,"rooms" =>$rooms,"attribute"=>$attribute,"currency_list"=>$currency_val));
            }
        }else{
            $json_encode = json_encode(array("status"=>1,"message"=>"property available","rentalList"=>$latandlog,"property" =>$property,"rooms" =>$rooms,"attribute"=>$attribute,"currency_list"=>$currency_val));
        }
        echo $json_encode;
    }
    /* Property Rental Detail Page */
    public function rental_detail() {
        $email = $_POST['email'];
        $prodID = $_POST['prod_id'];
        $prodPrice = $_POST['prodPrice'];
        $user_id = $_POST['user_id'];
        $userDetails = $this->mobile_model->get_all_details(USERS, array('email'=>$email));
        $host_details = $this->mobile_model->get_all_details(USERS, array('id'=>$user_id));

        if($host_details->num_rows() != ''){
            $wallet = $host_details->row()->referalAmount;
            if($host_details->row()->referalAmount_currency != $_POST['currency_code'])
            {
                $wallet_balance_amount = currency_conversion($host_details->row()->referalAmount_currency,$_POST['currency_code'], $wallet);
            }else{
                $wallet_balance_amount =  $wallet;
            }
        }
        $userId = $userDetails->row()->id;
        $user_status = $userDetails->row()->status;
        $fav = 0;
        /*Get Coupon available*/
        $curr_date = date('Y-m-d');
        $get_coupon = $this->mobile_model->get_coupon_available($curr_date);
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';
        if($user_id !="" || $user_id !=0)
        {
            $select_qrys = "select fc_lists.id from fc_lists where  find_in_set(".$prodID.",product_id) and user_id = ".$user_id;
            $checkFavorite = $this->mobile_model->ExecuteQuery($select_qrys);
            if($checkFavorite->num_rows() > 0) $fav = 1;
            else $fav = 0;
        }
        $where1 = array('p.id'=>$prodID);
        $where2 = array('product_id'=>$prodID);
        $this->db->select('p.product_title,p.listings, p.home_type, p.room_type,p.datefrom, p.dateto, p.price_perweek, p.price_permonth, p.id, p.user_id, p.description, p.fav,p.price, p.image, p.accommodates, p.bedrooms,p.space, p.beds, p.noofbathrooms, p.minimum_stay, p.cancellation_policy, p.house_rules,p.guest_access, 
    p.interact_guest,p.neighbor_overview,p.neighbor_around,p.other_thingnote,p.list_name,pa.lat as latitude,pa.lang as longitude, u.description as description1, u.phone_no, rq.id, rq.checkin, rq.checkout, u.user_name, u.group, u.s_phone_no, u.about, u.loginUserType, u.email as RenterEmail, u.image as thumbnail,
      pa.country, pa.state, pa.city, pa.zip, pa.address, u.is_verified, u.id_verified, u.ph_verified, u.created, u.facebook, u.google, u.about, u.referalAmount,p.security_deposit,p.currency,rq.booking_status,p.instant_pay,p.request_to_book,p.instantbook,p.cancel_percentage');
        $this->db->from(PRODUCT.' as p');
        $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
        $this->db->join(USERS.' as u',"u.id=p.user_id","LEFT");
        $this->db->join(RENTALENQUIRY.' as rq',"rq.prd_id=p.id","LEFT");
        $this->db->where($where1);
        $this->db->where('p.status','Publish');
        $this->db->group_by('rq.id');
        $rental_details = $this->db->get();
        //echo '<pre>';print_r($rental_details->result());die;
        $get_host_details = $this->mobile_model->get_all_details(USERS, array('id'=>$rental_details->row()->user_id));
        $this->db->select('product_image');
        $this->db->from(PRODUCT_PHOTOS);
        $this->db->where($where2);
        $photoDetails = $this->db->get();
        if($rental_details->num_rows() > 0) {
            $prodimgArr = array();
            $proddetailArr = array();
            $coupon_details = array();
            $check = array();
            $list_info = array();
            $producttitle="";
            $productdesc="";
            $productprice="";
            $userimg="";
            $loginUserType="";
            $hostname="";
            $accommodates="";
            $bedroom="";
            $beds="";
            $bathrooms="";
            $country="";
            $state="";
            $city="";
            $post_code="";
            $address="";
            $latitude="";
            $longitude="";
            $minimum_stay="";
            $cancellation="";
            $house_rules="";
            $product_space ="";
            $guest_access="";
            $interact_guest="";
            $neighbor_overview="";
            $neighbor_around="";
            $other_things_to_note="";
            $list_name="";
            $rental_id="";
            $host_id="";
            $host_email="";
            $user_currency="";
            $user_about="";
            $price_perweek="";
            $price_permonth="";
            $email_verified="";
            $ph_verified="";
            $id_verified="";
            $listarr = array();
            $datefrom = "";
            $dateto = "";
            $home_type = "";
            $member_since = "";
            $facebook = "";
            $google = "";
            $userAddress = "";
            $hostabout = "";

            foreach($photoDetails->result() as $rental_detail){
                if($rental_detail->product_image != ''){
                    $p_img = explode('.',$rental_detail->product_image);
                    $suffix = strrchr($rental_detail->product_image, ".");
                    $pos = strpos  ( $rental_detail->product_image  , $suffix);
                    $name = substr_replace ($rental_detail->product_image, "", $pos);
                    // echo $suffix . "<br><br>". $name;
                    $pro_img = $name.''.$suffix;
                    $proImage = base_url().'images/rental/'.$pro_img;
                }else{
                    $proImage = base_url().'images/rental/dummyProductImage.jpg';
                }
                $prodimgArr[] = array("product_image" =>$proImage);
            }
            /* print_r($rental_details->result()); die();*/
            foreach($rental_details->result() as $rental_detail){
                $instant_pay_status = "";
                $request_to_book_status = "";
                $instant_payment = "";
                if($rental_detail->instantbook == 'yes'){ $instant_payment = true; }else{ $instant_payment = false; }
                if($rental_detail->instant_pay == 'Yes'){ $instant_pay_status = true; }else{ $instant_pay_status = false; }
                if($rental_detail->request_to_book == 'Yes'){ $request_to_book_status = true; }else{ $request_to_book_status = false; }
                if($rental_detail->checkin != '' && $rental_detail->booking_status =="Booked"){
                    $checkin = $rental_detail->checkin;
                    $checkout = $rental_detail->checkout;
                }else{
                    $checkin = '';
                    $checkout = '';
                }
                $producttitle = $rental_detail->product_title;
                $productdesc = $rental_detail->description;
                //
                $userCurrencySymbol = $this->db->select('currency_symbols')->where('currency_type',$_POST['currency_code'])->get(CURRENCY)->row()->currency_symbols;
                if($rental_detail->currency != $_POST['currency_code'])
                {
                    $productprice = currency_conversion($rental_detail->currency,$_POST['currency_code'], $rental_detail->price);
                }
                else
                {
                    $productprice = $rental_detail->price;
                }
                if(($checkin != "" && $checkout != "") || ($checkin != null&& $checkout != null)) {
                    $check[] = array("checkin" =>$checkin,'checkout'=>$checkout);
                }
                $hostname = $rental_detail->user_name;
                if($rental_detail->thumbnail != ''){
                    $userimg = base_url().'images/users/'.$rental_detail->thumbnail;
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($rental_detail->loginUserType != ''){
                    $loginUserType = $rental_detail->loginUserType;
                }else{
                    $loginUserType = '';
                }

                $home_type_sql=$this->mobile_model->get_all_details(LISTSPACE_VALUES,array("id"=>$rental_detail->home_type));
                $room_type_sql=$this->mobile_model->get_all_details(LISTSPACE_VALUES,array("id"=>$rental_detail->room_type));

                if(is_int($rental_detail->home_type) || ($rental_detail->home_type!=0)) {
                    $home_type_varfinal =trim($home_type_sql->row()->list_value);
                } else {
                    $home_type_varfinal = $rental_detail->home_type;
                }
                $home_type = $home_type_varfinal;
                if(is_int($rental_detail->room_type) || ($rental_detail->room_type!=0))
                {
                    $room_type_sql=$this->mobile_model->get_all_details(LISTSPACE_VALUES,array("id"=>$rental_detail->room_type));
                    $room_type_varfinal =trim($room_type_sql->row()->list_value);
                }
                else
                {
                    $room_type_varfinal = $rental_detail->room_type;
                }
                $listing_json = $rental_detail->listings;
                $listing_decode = json_decode($listing_json);
                /* print_r($rental_detail->result()); die();*/
                if(count($listing_decode)>0)
                {
                    $list_info = array();
                    /*Muppidathi P - Get list space detail with list space values*/
                    $list_space_det = $this->mobile_model->get_all_details(LISTSPACE,array("status"=>'Active'));
                    if($list_space_det->num_rows() > 0)
                    {
                        foreach($list_space_det->result() as $list_space){

                            if($list_space->id == $home_type_sql->row()->listspace_id)
                            {
                                $list_info[] = array("label" => $list_space->attribute_name,"value" => $home_type);
                            }
                            if($list_space->id == $room_type_sql->row()->listspace_id)
                            {
                                $list_info[] = array("label" => $list_space->attribute_name,"value" => $room_type_varfinal);
                            }else{

                            }
                        }

                    }
                    /* $list_info[] = array("label" => "Property Type","value" => $home_type);
                     $list_info[] = array("label" => "Room Type","value" => $room_type_varfinal);*/
                    foreach($listing_decode as $lkey=>$lvalues)
                    {
                        $listinginformation = $this->mobile_model->get_all_details ( LISTING_TYPES, array('id'=>$lkey) );
                        /*print_r($listinginformation->result());*/
                        if(trim($lkey)==trim($listinginformation->row()->id))
                        {
                            $listingchild = $this->mobile_model->get_all_details ( LISTING_CHILD, array('id'=>$lvalues));
                            /*print_r($listingchild->result());*/
                            if ($listinginformation->row()->type == 'option')
                            {
                                $list_info[] = array("label" => $listinginformation->row()->labelname,"value" => (($listingchild->num_rows() > 0 ) ? $listingchild->row()->child_name : "")) ;
                            }
                            else
                            {
                                $list_info[] = array("label" => $listinginformation->row()->labelname,"value" => (
                                    ($lvalues != "" ) ? $lvalues : ""));
                            }
                            if(strtolower($listinginformation->row()->name)=="bedrooms")
                                $bedroom = ($listingchild->num_rows() > 0) ? $listingchild->row()->child_name : '';
                            if(strtolower($listinginformation->row()->name)=="beds") {
                                $beds = $listingchild->row()->child_name;
                            }
                            if(strtolower($listinginformation->row()->name)=="bathrooms") {
                                $bathrooms = $listingchild->row()->child_name;
                            }
                            if(strtolower($listinginformation->row()->name)=="accommodates") {
                                $accommodates = (($listingchild->row()->child_name != '' ) ? $listingchild->row()->child_name : '');
                            }
                        }
                    }
                }
                else {
                    $bedroom = '';
                    $beds = '';
                    $bathrooms = '';
                    $accommodates='';
                } /*print_r($listinginformation->result()); die();*/
                //$listingchild = $this->db->select('*')->from(LISTING_CHILD)->where('id',$rental_detail->accommodates)->get()->row();
                $accommodates = $this->db->select('child_name')->from(LISTING_CHILD)->where('id',$rental_detail->accommodates)->get()->row()->child_name;

                if($accommodates != '')
                {
                    $accommodates = $accommodates;
                }else{
                    $accommodates='0';
                }
                // $bedroom = $listing_decode->Bedrooms;
                // $beds = $listing_decode->Beds;
                // if($listing_decode->Bathrooms == ''){
                // $bathrooms = '';
                // }else{
                // $bathrooms = $listing_decode->Bathrooms;
                //}
                //  if($bedroom== '')$bedroom = $rental_detail->bedrooms;
                //  if($beds == '')$beds = $rental_detail->beds;
                //  if($bathrooms == '')$bathrooms = $rental_detail->noofbathrooms;
                if($rental_detail->country != ''){
                    $country = $rental_detail->country;
                }else{
                    $country = '';
                }
                if($rental_detail->space == ''){
                    $product_space = '';
                }else{
                    $product_space = $rental_detail->space;
                }
                if($rental_detail->state != ''){
                    $state = $rental_detail->state;
                }else{
                    $state = '';
                }
                if($rental_detail->city != ''){
                    $city = $rental_detail->city;
                }else{
                    $city = '';
                }
                if($rental_detail->zip != '') {
                    $post_code = $rental_detail->zip;
                }else{
                    $post_code ='';
                }
                if($rental_detail->address !='') {
                    $address = $rental_detail->address;
                }else{
                    $address ='';
                }
                if($rental_detail->latitude !='') {
                    $latitude = $rental_detail->latitude;
                }else{
                    $latitude = '';
                }
                if($rental_detail->longitude !='') {
                    $longitude = $rental_detail->longitude;
                }else{
                    $longitude ='';
                }
                if($rental_detail->minimum_stay !='') {
                    $minimum_stay_values = $this->db->select('child_name')->from(LISTING_CHILD)->where('id',$rental_detail->minimum_stay)->get()->row()->child_name;
                    if($minimum_stay_values != ""){
                        $minimum_stay=$minimum_stay_values;
                    }else { $minimum_stay =''; }
                }else{

                    $minimum_stay ='';

                }
                if($rental_detail->cancellation_policy !='') {
                    $cancellation = $rental_detail->cancellation_policy;
                }else{
                    $cancellation = '';
                }
                if($rental_detail->cancel_percentage !='') {
                    $cancel_percentage = $rental_detail->cancel_percentage;
                }else{
                    $cancel_percentage = '';
                }
                if($rental_detail->security_deposit != '') {
                    if($rental_detail->currency != $_POST['currency_code'])
                    {
                        $security_deposit = currency_conversion($rental_detail->currency,$_POST['currency_code'], $rental_detail->security_deposit);
                        //$security_deposit = floatval($rental_detail->security_deposit);
                    }
                    else{
                        $security_deposit = floatval($rental_detail->security_deposit);
                    }
                }else{
                    $security_deposit ='0';
                }
                $rental_id = $_POST['prod_id'];
                $host_id = intval($rental_detail->user_id);
                if($rental_detail->about != '') {
                    $user_about = $rental_detail->about;
                }else{
                    $user_about ='';
                }
                if($rental_detail->price_perweek != '') {
                    $price_perweek = $rental_detail->price_perweek;
                }else{
                    $price_perweek = '';
                }
                if($rental_detail->price_permonth != '') {
                    $price_permonth = $rental_detail->price_permonth;
                }else{
                    $price_permonth = '';
                }
                $hostemail = $this->mobile_model->get_all_details ( USERS, array('id'=>$host_id) );
                $host_email = $hostemail->row()->email;
                if($rental_detail->house_rules == ''){
                    $house_rules = '';
                }else{
                    $house_rules = $rental_detail->house_rules;
                }
                if($rental_detail->guest_access == ''){
                    $guest_access = '';
                }else{
                    $guest_access = $rental_detail->guest_access;
                }
                if($rental_detail->interact_guest == ''){
                    $interact_guest = '';
                }else{
                    $interact_guest = $rental_detail->interact_guest;
                }
                if($rental_detail->neighbor_overview == ''){
                    $neighbor_overview = '';
                }else{
                    $neighbor_overview = $rental_detail->neighbor_overview;
                }
                if($rental_detail->neighbor_around == ''){
                    $neighbor_around = '';
                }else{
                    $neighbor_around = $rental_detail->neighbor_around;
                }
                if($rental_detail->other_thingnote == ''){
                    $other_things_to_note = '';
                }else{
                    $other_things_to_note = $rental_detail->other_thingnote;
                }
                if($rental_detail->list_name == ''){
                    $list_name = '';
                }
                else
                {
                    $list_name = $rental_detail->list_name;
                }
                $datefrom = $rental_detail->datefrom;
                $dateto = $rental_detail->dateto;
                /*if(is_int($rental_detail->home_type) || ($rental_detail->home_type!=0)) {
            $home_type_sql=$this->mobile_model->get_all_details(LISTSPACE_VALUES,array("id"=>$rental_detail->home_type));
      $home_type_varfinal =trim($home_type_sql->row()->list_value);
          } else {
            $home_type_varfinal = $rental_detail->home_type;
          }
          $home_type = $home_type_varfinal;*/
                $email_verified=$rental_detail->is_verified;
                $ph_verified=$rental_detail->ph_verified;
                $id_verified=$rental_detail->id_verified;
                $member_since=$rental_detail->created;
                $facebook=$rental_detail->facebook;
                $google=$rental_detail->google;
                $userAddress=$rental_detail->address;
            }
            $list = $rental_details->row()->list_name;
            $list_value = explode(',',$list);
            for($i=0;$i<count($list_value);$i++) {
                if($list_value[$i] !="") {
                    $list_detail = $this->mobile_model->get_all_details (LIST_VALUES, array('id'=>$list_value[$i],'status'=>'Active') );
                    if($list_detail->num_rows() > 0){
                        if($list_detail != '') { $list_name = $list_detail->row()->list_value; } else { $list_name=""; }
                        if($list_detail != '') { $list_img = $list_detail->row()->image; }  else { $list_img=""; }
                        if($list_img != '') { $list_img = base_url().'images/attribute/'.$list_detail->row()->image;   } else {  $list_img=""; }
                        $listarr[] = array('list_name'=>$list_name,'list_image'=>$list_img);
                    }
                }
            }
            $service_tax_query='SELECT * FROM '.COMMISSION.' WHERE seo_tag="guest-booking" AND status="Active"';
            $service_taxs = $this->mobile_model->ExecuteQuery($service_tax_query);
            //echo $this->db->last_query();
            $services =array();
            if(($service_taxs->num_rows())>0) {
                $service_type = $service_taxs->row()->promotion_type;
                $service_fee = $service_taxs->row()->commission_percentage;
                $services = array("service_type"=>$service_type,"service_value"=>floatval($service_fee));
            } else {
                $service_type = "";
                $service_fee = "";
                $services = array("service_type"=>$service_type,"service_value"=>"");
            }
            /* schedule starts here */
            $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$rental_id));
            $sometime_arr = array();
            if($scheduleCheck->num_rows() >0){
                foreach($scheduleCheck->result() as $sc){
                    $json_decode = json_decode($sc->data);
                    foreach($json_decode as $key=>$value){
                        if($value->status=="available"){
                            $status = 1;
                        }else if($value->status=="booked"){
                            $status = 2;
                        }else if($value->status=="unavailable"){
                            $status = 3;
                        }

                        if($rental_detail->currency != $_POST['currency_code'])
                        {
                            $seasonalprice = currency_conversion($rental_detail->currency,$_POST['currency_code'], $value->price);
                        }
                        else
                        {
                            $seasonalprice = $value->price;
                        }

                        $sometime_arr[] = array("date"=>$key,"price"=>floatval($seasonalprice ),"status"=>$status);
                    }
                }
            }
            /* schedule ends here */
            $condition = array('currency_type'=>$rental_detail->currency);
            $currency_details = $this->mobile_model->get_all_details (CURRENCY, $condition );
            $user_currency = $currency_details->row()->currency_symbols;
            $userCurrencySymbol = $this->db->select('currency_symbols')->where('currency_type',$_POST['currency_code'])->get(CURRENCY)->row()->currency_symbols;
            if($rental->currency != $_POST['currency_code'])
            {
                $currency_price = currency_conversion($rental->currency,$_POST['currency_code'], $rental->price);
            }
            else
            {
                $currency_price = $rental->price;
            }
            $reviewTotals = $this->mobile_model->get_review_tot($prodID);
            $star_avg = $reviewTotals->row()->tot_tot /* * 20 */;
            $reviewData = $this->mobile_model->get_review($prodID);
            $reviewTotal = $reviewData->num_rows();
            $property_review = array();
            if($reviewData->num_rows()>0){
                foreach($reviewData->result() as $review){
                    if($review->image == '') {
                        $img_url = base_url().'images/users/profile.png';
                    }  else {
                        $img_url = base_url().'images/users/'.$review->image;
                    }
                    $review_date = date('d F Y',strtotime($review->dateAdded));
                    if($review->firstname !="")$review_name = $review->firstname; else $review_name="";
                    if($review->review !="")$review_comments = $review->review; else $review_comments="";
                    $property_review[] = array(
                        "user_name"=>$review_name,
                        "bookingno"=>$review->bookingno,
                        "review"=>nl2br($review_comments),
                        "star_rating"=>intval($review->total_review),
                        "review_date"=>$review_date,
                        "user_image"=>$img_url);
                }
            }
            if($get_host_details->row()->status == "Active")
            {
                foreach ($get_coupon->result() as $coupon)
                {
                    $get_prpducts = explode(',', $coupon->product_id);
                    if(in_array($prodID, $get_prpducts) && ($coupon->quantity != $coupon->purchase_count) && ($coupon->dateto >= date('Y-m-d')))
                    {
                        $coupon_details[] = array(
                            'coupon_name' =>$coupon->coupon_name,
                            'coupon_code' =>$coupon->code,
                            'coupon_type' =>$coupon->coupon_type,
                            'coupon_price_value' =>$coupon->price_value,
                            'coupon_limit' =>intval($coupon->quantity),
                            'coupon_purchase_count' =>intval($coupon->purchase_count),
                            'coupon_available_limit'=>intval($coupon->quantity - $coupon->purchase_count),
                            'coupon_datefrom' =>$coupon->datefrom,
                            'coupon_dateto' =>$coupon->dateto,
                            'coupon_status' =>$coupon->status,
                        );
                    }

                }
            }else{
                $coupon_details =  array();
            }
            if(count($coupon_details) == 0)
            {
                $coupon_details =  array();
            }
            $json_encode = json_encode(array(
                "status"=>1,
                "message"=>"Property available",
                "product_image" => $prodimgArr,
                "admin_instant_pay_staus" => $instant_pay_staus,
                "check"=>$check,
                "defaultproducttitle"=>(string)$producttitle,
                "host_status"=>(($get_host_details->num_rows() > 0) ? $get_host_details->row()->status : ""),
                "guest_status"=>(($user_status != "") ? $user_status : ""),
                "productdesc"=>$productdesc,
                "productprice"=>floatval($productprice),
                "hostimg"=>$userimg,
                "loginUserType"=>$loginUserType,
                "hostname"=>$hostname,
                "guest_capacity"=>$accommodates,
                "bedrooms"=>$bedroom,
                "beds"=>$beds,
                "is_favourite"=>$fav,
                "bathrooms"=>$bathrooms,
                "country"=>$country,
                "state"=>$state,
                "city"=>$city,
                "post_code"=>$post_code,
                "address"=>$address,
                "latitude"=>$latitude,
                "longitude"=>$longitude,
                "minimum_stay"=>$minimum_stay,
                "cancellation"=>$cancellation,
                "cancel_percentage"=>$cancel_percentage,
                "house_rules"=>$house_rules,
                "product_space"=>$product_space,
                "guest_access"=>$guest_access,
                "interact_guest"=>$interact_guest,
                "neighbor_overview"=>$neighbor_overview,
                "other_things_to_note"=>$other_things_to_note,
                "neighbor_around"=>$neighbor_around,
                "instant_pay_status"=>$instant_pay_status,
                "request_to_book_status"=>$request_to_book_status,
                "instant_payment"=>$instant_payment,
                "list_name"=>$list_name,
                'rental_id'=>intval($rental_id),
                'host_id'=>intval($host_id),
                'host_email'=>$host_email,
                'user_currency'=>$userCurrencySymbol,
                'user_about'=>$user_about,
                'week_price'=>floatval($price_perweek),
                'month_price'=>floatval($price_permonth),
                'url'=>base_url(),
                'datefrom'=>$datefrom,
                'dateto'=>$dateto,
                'home_type'=>$home_type,
                'email_verified'=>$email_verified,
                'ph_verified'=>$ph_verified,
                'id_verified'=>$id_verified,
                'member_since'=>$member_since,
                'facebook'=>$facebook,
                'google'=>$google,
                'userAddress'=>$userAddress,
                'hostabout'=>$hostabout,
                "property_currency_code"=>$currency_details->row()->currency_type,
                "property_currency_symbol"=>$currency_details->row()->currency_symbols,
                'list_details'=>$listarr,
                'security_deposit'=>$security_deposit,
                "services"=>$services,
                "total_review_count"=>intval($reviewTotal),
                "over_all_rating"=>floatval($star_avg),
                "property_reviews"=>$property_review,
                "seasonal_calendar_price"=>$sometime_arr,
                "listing_info"=>$list_info,
                "coupon_details"=>$coupon_details,
                "wallet_balance_amount"=>$wallet_balance_amount
            ));
        } else {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Property available"));
        }
        echo $json_encode;
    }
    public function mobile_host_instant_pay()
    {
        $rental_type = $this->input->post('base_id');
        $returnStr ['status_code'] = 1;
        $NoOfDays = $this->getDatesFromRange(date('Y-m-d', strtotime($this->input->post('s_date'))), date('Y-m-d', strtotime($this->input->post('e_date'))));
        $dateCheck = $this->mobile_model->get_all_details(CALENDARBOOKING, array('PropId' => $this->input->post('P_Id')));
        $payment_gateway = $this->mobile_model->get_all_details(PAYMENT_GATEWAY, array());
        foreach ($payment_gateway->result() as $gateway)
        {
            if($gateway->id == '1'){
                $Paypal_status =$gateway->status;
            }else if($gateway->id == '3'){
                $Stripe_status =$gateway->status;
            }else{
                $Credit_Card_status =$gateway->status;
            }


        }

        $last_cron_id = $this->db->select('*')->from('fc_currency_cron')->order_by('curren_id','desc')->limit(1)->get();
        if ($dateCheck->num_rows() > 0)
        {
            foreach ($dateCheck->result() as $dateCheckStr)
            {
                if (in_array($dateCheckStr->the_date, $NoOfDays))
                {
                    $returnStr ['status_code'] = '';
                    $message = $this->rntl_dte_alrdy_bkd;
                    $returnStr ['message'] = $message;
                    $returnStr ['status_code'] = 10;
                    break;
                }
            }
        }
        if ($returnStr ['status_code'] != 10)
        {
            $admin = $this->mobile_model->get_all_details(ADMIN, array('admin_type' => 'super'));
            $data = $admin->row();
            $admin_currencyCode = trim($data->admin_currencyCode);
            $seller_currencyCode = trim($this->input->post('property_currency_code'));
            $user_currencyCode = trim($this->input->post('currency_code'));
            $amount = 1;
            $currencyPerUnitSeller = 1;
            $unitPerCurrencyUser = 1;
            if ($admin_currencyCode != $seller_currencyCode)
            {
                $currencyPerUnitSeller = convertCurrency($admin_currencyCode, $seller_currencyCode, $amount);
            }
            if ($user_currencyCode != $seller_currencyCode)
            {
                $unitPerCurrencyUser = convertCurrency($user_currencyCode, $seller_currencyCode, $amount);
            }
            $getLastBookingNo= $this->db->select('Bookingno')->order_by('id','DESC')->get(RENTALENQUIRY)->row()->Bookingno;
            if($getLastBookingNo=='')
            {
                $val = 1500000;
            }
            else
            {
                $val = $getLastBookingNo;
                $val = str_replace('EN','',$val);
                $val = $val+1;
            }
            $bookingno = "EN" . $val;
            $dataArr = array(
                'checkin' => date('Y-m-d H:i:s', strtotime($this->input->post('s_date'))),
                'checkout' => date('Y-m-d H:i:s', strtotime($this->input->post('e_date'))),
                'Enquiry' => 0,
                'numofdates' => $this->input->post('numofdates'),
                'caltophone' => 0,
                'enquiry_timezone' => 0,
                'user_id' => $this->input->post('user_id'),
                'renter_id' => $this->input->post('renter_id'),
                'totalAmt' => $this->input->post('totalAmt'),
                'NoofGuest' => $this->input->post('guests'),
                'prd_id' => $this->input->post('P_Id'),
                'cancel_percentage' => $this->input->post('cancel_percentage'),
                'currencycode' => $this->input->post('property_currency_code'),
                'secDeposit' => $this->input->post('secDeposit'),
                'serviceFee' => $this->input->post('serviceFee'),
                'subTotal' => $this->input->post('subTotal'),
                'user_currencyCode' => $user_currencyCode,
                'walletAmount' => 0,
                'currencyPerUnitSeller' => $currencyPerUnitSeller,
                'unitPerCurrencyUser' => $unitPerCurrencyUser,
                'dateAdded' => date('Y-m-d H:i:s'),
                'Bookingno' => $bookingno,
                'choosed_option' => 'instant_pay',
                'currency_cron_id'=>$last_cron_id->row()->curren_id
            );
            $booking_status = array('booking_status' => 'Enquiry');
            $dataArr1 = array_merge($dataArr, $booking_status);
            $this->db->insert(RENTALENQUIRY, $dataArr1);
            $insertid = $this->db->insert_id();
            if($user_currencyCode != 'USD')
            {
                $payable_amounts = currency_conversion($user_currencyCode,'USD',$this->input->post('totalAmt'),$last_cron_id->row()->curren_id);
            }
            else
            {
                $payable_amounts = $this->input->post('totalAmt');
            }
            $dataArr = array('productId' => $this->input->post('P_Id'), 'bookingNo' => $bookingno, 'senderId' => $this->input->post('user_id'), 'receiverId' => $this->input->post('renter_id'), 'subject' => 'Booking Request : ' . $bookingno, 'message' => $this->input->post('message'), 'currencycode' => $user_currencyCode,"dateAdded"=>date('Y-m-d H:i:s'));
            $this->mobile_model->simple_insert(MED_MESSAGE, $dataArr);
            $condition=" WHERE id=".$this->input->post('user_id');
            $TheGuest=$this->mobile_model->get_selected_fields_records("firstname,lastname,email",USERS,$condition);
            $conditionProp=" WHERE id=".$this->input->post('P_Id');
            $TheProperty=$this->mobile_model->get_selected_fields_records("product_title",PRODUCT,$conditionProp);
            $links = ''.base_url().'site/user/confirmbooking/'.$insertid.'';
            /* Mail function start */
            $newsid = '23';
            $template_values = $this->mobile_model->get_newsletter_template_details($newsid);
            if ($template_values ['sender_name'] == '' && $template_values ['sender_email'] == '') {
                $sender_email = $this->config->item('site_contact_mail');
                $sender_name = $this->config->item('email_title');
            } else {
                $sender_name = $template_values ['sender_name'];
                $sender_email = $template_values ['sender_email'];
            }
            $email_values = array('mail_type' => 'html', 'from_mail_id' => $sender_email, 'mail_name' => $sender_name, 'to_mail_id' => $TheGuest->row()->email, 'subject_message' => $template_values ['news_subject'], 'body_messages' => $message);
            $Approval_info = array('links' => $links,'email_title' => $sender_name, 'logo' => $this->data ['logo'], 'travelername' => $TheGuest->row()->firstname . "  " . $TheGuest->row()->lastname, 'propertyname' => $TheProperty->row()->product_title);
            $message = $this->load->view('newsletter/Host Approve Reservation' . $newsid . '.php', $Approval_info, TRUE);
            //send mail
            $this->load->library('email');
            $this->email->from($email_values['from_mail_id'], $sender_name);
            $this->email->to($email_values['to_mail_id']);
            $this->email->subject($email_values['subject_message']);
            $this->email->set_mailtype("html");
            $this->email->message($message);
            try {
                $this->email->send();
            } catch (Exception $e) {
                echo $e->getMessage();
            }
            /* Mail Function End */
            $dataArr = array('productId' => $this->input->post('P_Id'), 'bookingNo' => $bookingno, 'senderId' => $this->input->post('user_id'), 'receiverId' => $this->input->post('renter_id'), 'subject' => 'Booking Request : ' . $bookingno, 'message' => $this->input->post('message'), 'currencycode' => $user_currencyCode);
            $dataArr = array('productId' => $this->input->post('P_Id'), 'senderId' => $this->input->post('renter_id'), 'receiverId' => $this->input->post('user_id'), 'bookingNo' => $bookingno, 'subject' => 'Booking Request : ' . $bookingno, 'message' => 'Accepted', 'point' => '1', 'status' => 'Accept',"dateAdded"=>date('Y-m-d H:i:s'));
            $this->db->insert(MED_MESSAGE, $dataArr);
            $this->db->where('bookingNo', $bookingno);
            $this->db->update(MED_MESSAGE, array('status' => 'Accept'));
            $newdata = array('approval' => 'Accept');
            $condition = array('Bookingno' => $bookingno);
            $this->user_model->update_details(RENTALENQUIRY, $newdata, $condition);
            $jsonReturn = array("status"=>1,"message"=>"Your request has been accepted by Host!
","enquiryId"=>$insertid,"payable_paypal_currency"=>$this->paypal_curency,"payable_paypal_symbol"=>$this->paypal_symbol,"payable_paypal_total" => floatval(round(($payable_amounts),2)),"paypal_status" => $Paypal_status,"Stripe_status" => $Stripe_status,"Credit_Card_status" => $Credit_Card_status);
            echo json_encode($jsonReturn,JSON_PRETTY_PRINT);
            exit;
        }
        else
        {
            $jsonReturn = array("status"=>0,"message"=>"Rental date already booked");
            echo json_encode($jsonReturn,JSON_PRETTY_PRINT);
            exit;
        }
    }
    public function search_detail() {
        $q = $_GET['query'];
        $this->db->select('c.name,c.latitude,c.longitude,c.id,states_list.name as State,country_list.name as country_name');
        $this->db->from(CITY.' as c');
        $this->db->join(STATE_TAX.' as states_list',"states_list.id=c.stateid","LEFT");
        $this->db->join(COUNTRY_LIST.' as country_list',"country_list.id=states_list.countryid","LEFT");
        $this->db->like('states_list.name', $q);
        $this->db->or_like('c.name', $q);
        $this->db->limit(20);
        $this->db->order_by('c.name',asc);
        $this->db->order_by('states_list.name',asc);
        $query = $this->db->get();
        $search_res = $query->result_array();
        //echo $this->db->last_query();  die;
        $row_set = array();
        $state_arr = array();
        foreach ($search_res as $result){
            if (!in_array($result['State'],$state_arr)){
                $row_set[] = array(
                    'search_result' => $result['State'].','.$result['country_name'],
                    'id'=>$result['id'],'lat'=>$result['latitude'],'long'=>$result['longitude']
                );
                $state_arr[] = $result['State'];
            }
            $row_set[] = array(
                'search_result' => $result['name'].','.$result['State'].','.$result['country_name'],
                'id'=>$result['id'],'lat'=>$result['latitude'],'long'=>$result['longitude']
            );
            //$row_set[] .= array('lat'=>$result['latitude'],'long'=>$result['longitude']);
        }
        $json_encode = json_encode(array("search_list"=>$row_set));
        echo $json_encode;
    }
    public function mobile_bkguide() {
        $prd_id = $_GET['pro_id'];
        $this->db->select('pb.*,pa.post_code,pa.address,pa.apt,
                c.name as country_name,
                s.name as state_name,
                ci.name as city_name,
                p.product_name,p.product_title,p.price,p.currency,
                u.firstname,u.image,
                rq.id as EnqId,rq.booking_status,rq.checkin,rq.checkout,rq.dateAdded,rq.user_id as GestId,rq.numofdates as noofdates,rq.approval as approval,rq.serviceFee,rq.totalAmt,rq.Bookingno as Bookingno');
        $this->db->from(PRODUCT_BOOKING.' as pb');
        //$this->db->from(PAYMENT.' as py');
        $this->db->join(PRODUCT_ADDRESS.' as pa' , 'pa.product_id = pb.product_id','left');
        $this->db->join(LOCATIONS.' as c' , 'c.id = pa.country','left');
        $this->db->join(STATE_TAX.' as s' , 's.id = pa.state','left');
        $this->db->join(CITY.' as ci' , 'ci.id = pa.city','left');
        $this->db->join(PRODUCT.' as p' , 'p.id = pb.product_id');
        $this->db->join(RENTALENQUIRY.' as rq' , 'p.id = rq.prd_id');
        $this->db->join(USERS.' as u' , 'u.id = rq.user_id');
        $this->db->where('p.user_id = '.$prd_id);
        $this->db->where('rq.renter_id = '.$prd_id);
        $this->db->where('rq.booking_status != "Enquiry"');
        $this->db->group_by('rq.id');
        $this->db->order_by('rq.dateAdded','desc');
        return $this->db->get();
        echo $this->db->last_query();die;
    }
    public function mobile_login(){
        $email = $_POST['u_email'];
        $user_password = $_POST['u_psd'];
        $pwd = md5($user_password);
        $firebase_token = $_POST['firebase_token'];
        //echo $user_password.'|'.$pwd; exit;
        if($_POST['device_type'] == 'android') {
            if($_POST['u_key'] != '') {
                $data = array('mobile_key'=>'','firebase_token'=>$firebase_token);
                $condition = array('mobile_key'=>$_POST['u_key']);
                $this->mobile_model->update_details(USERS ,$data ,$condition);
                $data = array('mobile_key'=>$_POST['u_key'],'firebase_token'=>$firebase_token);
                $condition = array('email'=>$_POST['u_email']);
                $this->mobile_model->update_details(USERS ,$data ,$condition);
            }
        }
        if($_POST['device_type'] == 'ios') {
            if($_POST['u_key'] != '') {
                $data = array(
                    'ios_key'=>'',
                    'firebase_token'=>$firebase_token
                );
                $condition = array(
                    'ios_key'=>$_POST['u_key'],
                );
                $this->mobile_model->update_details(USERS ,$data ,$condition);
                $data = array(
                    'ios_key'=>$_POST['u_key'],
                    'firebase_token'=>$firebase_token
                );
                $condition = array(
                    'email'=>$_POST['u_email']
                );
                $this->mobile_model->update_details(USERS ,$data ,$condition);
            }
        }
        if (valid_email ( $email )) {
            $condition = array (
                'email' => $email,
                'password' => $pwd
            );
            $checkUser = $this->mobile_model->get_all_details (USERS, $condition );
            $status_is = $checkUser->row()->status;
            if ($checkUser->num_rows () == '1') {
                if($status_is != 'Active'){
                    $status = 'You are Account Not Active.Please contact admin';
                    $json_encode = json_encode(array('status'=>0,'message'=>$status));
                } else {
                    $data = array(
                        'firebase_token'=>$firebase_token
                    );
                    $condition = array(
                        'email'=>$_POST['u_email']
                    );
                    $this->mobile_model->update_details(USERS ,$data ,$condition);
                    $status = 'You are Logged In successfully';
                    $firstname = $checkUser->row()->firstname;
                    $lastname = $checkUser->row()->lastname;
                    $email = $checkUser->row()->email;
                    $key = $checkUser->row()->mobile_key;
                    $user_id = $checkUser->row()->id;
                    if($checkUser->row()->image != '') {
                        $img = base_url().'images/users/'.$checkUser->row()->image;
                    }else{
                        $img = base_url().'images/users/profile.png';
                    }
                    $response[] = array('firstname'=>$firstname,'lastname'=>$lastname,'email'=>$email,'userimage'=>$img,'userid'=>intval($user_id),'key'=>$key);
                    $json_encode = json_encode(array('status'=>1,'message'=>$status,'user_details'=>$response));

                }
            }else{
                $status = 'Invalid login details';
                $response=array();
                $json_encode = json_encode(array('status'=>0,'message'=>$status,'user_details'=>$response));
            }
        }
        echo $json_encode;
    }
    public function mobile_signup(){
        $firstname = $_POST['u_first_name'];
        $lastname = $_POST['u_last_name'];
        $email = $_POST['u_email'];
        $pwd = $_POST['u_psd'];
        $key = $_POST['u_key'];
        $firebase_token = $_POST['firebase_token'];
         if ($firstname == "" || $email == "") {
            echo json_encode(array('status' => 0, 'message' => 'Parameter Missing'));
            exit;
        }
        if($_POST['login_type'] == 'facebook' || $_POST['login_type'] == 'google' || $_POST['login_type'] == 'linkedin' ) {
            $this->db->select('id,image');
            $this->db->from(USERS);
            $this->db->where('email',$email);
            //$this->db->where('status','Active');
            $facebookQuery = $this->db->get();
            if($facebookQuery->num_rows() > 0 ){
                if($_POST['device_type'] == 'android' ) {
                    if($_POST['u_key'] != '') {
                        $data = array(
                            'mobile_key'=>''
                        );
                        $condition = array(
                            'mobile_key'=>$_POST['u_key']
                        );
                        $this->mobile_model->update_details(USERS ,$data ,$condition);
                        $data = array(
                            'mobile_key'=>$_POST['u_key']
                        );
                        $condition = array(
                            'email'=>$_POST['u_email']
                        );
                        $this->mobile_model->update_details(USERS ,$data ,$condition);
                    }
                }
                if($_POST['device_type'] == 'ios' ) {
                    if($_POST['u_key'] != '') {
                        $data = array(
                            'ios_key'=>''
                        );
                        $condition = array(
                            'ios_key'=>$_POST['u_key']
                        );
                        $this->mobile_model->update_details(USERS ,$data ,$condition);
                        $data = array(
                            'ios_key'=>$_POST['u_key']
                        );
                        $condition = array(
                            'email'=>$_POST['u_email']
                        );
                        $this->mobile_model->update_details(USERS ,$data ,$condition);
                    }
                }
                $user_id = $facebookQuery->row()->id;
                if($facebookQuery->row()->image != '') {
                    $img = base_url().'images/users/'.$facebookQuery->row()->image;
                }else{
                    $img = base_url().'images/users/profile.png';
                }
                $returnStr = 'You are Logged In successfully';
                $response[] = array('firstname'=>$firstname,'lastname'=>$lastname,'email'=>$email,'userimage'=>$img,'userid'=>$user_id,'key'=>$key);
                /*Firebase Notification*/
                if($firebase_token != ''){
                    error_reporting(-1);
                    ini_set('display_errors', 'On');
                    require_once __DIR__ . '/firebase.php';
                    require_once __DIR__ . '/push.php';
                    $firebase = new Firebase();
                    $push = new Push();
                    // optional payload
                    $payload = array();
                    // notification title
                    $title = 'You are Logged In successfully';
                    // notification message
                    $body = 'Logged In successfully!';
                    // push type - single user / topic
                    $push_type = isset($_GET['push_type']) ? $_GET['push_type'] : '';
                    // whether to include to image or not
                    $include_image = isset($_GET['include_image']) ? TRUE : FALSE;
                    $push->setTitle($title);
                    $push->setMessage($body);
                    if ($include_image) {
                        $push->setImage('https://api.androidhive.info/images/minion.jpg');
                    } else {
                        $push->setImage('');
                    }
                    $push->setIsBackground(FALSE);
                    $push->setPayload($payload);
                    $json = '';
                    $firbase_response = '';
                    $regId = $firebase_token;
                    $json = $push->getPush($regId);
                    $firbase_response = $firebase->send($regId, $json, $title, $body);
                }
                /*End Firebase Notification*/
                $json_encode = json_encode(array('status'=>1,'message'=>$returnStr,'user_details'=>$response,'firebase'=>$firbase_response));
            }else{
                if($_FILES['photo1'] != '')
                {
                    $uploaddir = "images/users/";
                    $data = file_get_contents($_FILES['photo1']['tmp_name']);
                    $image = imagecreatefromstring( $data );
                    $imgname=time().".jpg";
                    imagejpeg($image,$uploaddir.$imgname, 99);
                }
                else
                {
                    $imgname = '';
                }
                $orgPass = time();
                $pwd = md5($orgPass);
                $dataArr = array('firstname'=>$firstname,'lastname'=>$lastname,'user_name'=>$firstname,'image'=>$imgname,'group'=>'User','email'=>$email,'password'=>$pwd,'status'=>'Active','loginUserType'=>$_POST['login_type'],'is_verified'=>'No','created'=>date('Y-m-d H:i:s'),'mobile_key'=>$key,'firebase_token'=>$firebase_token);
                $this->mobile_model->simple_insert(USERS,$dataArr);
                $user_id = $this->db->insert_id();
                if($imgname != '') {
                    $img = base_url().'images/users/'.$imgname;
                }else{
                    $img = base_url().'images/users/profile.png';
                }
                $condition = array (
                    'email' => $email
                );
                $usrDetails = $this->mobile_model->get_all_details ( USERS, $condition );
                /* Mail function */
                $newsid='35';
                $template_values=$this->mobile_model->get_newsletter_template_details($newsid);
                if($template_values['sender_name']=='' && $template_values['sender_email']==''){
                    $sender_email=$this->data['siteContactMail'];
                    $sender_name=$this->data['siteTitle'];
                }else{
                    $sender_name=$template_values['sender_name'];
                    $sender_email=$template_values['sender_email'];
                }
                $username = $firstname.$lastname;
                $uid = $usrDetails->row ()->id;
                $username = $usrDetails->row ()->user_name;
                $email = $usrDetails->row ()->email;
                $randStr = $this->get_rand_str ( '10' );
                $cfmurl = base_url () . 'site/user/confirm_verify/' . $uid . "/" . $randStr . "/confirmation";
                $logo_mail = $this->data['logo'];
                $reg= array('username' => $username, 'cfmurl'=>$cfmurl, 'email_title' => $sender_name,'logo'=>$logo_mail );
                //print_r($this->data['logo']);
                $message = $this->load->view('newsletter/RegistrationConfirmation'.$newsid.'.php',$reg,TRUE);
                $email_values = array(
                    'from_mail_id'=>$sender_email,
                    'to_mail_id'=> $_POST['u_email'],
                    'subject_message'=>$template_values ['news_subject'],
                    'body_messages'=>$message
                );
                //send mail
                $this->load->library('email');
                $this->email->from($email_values['from_mail_id'], $sender_name);
                $this->email->to($email_values['to_mail_id']);
                $this->email->subject($email_values['subject_message']);
                $this->email->set_mailtype("html");
                $this->email->message($message);
                try{
                    $this->email->send();
                   /* $returnStr ['msg'] = 'Successfully registered';
                    $returnStr ['success'] = '1';*/
                }catch(Exception $e){
                    echo $e->getMessage();
                }
                /* Mail function End */
                /* Admin Mail function */
                $newsid='42';
                $template_values=$this->product_model->get_newsletter_template_details($newsid);
                if($template_values['sender_name']=='' && $template_values['sender_email']==''){
                    $sender_email=$this->data['siteContactMail'];
                    $sender_name=$this->data['siteTitle'];
                }else{
                    $sender_name=$template_values['sender_name'];
                    $sender_email=$template_values['sender_email'];
                }
                $username = $firstname.$lastname;
                $uid = $usrDetails->row ()->id;
                $username = $usrDetails->row ()->user_name;
                $email = $usrDetails->row ()->email;
                $randStr = $this->get_rand_str ( '10' );
                $cfmurl = 'There is one new registration done on website. User details below.';
                $logo_mail = $this->data['logo'];
                $email_values = array(
                    'from_mail_id'=>$this->input->post('email'),
                    'to_mail_id'=> $sender_email,
                    'subject_message'=>$template_values ['news_subject'],
                    'body_messages'=>$message
                );
                $reg= array('username' => $username, 'email'=> $email, 'cfmurl'=>$cfmurl, 'email_title' => $sender_name,'logo'=>$logo_mail );
                //print_r($this->data['logo']);
                $message = $this->load->view('newsletter/RegistrationAdminConfirmation'.$newsid.'.php',$reg,TRUE);
                //send mail
                $this->load->library('email');
                $this->email->from($email_values['from_mail_id'], $sender_name);
                $this->email->to($email_values['to_mail_id']);
                $this->email->subject($email_values['subject_message']);
                $this->email->set_mailtype("html");
                $this->email->message($message);
                try{
                    $this->email->send();
                    /*$returnStr ['msg'] = 'Successfully registered';
                    $returnStr ['success'] = '1';*/
                }catch(Exception $e){
                    echo $e->getMessage();
                }
                /* Admin Mail function End */
                $returnStr .= 'You are Registered successfully';
                $response[] = array('firstname'=>$firstname,'lastname'=>$lastname,'email'=>$email,'userimage'=>$img,'userid'=>intval($user_id),'key'=>$key);
                /*Firebase Notification*/
                if($firebase_token != ''){
                    error_reporting(-1);
                    ini_set('display_errors', 'On');
                    require_once __DIR__ . '/firebase.php';
                    require_once __DIR__ . '/push.php';
                    $firebase = new Firebase();
                    $push = new Push();
                    // optional payload
                    $payload = array();
                    // notification title
                    $title = 'Registered Successfully';
                    // notification message
                    $body = 'Your account created!';
                    // push type - single user / topic
                    $push_type = isset($_GET['push_type']) ? $_GET['push_type'] : '';
                    // whether to include to image or not
                    $include_image = isset($_GET['include_image']) ? TRUE : FALSE;
                    $push->setTitle($title);
                    $push->setMessage($message);
                    if ($include_image) {
                        $push->setImage('https://api.androidhive.info/images/minion.jpg');
                    } else {
                        $push->setImage('');
                    }
                    $push->setIsBackground(FALSE);
                    $push->setPayload($payload);
                    $json = '';
                    $firbase_response = '';
                    $regId = $firebase_token;
                    $json = $push->getPush($regId);
                    $firbase_response = $firebase->send($regId, $json, $title, $body);
                }
                /*End Firebase Notification*/
                $json_encode = json_encode(array('status'=>1,'message'=>$returnStr,'user_details'=>$response,'firebase'=>$firbase_response));
            }
        }
        else
        {
            if (valid_email ( $email )) {
                $condition = array (
                    'email' => $email
                );
                $duplicateMail = $this->mobile_model->get_all_details( USERS, $condition );
                if ($duplicateMail->num_rows () > 0) {
                    $returnStr = 'EmailId already exists';
                } else {
                    $expireddate = date ( 'Y-m-d', strtotime ( '+15 days' ) );
                    $this->mobile_model->insertUserQuick ( $firstname, $lastname, $email, $pwd, $expireddate,$key,$firebase_token);
                    $usrDetails = $this->mobile_model->get_all_details ( USERS, $condition );
                    //$this->send_confirm_mail ( $usrDetails );
                    $returnStr = 'Successfully registered';
                    $user_id = $usrDetails->row()->id;
                    if($usrDetails->row()->image != '') {
                        $img = base_url().'images/users/'.$usrDetails->row()->image;
                    }else{
                        $img = base_url().'images/users/profile.png';
                    }
                    /* Mail function */
                    $newsid='35';
                    $template_values=$this->mobile_model->get_newsletter_template_details($newsid);
                    if($template_values['sender_name']=='' && $template_values['sender_email']==''){
                        $sender_email=$this->data['siteContactMail'];
                        $sender_name=$this->data['siteTitle'];
                    }else{
                        $sender_name=$template_values['sender_name'];
                        $sender_email=$template_values['sender_email'];
                    }
                    $username = $firstname.$lastname;
                    $uid = $usrDetails->row ()->id;
                    $username = $usrDetails->row ()->user_name;
                    $email = $usrDetails->row ()->email;
                    $randStr = $this->get_rand_str ( '10' );
                    $cfmurl = base_url () . 'site/user/confirm_verify/' . $uid . "/" . $randStr . "/confirmation";
                    $logo_mail = $this->data['logo'];
                    $reg= array('username' => $username, 'cfmurl'=>$cfmurl, 'email_title' => $sender_name,'logo'=>$logo_mail );
                    //print_r($this->data['logo']);
                    $message = $this->load->view('newsletter/RegistrationConfirmation'.$newsid.'.php',$reg,TRUE);
                    $email_values = array(
                        'from_mail_id'=>$sender_email,
                        'to_mail_id'=> $_POST['u_email'],
                        'subject_message'=>$template_values ['news_subject'],
                        'body_messages'=>$message
                    );
                    //send mail
                    $this->load->library('email');
                    $this->email->from($email_values['from_mail_id'], $sender_name);
                    $this->email->to($email_values['to_mail_id']);
                    $this->email->subject($email_values['subject_message']);
                    $this->email->set_mailtype("html");
                    $this->email->message($message);
                    try{
                        $this->email->send();
                        //$returnStr ['msg'] = 'Successfully registered';
                        $returnStr = 'Successfully registered';
                        //$returnStr ['success'] = '1';
                    }catch(Exception $e){
                        echo $e->getMessage();
                    }
                    /* Mail function End */
                    /* Admin Mail function */
                    $newsid='42';
                    $template_values=$this->product_model->get_newsletter_template_details($newsid);
                    if($template_values['sender_name']=='' && $template_values['sender_email']==''){
                        $sender_email=$this->data['siteContactMail'];
                        $sender_name=$this->data['siteTitle'];
                    }else{
                        $sender_name=$template_values['sender_name'];
                        $sender_email=$template_values['sender_email'];
                    }
                    $username = $firstname.$lastname;
                    $uid = $usrDetails->row ()->id;
                    $username = $usrDetails->row ()->user_name;
                    $email = $usrDetails->row ()->email;
                    $randStr = $this->get_rand_str ( '10' );
                    $cfmurl = 'There is one new registration done on website. User details below.';
                    $logo_mail = $this->data['logo'];
                    $email_values = array(
                        'from_mail_id'=>$this->input->post('email'),
                        'to_mail_id'=> $sender_email,
                        'subject_message'=>$template_values ['news_subject'],
                        'body_messages'=>$message
                    );
                    $reg= array('username' => $username, 'email'=> $email, 'cfmurl'=>$cfmurl, 'email_title' => $sender_name,'logo'=>$logo_mail );
                    //print_r($this->data['logo']);
                    $message = $this->load->view('newsletter/RegistrationAdminConfirmation'.$newsid.'.php',$reg,TRUE);
                    //send mail
                    $this->load->library('email');
                    $this->email->from($email_values['from_mail_id'], $sender_name);
                    $this->email->to($email_values['to_mail_id']);
                    $this->email->subject($email_values['subject_message']);
                    $this->email->set_mailtype("html");
                    $this->email->message($message);
                    try{
                        $this->email->send();
                        $returnStr = 'Successfully registered';
                        /*$returnStr ['msg'] = 'Successfully registered';
            $returnStr ['success'] = '1';*/
                    }catch(Exception $e){
                        echo $e->getMessage();
                    }
                    /* Admin Mail function End */
                    /*Firebase Notification*/
                    if($firebase_token != ''){
                        error_reporting(-1);
                        ini_set('display_errors', 'On');
                        require_once __DIR__ . '/firebase.php';
                        require_once __DIR__ . '/push.php';
                        $firebase = new Firebase();
                        $push = new Push();
                        // optional payload
                        $payload = array();
                        // notification title
                        $title = 'Registered Successfully';
                        // notification message
                        $body = 'Your account created!';
                        // push type - single user / topic
                        $push_type = isset($_GET['push_type']) ? $_GET['push_type'] : '';
                        // whether to include to image or not
                        $include_image = isset($_GET['include_image']) ? TRUE : FALSE;
                        $push->setTitle($title);
                        $push->setMessage($message);
                        if ($include_image) {
                            $push->setImage('https://api.androidhive.info/images/minion.jpg');
                        } else {
                            $push->setImage('');
                        }
                        $push->setIsBackground(FALSE);
                        $push->setPayload($payload);
                        $json = '';
                        $firbase_response = '';
                        $regId = $firebase_token;
                        $json = $push->getPush($regId);
                        $firbase_response = $firebase->send($regId, $json, $title, $body);
                    }
                    /*End Firebase Notification*/
                }
            }
            if($returnStr == 'EmailId already exists'){
                $response = array();
                $json_encode = json_encode(array('status'=>0,'message'=>$returnStr,'user_details'=>$response));
            }else{
                $response[] = array('firstname'=>$firstname,'lastname'=>$lastname,'email'=>$email,'userimage'=>$img,'userid'=>intval($user_id),'key'=>$key);
                $json_encode = json_encode(array('status'=>1,'message'=>$returnStr,'user_details'=>$response,'firebase'=>$firbase_response));
            }
        }
        echo $json_encode;
    }
    public function mobile_forgotpsd(){
        $email=$_POST['u_email'];
        //$email='vinod4@gmail.com';
        if (valid_email ( $email )) {
            $condition = array (
                'email' => $email
            );
            $checkUser = $this->mobile_model->get_all_details ( USERS, $condition );
            if ($checkUser->num_rows () == '1') {
                $pwd = $this->get_rand_str ( '6' );
                $newdata = array (
                    'password' => md5 ( $pwd )
                );
                $condition = array (
                    'email' => $email
                );
                $this->mobile_model->update_details ( USERS, $newdata, $condition );
                $this->send_user_password ( $pwd, $checkUser );
                $returnStr .= 'New password sent to your email';
                $json_encode = json_encode(array('status'=>1,'message'=>$returnStr));
            } else {
                $returnStr .= 'EmailId not matched';
                $json_encode = json_encode(array('status'=>0,'message'=>$returnStr));
            }
        }
        echo $json_encode;
    }
    public function send_user_password($pwd = '', $query) {
        $newsid = '5';
        $template_values = $this->mobile_model->get_newsletter_template_details ( $newsid );
        $adminnewstemplateArr = array (
            'email_title' => $this->config->item ( 'email_title' ),
            'logo' => $this->data ['logo']
        );
        extract ( $adminnewstemplateArr );
        $subject = 'From: ' . $this->config->item ( 'email_title' ) . ' - ' . $template_values ['news_subject'];
        $newsid = '5';
        if ($template_values ['sender_name'] == '' && $template_values ['sender_email'] == '') {
            $sender_email = $this->config->item ( 'site_contact_mail' );
            $sender_name = $this->config->item ( 'email_title' );
        } else {
            $sender_name = $template_values ['sender_name'];
            $sender_email = $template_values ['sender_email'];
        }
        $email_values = array (
            'mail_type' => 'html',
            'from_mail_id' => $sender_email,
            'mail_name' => $sender_name,
            'to_mail_id' => $query->row ()->email,
            'subject_message' => 'Password Reset',
            'body_messages' => $message
        );
        $reg = array (
            'email_title' => $this->config->item ( 'email_title' ),
            'pwd' => $pwd,
            'logo' => $this->data ['logo']
        );
        $message = $this->load->view('newsletter/Forgot Password'.$newsid.'.php',$reg,TRUE);
        //send mail
        $this->load->library('email');
        $this->email->from($email_values['from_mail_id'], $sender_name);
        $this->email->to($email_values['to_mail_id']);
        $this->email->subject($email_values['subject_message']);
        $this->email->set_mailtype("html");
        $this->email->message($message);
        try{
            $this->email->send();
            $returnStr ['msg'] = 'Successfully registered';
            $returnStr ['success'] = '1';
        }catch(Exception $e){
            echo $e->getMessage();
        }
    }
    public function send_confirm_mail($userDetails = '')
    {
        $uid = $userDetails->row ()->id;
        $email = $userDetails->row ()->email;
        $name = $userDetails->row ()->firstname.$userDetails->row ()->lastname;
        $randStr = $this->get_rand_str ( '10' );
        $condition = array (
            'id' => $uid
        );
        $dataArr = array (
            'verify_code' => $randStr
        );
        $this->mobile_model->update_details ( USERS, $dataArr, $condition );
        $newsid = '3';
        $template_values = $this->mobile_model->get_newsletter_template_details( $newsid );
        $user=$userDetails->row ()->firstname.' '.$userDetails->row ()->lastname;
        $cfmurl = base_url () . 'site/user/confirm_register/' . $uid . "/" . $randStr . "/confirmation";
        $subject = 'From: ' . $this->config->item ( 'email_title' ) . ' - ' . $template_values ['news_subject'];
        $adminnewstemplateArr = array (
            'email_title' => $this->config->item ( 'email_title' ),
            'logo' => $this->data ['logo'],
            'username'=>$name
        );
        extract ( $adminnewstemplateArr );
        $header .= "Content-Type: text/plain; charset=ISO-8859-1\r\n";
        $message .= '<body>';
        include ('./newsletter/registeration' . $newsid . '.php');
        $message .= '</body>
      ';
        if ($template_values ['sender_name'] == '' && $template_values ['sender_email'] == '') {
            $sender_email = $this->data ['siteContactMail'];
            $sender_name = $this->data ['siteTitle'];
        } else {
            $sender_name = $template_values ['sender_name'];
            $sender_email = $template_values ['sender_email'];
        }
        $email_values = array (
            'mail_type' => 'html',
            'from_mail_id' => $sender_email,
            'mail_name' => $sender_name,
            'to_mail_id' => $email,
            'subject_message' => $template_values ['news_subject'],
            'body_messages' => trim($message)
        );
        $email_send_to_common = $this->mobile_model->common_email_send ( $email_values );
    }
    /* Amenties list */
    public function list_values() {
        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        /***********Yamuna 09-1-2018 Parent Name*********/
        //listing values
        $roombedVal=array();
        $roombedVal1=array();
        $select_qrys = "select * from fc_listing_types WHERE status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                //$listing_useproperty_attribute = (($listing_parent->delete_list_status==1 && $listing_parent->name=='accommodates')?true:false);
                //$listing_useproperty_attribute = ((strtolower($listing_parent->name)=='accommodates')?true:false);

                if($listing_id == 31){
                    $listing_useproperty_attribute = true;
                } else {
                    $listing_useproperty_attribute = ((strtolower($listing_parent->name)=='accommodates')?true:false);
                }
                /***********Yamuna 09-1-2018 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $roombedVal[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_useproperty_attribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 09-1-2018 Parent Name*********/
        /* $roombedVal=array();
    $roombedVal1=array();
    $select_qry = "select * from fc_listings where id=1";
    $list_values = $this->mobile_model->ExecuteQuery($select_qry);
    if($list_values->num_rows()>0){
      foreach($list_values->result() as   $list){
        $roombedVal[] =json_decode($list->listing_values);
        $roombedVal1[] =json_decode($list->rooms_bed);
      }
    } */
        $json_encode = json_encode(array("status"=>1,"message"=>"property available","property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"other_attributes" => $roombedVal));
        echo $json_encode;
    }
    /* List all currency values */
    public function currency_values() {
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $listvalueArr = array();
        if($currency_values->num_rows() >0) {
            foreach($currency_values->result() as $list_value) {
                $listvalueArr[] = array("id" =>$list_value->id,"country_symbols"=>$list_value->currency_symbols,"currency_type"=>$list_value->currency_type,"currency_rate"=>$list_value->currency_rate);
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Currency list available","list_values"=>$listvalueArr));
        } else {
            $json_encode = json_encode(array("status"=>0,"message"=>"No currency list available","list_values"=>$listvalueArr));
        }
        echo $json_encode;
    }
    public function mobile_edit_list_value() {
    }
    public function mobile_delete_image() {
        if($_POST['imageIds'] != ''){
            $imgIds = explode(',', $_POST['imageIds']);
            foreach($imgIds as $imgId)
            {
                $this->db->where('id', $imgId);
                $this->db->delete(PRODUCT_PHOTOS);
            }
            $res = 'Success';
            $json_encode = json_encode(array("status"=>$res));
            echo $json_encode;
        }
        else{
            $res = 'Failed';
            $json_encode = json_encode(array("status"=>$res));
            echo $json_encode;
        }
    }
    /* ADD PROPERTY LIST */
    public function mobile_list_value() {
        $email = $_POST['Email'];
        $p_address = $_POST['p_location'];
        $property_type = $_POST['property_type'];
        $t_guest= $_POST['t_guest'];
        $t_bed= $_POST['t_bed'];
        $t_bedroom= $_POST['t_bedroom'];
        $bathrooms = $_POST['t_bathroom'];
        if($_POST['list_space'] == 1){
            $list_space = 'Entire home/apt';
        }elseif($_POST['list_space'] == 2){
            $list_space = 'Private room';
        }else{
            $list_space = 'Shared room';
        }
        $currency = $_POST['P_Currency'];
        if($currency == '')$currency = 'USD';
        $condition = array('email'=>$email,'status'=>'Active');
        $this->data['checkUser'] = $this->mobile_model->get_all_details(USERS,$condition);
        $id = $this->data['checkUser']->row()->id;
        $data = array('room_type'=>$this->input->post('room_type1'),
            'room_type'=>$list_space,
            'home_type'=>$property_type,
            'accommodates'=>$t_guest,
            'bedrooms'=>$t_bedroom,
            'beds'=>$t_bed,
            'noofbathrooms'=>$bathrooms,
            'user_id'=>$id,
            'currency'=>$currency,
            'status'=>'UnPublish',
            'through'=>'mobile'
        );
        $this->mobile_model->simple_insert(PRODUCT,$data);
        //echo $this->db->last_query();die;
        $getInsertId=$this->mobile_model->get_last_insert_id();
        $street = '';
        $street1 = '';
        $area = '';
        $location = '';
        $city = '';
        $state = '';
        $country = '';
        $lat = '';
        $long = '';
        $zip = '';
        $address = str_replace(" ", "+", $p_address);
        $json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$address&sensor=false&key=$this->google_map_api");
        $json = json_decode($json);
        $newAddress = $json->{'results'}[0]->{'address_components'};
        foreach($newAddress as $nA)
        {
            if($nA->{'types'}[0] == 'route')$street = $nA->{'long_name'};
            if($nA->{'types'}[0] == 'sublocality_level_2')$street1 = $nA->{'long_name'};
            if($nA->{'types'}[0] == 'sublocality_level_1')$area = $nA->{'long_name'};
            if($nA->{'types'}[0] == 'locality')$location = $nA->{'long_name'};
            if($nA->{'types'}[0] == 'administrative_area_level_2')$city = $nA->{'long_name'};
            if($nA->{'types'}[0] == 'administrative_area_level_1')$state = $nA->{'long_name'};
            if($nA->{'types'}[0] == 'country')$country = $nA->{'long_name'};
            if($nA->{'types'}[0] == 'postal_code')$zip = $nA->{'long_name'};
        }
        if($city == '')
            $city = $location;
        $lat = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
        $lang = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};
        $data = array('address' => $p_address,'productId' => $getInsertId,'street' => $street,'area' => $area,'location' => $location,'city' => $city,'state' => $state,'country' => $country,'lang' => $lang,'lat' => $lat,'zip' => $zip);
        $this->mobile_model->simple_insert(PRODUCT_ADDRESS_NEW,$data);
        $inputArr = array('product_id' =>$getInsertId);
        $this->mobile_model->simple_insert(PRODUCT_BOOKING,$inputArr);
        $inputArr = array('id' =>$getInsertId);
        $this->mobile_model->simple_insert(SCHEDULE,$inputArr);
        $this->mobile_model->update_details(USERS,array('group'=>'Seller'),array('id'=>$id));
        $res = 'successfully added';
        $condition1 = array('id'=>$getInsertId);
        $pDetails = $this->mobile_model->get_all_details(PRODUCT,$condition1);
        $currency = $pDetails->row()->currency;
        if($currency == '')$currency = 'USD';
        $json_encode = json_encode(array("status"=>$res,'p_id'=>$getInsertId,'currency'=>$currency,'location'=>$p_address, "lat"=>$lat,"long"=>$lang));
        echo $json_encode;
    }
    /* UPDATE PROPERTY LIST */
    public function mobile_update_list() {
        if($_POST['P_Title'] !='' && $_POST['P_Id'] != '') {
            $data = array(
                'product_title'=>$_POST['P_Title']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Price'] !='' && $_POST['P_Id'] != '') {
            $data = array(
                'price'=>$_POST['P_Price']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Summary'] !='' && $_POST['P_Id'] != '') {
            $data = array(
                'description'=>$_POST['P_Summary']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Currency'] != '' && $_POST['P_Id'] != '' )
        {
            if($_POST['P_Currency'] == '')$c_value = 'USD';
            else $c_value = $_POST['P_Currency'];
            $data = array(
                'currency'=>$c_value
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['p_address'] != '' && $_POST['P_Id'] != '' )
        {
            $p_address = $_POST['p_address'];
            $street = '';
            $street1 = '';
            $area = '';
            $location = '';
            $city = '';
            $state = '';
            $country = '';
            $lat = '';
            $long = '';
            $zip = '';
            $address = str_replace(" ", "+", $p_address);
            $json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$address&sensor=false&key=$this->google_map_api");
            $json = json_decode($json);
            $newAddress = $json->{'results'}[0]->{'address_components'};
            foreach($newAddress as $nA)
            {
                if($nA->{'types'}[0] == 'route')$street = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'sublocality_level_2')$street1 = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'sublocality_level_1')$area = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'locality')$location = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'administrative_area_level_2')$city = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'administrative_area_level_1')$state = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'country')$country = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'postal_code')$zip = $nA->{'long_name'};
            }
            if($city == '')
                $city = $location;
            $lat = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
            $lang = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};
            $data = array('address' => $p_address,'street' => $street,'area' => $area,'location' => $location,'city' => $city,'state' => $state,'country' => $country,'lang' => $lang,'lat' => $lat,'zip' => $zip);
            $condition = array(
                'productId'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT_ADDRESS_NEW ,$data ,$condition);
        }
        if($_FILES['photo'] != '' && $_POST['P_Id'] != '') {
            $uploaddir = "images/rental/";
            //$data = file_get_contents($_FILES['photo']['tmp_name']);
            //$image = imagecreatefromstring( $data );
            //echo 'Hi';die;
            $imgname=time().".jpg";
            //imagejpeg($image,$uploaddir.$imgname, 99);
            //echo 'Hi';die;
            move_uploaded_file($_FILES['photo']['tmp_name'], $uploaddir.$imgname);
            @copy($uploaddir.$imgname, './images/rental/mobile/'.$imgname);
            $imageName=$imgname;
            /* $image_name=$imgname;
      $newname=$uploaddir.$image_name;
      $timeImg=time();
      @copy($imgname, './server/php/rental/mobile/'.$imgname);
      $target_file=$uploaddir.$image_name;
      $imageName=$imgname;
      $option=$this->getImageShape(800,750,$target_file);
      $resizeObj = new Resizeimage($target_file);
      $resizeObj -> resizeImage(800, 750, $option);
      $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
      $this->ImageCompress($uploaddir.'mobile/'.$imageName);
      @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName); */
            $inputArr3 = array(
                'product_id' =>$_POST['P_Id'],
                'product_image'=>$imgname,
                'mproduct_image'=>$imageName
            );
            $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
            $getPhotoInsertId=$this->mobile_model->get_last_insert_id();
            $latLong = $this->mobile_model->get_all_details(PRODUCT_ADDRESS_NEW, array('productId'=>$_POST['P_Id']));
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res, "image"=>$imgname,"imgId"=>$getPhotoInsertId, "lat"=>$latLong->row()->lat,"long"=>$latLong->row()->lang));
            echo $json_encode;die;
        }
        if($_FILES['photo1'] != '' && $_POST['P_Id'] != '') {
            $uploaddir = "images/rental/";
            $data = file_get_contents($_FILES['photo1']['tmp_name']);
            $image = imagecreatefromstring( $data );
            $imgname=time().".jpg";
            imagejpeg($image,$uploaddir.$imgname, 99);
            $image_name=$imgname;
            $newname=$uploaddir.$image_name;
            $timeImg=time();
            @copy($imgname, './images/rental/mobile/'.$imgname);
            $target_file=$uploaddir.$image_name;
            $imageName=$imgname;
            $option=$this->getImageShape(800,750,$target_file);
            $resizeObj = new Resizeimage($target_file);
            $resizeObj -> resizeImage(800, 750, $option);
            $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
            $this->ImageCompress($uploaddir.'mobile/'.$imageName);
            @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
            $inputArr3 = array(
                'product_id' =>$_POST['P_Id'],
                'product_image'=>$imgname,
                'mproduct_image'=>$imageName
            );
            $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
        }
        if($_FILES['photo2'] != '' && $_POST['P_Id'] != '') {
            $uploaddir = "images/rental/";
            $data = file_get_contents($_FILES['photo2']['tmp_name']);
            $image = imagecreatefromstring( $data );
            $imgname=time().".jpg";
            imagejpeg($image,$uploaddir.$imgname, 99);
            $image_name=$imgname;
            $newname=$uploaddir.$image_name;
            $timeImg=time();
            @copy($imgname, './images/rental/mobile/'.$imgname);
            $target_file=$uploaddir.$image_name;
            $imageName=$imgname;
            $option=$this->getImageShape(500,350,$target_file);
            $resizeObj = new Resizeimage($target_file);
            $resizeObj -> resizeImage(500, 350, $option);
            $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
            $this->ImageCompress($uploaddir.'mobile/'.$imageName);
            @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
            $inputArr3 = array(
                'product_id' =>$_POST['P_Id'],
                'product_image'=>$imgname,
                'mproduct_image'=>$imageName
            );
            $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
        }
        if($_FILES['photo3'] != '' && $_POST['P_Id'] != '') {
            $uploaddir = "images/rental/";
            $data = file_get_contents($_FILES['photo3']['tmp_name']);
            $image = imagecreatefromstring( $data );
            $imgname=time().".jpg";
            imagejpeg($image,$uploaddir.$imgname, 99);
            $image_name=$imgname;
            $newname=$uploaddir.$image_name;
            $timeImg=time();
            @copy($imgname, './images/rental/mobile/'.$imgname);
            $target_file=$uploaddir.$image_name;
            $imageName=$imgname;
            $option=$this->getImageShape(500,350,$target_file);
            $resizeObj = new Resizeimage($target_file);
            $resizeObj -> resizeImage(500, 350, $option);
            $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
            $this->ImageCompress($uploaddir.'mobile/'.$imageName);
            @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
            $inputArr3 = array(
                'product_id' =>$_POST['P_Id'],
                'product_image'=>$imgname,
                'mproduct_image'=>$imageName
            );
            $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
        }
        if($_FILES['photo4'] != '' && $_POST['P_Id'] != '') {
            $uploaddir = "images/rental/";
            $data = file_get_contents($_FILES['photo4']['tmp_name']);
            $image = imagecreatefromstring( $data );
            $imgname=time().".jpg";
            imagejpeg($image,$uploaddir.$imgname, 99);
            $image_name=$imgname;
            $newname=$uploaddir.$image_name;
            $timeImg=time();
            @copy($imgname, './images/rental/mobile/'.$imgname);
            $target_file=$uploaddir.$image_name;
            $imageName=$imgname;
            $option=$this->getImageShape(500,350,$target_file);
            $resizeObj = new Resizeimage($target_file);
            $resizeObj -> resizeImage(500, 350, $option);
            $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
            $this->ImageCompress($uploaddir.'mobile/'.$imageName);
            @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
            $inputArr3 = array(
                'product_id' =>$_POST['P_Id'],
                'product_image'=>$imgname,
                'mproduct_image'=>$imageName
            );
            $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
        }
        if($_FILES['photo5'] != '' && $_POST['P_Id'] != '') {
            $uploaddir = "images/rental/";
            $data = file_get_contents($_FILES['photo5']['tmp_name']);
            $image = imagecreatefromstring( $data );
            $imgname=time().".jpg";
            imagejpeg($image,$uploaddir.$imgname, 99);
            $image_name=$imgname;
            $newname=$uploaddir.$image_name;
            $timeImg=time();
            @copy($imgname, './images/rental/mobile/'.$imgname);
            $target_file=$uploaddir.$image_name;
            $imageName=$imgname;
            $option=$this->getImageShape(500,350,$target_file);
            $resizeObj = new Resizeimage($target_file);
            $resizeObj -> resizeImage(500, 350, $option);
            $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
            $this->ImageCompress($uploaddir.'mobile/'.$imageName);
            @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
            $inputArr3 = array(
                'product_id' =>$_POST['P_Id'],
                'product_image'=>$imgname,
                'mproduct_image'=>$imageName
            );
            $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
        }
        if($_POST['P_Id'] != '' && $_POST['list_space'] !='')
        {
            $t_guest= $_POST['t_guest'];
            $t_bed= $_POST['t_bed'];
            $t_bedroom= $_POST['t_bedroom'];
            $property_type= $_POST['property_type'];
            if($_POST['t_bathroom'] == 1){
                $bathrooms = 'Private';
            }elseif($_POST['t_bathroom'] == 2){
                $bathrooms = 'Both';
            }else{
                $bathrooms = 'Shared';
            }
            if($_POST['P_Id'] != '' && $_POST['list_space'] == 1){
                $list_space = 'entire home/apt';
            }elseif($_POST['list_space'] == 2){
                $list_space = 'private room';
            }else{
                $list_space = 'Shared room';
            }
            $data = array(
                'room_type'=>$list_space,
                'home_type'=>$property_type,
                'accommodates'=>$t_guest,
                'bedrooms'=>$t_bedroom,
                'beds'=>$t_bed,
                'bathrooms'=>$bathrooms
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Id'] != '' && $_POST['d_space'] !='')
        {
            $data = array(
                'space'=>$_POST['d_space']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Id'] != '' && $_POST['P_Title'] !='')
        {
            $data = array(
                'product_title'=>$_POST['P_Title']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Id'] != '' && $_POST['P_Summary'] !='')
        {
            $data = array(
                'description'=>$_POST['P_Summary']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Id'] != '' && $_POST['d_other'] !='')
        {
            $condition = array('email'=>$_POST['Email'],'status'=>'Active');
            $data = array(
                'other_thingnote'=>$_POST['d_other']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Id'] != '' && $_POST['d_house_rules'] !='')
        {
            $data = array(
                'house_rules'=>$_POST['d_house_rules']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Id'] != '' && $_POST['d_listvalue'] !='')
        {
            $data = array(
                'list_name'=>$_POST['d_listvalue']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Id'] != '' && $_POST['l_week'] !='')
        {
            $data = array(
                'price_perweek'=>$_POST['l_week'],
                'price_permonth'=>$_POST['l_month']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        if($_POST['P_Id'] != '' && $_POST['P_Currency'] !='')
        {
            if($_POST['P_Currency'] == '')$c_value = 'USD';
            else $c_value = $_POST['P_Currency'];
            $data = array(
                'currency'=>$c_value
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        }
        $res = 'successfully added';
        $latLong = $this->mobile_model->get_all_details(PRODUCT_ADDRESS_NEW, array('productId'=>$_POST['P_Id']));
        $json_encode = json_encode(array("status"=>$res, "lat"=>$latLong->row()->lat,"long"=>$latLong->row()->lang));
        echo $json_encode;
    }
    public function mobile_listvalue() {
        $email = $_POST['Email'];
        $p_address = $_POST['p_address'];
        $p_location = $_POST['p_location'];
        $fulladdress = explode(',',$p_address);
        $lat = $_POST['P_Address_LatLon'];
        $log = explode(',',$lat);
        $property_type = $_POST['property_type'];
        $t_guest= $_POST['t_guest'];
        $t_bed= $_POST['t_bed'];
        $t_bedroom= $_POST['t_bedroom'];
        if($_POST['t_bathroom'] == 1){
            $bathrooms = 'Private';
        }elseif($_POST['t_bathroom'] == 2){
            $bathrooms = 'Both';
        }else{
            $bathrooms = 'Shared';
        }
        if($_POST['list_space'] == 1){
            $list_space = 'entire home/apt';
        }elseif($_POST['list_space'] == 2){
            $list_space = 'private room';
        }else{
            $list_space = 'Shared room';
        }
        $condition = array('email'=>$email,'status'=>'Active');
        $this->data['checkUser'] = $this->mobile_model->get_all_details(USERS,$condition);
        $id = $this->data['checkUser']->row()->id;
        //echo $this->data['checkUser']->num_rows();die;
        if($_POST['Email'] != '' && $_POST['P_Id'] != ''){
            //post value start
            if($_FILES['photo1'] != '') {
                $uploaddir = "images/rental/";
                $data = file_get_contents($_FILES['photo1']['tmp_name']);
                $image = imagecreatefromstring( $data );
                $imgname=time().".jpg";
                imagejpeg($image,$uploaddir.$imgname, 99);
                $image_name=$imgname;
                $newname=$uploaddir.$image_name;
                $timeImg=time();
                @copy($imgname, './images/rental/mobile/'.$imgname);
                $target_file=$uploaddir.$image_name;
                $imageName=$imgname;
                $option=$this->getImageShape(800,750,$target_file);
                $resizeObj = new Resizeimage($target_file);
                $resizeObj -> resizeImage(800, 750, $option);
                $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
                $this->ImageCompress($uploaddir.'mobile/'.$imageName);
                @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
                $inputArr3 = array(
                    'product_id' =>$_POST['P_Id'],
                    'product_image'=>$imgname,
                    'mproduct_image'=>$imageName
                );
                $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
            }
            if($_FILES['photo2'] != '') {
                $uploaddir = "images/rental/";
                $data = file_get_contents($_FILES['photo2']['tmp_name']);
                $image = imagecreatefromstring( $data );
                $imgname=time().".jpg";
                imagejpeg($image,$uploaddir.$imgname, 99);
                $image_name=$imgname;
                $newname=$uploaddir.$image_name;
                $timeImg=time();
                @copy($imgname, './images/rental/mobile/'.$imgname);
                $target_file=$uploaddir.$image_name;
                $imageName=$imgname;
                $option=$this->getImageShape(500,350,$target_file);
                $resizeObj = new Resizeimage($target_file);
                $resizeObj -> resizeImage(500, 350, $option);
                $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
                $this->ImageCompress($uploaddir.'mobile/'.$imageName);
                @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
                $inputArr3 = array(
                    'product_id' =>$_POST['P_Id'],
                    'product_image'=>$imgname,
                    'mproduct_image'=>$imageName
                );
                $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
            }
            if($_FILES['photo3'] != '') {
                $uploaddir = "images/rental/";
                $data = file_get_contents($_FILES['photo3']['tmp_name']);
                $image = imagecreatefromstring( $data );
                $imgname=time().".jpg";
                imagejpeg($image,$uploaddir.$imgname, 99);
                $image_name=$imgname;
                $newname=$uploaddir.$image_name;
                $timeImg=time();
                @copy($imgname, './images/rental/mobile/'.$imgname);
                $target_file=$uploaddir.$image_name;
                $imageName=$imgname;
                $option=$this->getImageShape(500,350,$target_file);
                $resizeObj = new Resizeimage($target_file);
                $resizeObj -> resizeImage(500, 350, $option);
                $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
                $this->ImageCompress($uploaddir.'mobile/'.$imageName);
                @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
                $inputArr3 = array(
                    'product_id' =>$_POST['P_Id'],
                    'product_image'=>$imgname,
                    'mproduct_image'=>$imageName
                );
                $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
            }
            if($_FILES['photo4'] != '') {
                $uploaddir = "images/rental/";
                $data = file_get_contents($_FILES['photo4']['tmp_name']);
                $image = imagecreatefromstring( $data );
                $imgname=time().".jpg";
                imagejpeg($image,$uploaddir.$imgname, 99);
                $image_name=$imgname;
                $newname=$uploaddir.$image_name;
                $timeImg=time();
                @copy($imgname, './images/rental/mobile/'.$imgname);
                $target_file=$uploaddir.$image_name;
                $imageName=$imgname;
                $option=$this->getImageShape(500,350,$target_file);
                $resizeObj = new Resizeimage($target_file);
                $resizeObj -> resizeImage(500, 350, $option);
                $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
                $this->ImageCompress($uploaddir.'mobile/'.$imageName);
                @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
                $inputArr3 = array(
                    'product_id' =>$_POST['P_Id'],
                    'product_image'=>$imgname,
                    'mproduct_image'=>$imageName
                );
                $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
            }
            if($_FILES['photo5'] != '') {
                $uploaddir = "images/rental/";
                $data = file_get_contents($_FILES['photo5']['tmp_name']);
                $image = imagecreatefromstring( $data );
                $imgname=time().".jpg";
                imagejpeg($image,$uploaddir.$imgname, 99);
                $image_name=$imgname;
                $newname=$uploaddir.$image_name;
                $timeImg=time();
                @copy($imgname, './images/rental/mobile/'.$imgname);
                $target_file=$uploaddir.$image_name;
                $imageName=$imgname;
                $option=$this->getImageShape(500,350,$target_file);
                $resizeObj = new Resizeimage($target_file);
                $resizeObj -> resizeImage(500, 350, $option);
                $resizeObj -> saveImage($uploaddir.'mobile/'.$imageName, 100);
                $this->ImageCompress($uploaddir.'mobile/'.$imageName);
                @copy($uploaddir.'mobile/'.$imageName, $uploaddir.'mobile/'.$imageName);
                $inputArr3 = array(
                    'product_id' =>$_POST['P_Id'],
                    'product_image'=>$imgname,
                    'mproduct_image'=>$imageName
                );
                $this->mobile_model->simple_insert(PRODUCT_PHOTOS,$inputArr3);
            }
            if($_POST['P_Id'] != '') {
                if($_POST['P_Title'] !='') {
                    $data = array(
                        'product_title'=>$_POST['P_Title']
                    );
                    $condition = array(
                        'id'=>$_POST['P_Id']
                    );
                    $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
                }
                if($_POST['P_Price'] !='') {
                    $data = array(
                        'price'=>$_POST['P_Price']
                    );
                    $condition = array(
                        'id'=>$_POST['P_Id']
                    );
                    $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
                }
                if($_POST['P_Summary'] !='') {
                    $data = array(
                        'description'=>$_POST['P_Summary']
                    );
                    $condition = array(
                        'id'=>$_POST['P_Id']
                    );
                    $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
                }
                if(count($fulladdress) > 3 && $_POST['P_Id'] != '') {
                    $data = array(
                        'address'=>$fulladdress[4].$fulladdress[3],
                        'latitude'=>$log[0],
                        'longitude'=>$log[1]
                    );
                    $condition = array(
                        'product_id'=>$_POST['P_Id']
                    );
                    $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                    $condition = array('name'=>$fulladdress[0]);
                    $this->data['city'] = $this->mobile_model->get_all_details(CITY,$condition);
                    $city_id = $this->data['city']->row()->id;
                    if($this->data['city']->num_rows() !=0 ) {
                        $data = array(
                            'city'=>$city_id
                        );
                        $condition = array(
                            'product_id'=>$_POST['P_Id']
                        );
                        $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                        //echo $this->db->last_query();
                    }
                    $condition1 = array('name'=>$fulladdress[1]);
                    $this->data['state'] = $this->mobile_model->get_all_details(STATE_TAX,$condition1);
                    $state = $city_id = $this->data['state']->row()->id;
                    if($this->data['state']->num_rows() !=0 ) {
                        $data = array(
                            'state'=>$state
                        );
                        $condition = array(
                            'product_id'=>$_POST['P_Id']
                        );
                        $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                        //echo $this->db->last_query();
                    }
                    //echo "country".$fulladdress[2];
                    $condition2 = array('name'=>$fulladdress[2]);
                    $this->data['LOCATIONS'] = $this->mobile_model->get_all_details(COUNTRY_LIST,$condition2);
                    $loc = $city_id = $this->data['LOCATIONS']->row()->id;
                    if($this->data['LOCATIONS']->num_rows() !=0 ) {
                        $data = array(
                            'country'=>$loc
                        );
                        $condition = array(
                            'product_id'=>$_POST['P_Id']
                        );
                        $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                        //echo $this->db->last_query();
                    }
                }
                if(count($fulladdress) == 3 && $_POST['P_Id'] != '') {
                    $condition = array('name'=>$fulladdress[0]);
                    $this->data['city'] = $this->mobile_model->get_all_details(CITY,$condition);
                    $city_id = $this->data['city']->row()->id;
                    if($this->data['city']->num_rows() !=0 ) {
                        $data = array(
                            'city'=>$city_id,
                            'latitude'=>$log[0],
                            'longitude'=>$log[1]
                        );
                        $condition = array(
                            'product_id'=>$_POST['P_Id']
                        );
                        $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                        //echo $this->db->last_query();
                    }
                    $condition1 = array('name'=>$fulladdress[1]);
                    $this->data['state'] = $this->mobile_model->get_all_details(STATE_TAX,$condition1);
                    $state = $city_id = $this->data['state']->row()->id;
                    if($this->data['state']->num_rows() !=0 ) {
                        $data = array(
                            'state'=>$state
                        );
                        $condition = array(
                            'product_id'=>$_POST['P_Id']
                        );
                        $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                        //echo $this->db->last_query();
                    }
                    //echo "country".$fulladdress[2];
                    $condition2 = array('name'=>$fulladdress[2]);
                    $this->data['LOCATIONS'] = $this->mobile_model->get_all_details(COUNTRY_LIST,$condition2);
                    $loc = $city_id = $this->data['LOCATIONS']->row()->id;
                    if($this->data['LOCATIONS']->num_rows() !=0 ) {
                        $data = array(
                            'country'=>$loc
                        );
                        $condition = array(
                            'product_id'=>$_POST['P_Id']
                        );
                        $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                        //echo $this->db->last_query();
                    }
                }
                if(count($fulladdress) == 2 && $_POST['P_Id'] != '') {
                    $condition1 = array('name'=>$fulladdress[0]);
                    $this->data['state'] = $this->mobile_model->get_all_details(STATE_TAX,$condition1);
                    $state = $city_id = $this->data['state']->row()->id;
                    if($this->data['state']->num_rows() !=0 ) {
                        $data = array(
                            'state'=>$state,
                            'latitude'=>$log[0],
                            'longitude'=>$log[1]
                        );
                        $condition = array(
                            'product_id'=>$_POST['P_Id']
                        );
                        $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                        //echo $this->db->last_query();
                    }
                    //echo "country".$fulladdress[2];
                    $condition2 = array('name'=>$fulladdress[1]);
                    $this->data['LOCATIONS'] = $this->mobile_model->get_all_details(COUNTRY_LIST,$condition2);
                    $loc = $city_id = $this->data['LOCATIONS']->row()->id;
                    if($this->data['LOCATIONS']->num_rows() !=0 ) {
                        $data = array(
                            'country'=>$loc
                        );
                        $condition = array(
                            'product_id'=>$_POST['P_Id']
                        );
                        $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                        //echo $this->db->last_query();
                    }
                }
                if(count($fulladdress) == 1 && $_POST['P_Id'] != '') {
                    $condition2 = array('name'=>$fulladdress[0]);
                    $this->data['LOCATIONS'] = $this->mobile_model->get_all_details(COUNTRY_LIST,$condition2);
                    $loc = $city_id = $this->data['LOCATIONS']->row()->id;
                    if($this->data['LOCATIONS']->num_rows() !=0 ) {
                        $data = array(
                            'country'=>$loc
                        );
                        $condition = array(
                            'product_id'=>$_POST['P_Id']
                        );
                        $this->mobile_model->update_details(PRODUCT_ADDRESS ,$data ,$condition);
                        //echo $this->db->last_query();
                    }
                }
                //post value end
            }
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($this->data['checkUser']->num_rows() == 1){
            $data = array('room_type'=>$this->input->post('room_type1'),
                'room_type'=>$list_space,
                'home_type'=>$property_type,
                'accommodates'=>$t_guest,
                'bedrooms'=>$t_bedroom,
                'beds'=>$t_bed,
                'bathrooms'=>$bathrooms,
                'user_id'=>$id,
                'status'=>'UnPublish',
                'through'=>'mobile'
            );
            $this->mobile_model->simple_insert(PRODUCT,$data);
            //echo $this->db->last_query();die;
            $getInsertId=$this->mobile_model->get_last_insert_id();
            $inputArr3 = array(
                'product_id' =>$getInsertId,
                'address'=>$_POST['p_location']
            );
            $this->mobile_model->simple_insert(PRODUCT_ADDRESS,$inputArr3);
            $addr_id=$this->mobile_model->get_last_insert_id();
            $location = $_POST['p_location'];
            $this->mobile_model->update_details(USERS,array('group'=>'Seller'),array('id'=>$id));
            $res = 'successfully added';
            $condition1 = array('id'=>$getInsertId);
            $pDetails = $this->mobile_model->get_all_details(PRODUCT,$condition1);
            $currency = $pDetails->row()->currency;
            if($currency = '')$currency = 'USD';
            $json_encode = json_encode(array("status"=>$res,'p_id'=>$getInsertId,'currency'=>$currency,'location'=>$location));
        }elseif($_POST['P_Id'] != '' && $_POST['list_space'] !=''){
            $t_guest= $_POST['t_guest'];
            $t_bed= $_POST['t_bed'];
            $t_bedroom= $_POST['t_bedroom'];
            $property_type= $_POST['property_type'];
            if($_POST['t_bathroom'] == 1){
                $bathrooms = 'Private';
            }elseif($_POST['t_bathroom'] == 2){
                $bathrooms = 'Both';
            }else{
                $bathrooms = 'Shared';
            }
            if($_POST['list_space'] == 1){
                $list_space = 'entire home/apt';
            }elseif($_POST['list_space'] == 2){
                $list_space = 'private room';
            }else{
                $list_space = 'Shared room';
            }
            $data = array(
                'room_type'=>$list_space,
                'home_type'=>$property_type,
                'accommodates'=>$t_guest,
                'bedrooms'=>$t_bedroom,
                'beds'=>$t_bed,
                'bathrooms'=>$bathrooms
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($_POST['P_Id'] != '' && $_POST['d_space'] !=''){
            //echo  $_GET['P_Id'];die;
            $data = array(
                'space'=>$_POST['d_space']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($_POST['P_Id'] != '' && $_POST['P_Title'] !=''){
            $data = array(
                'product_title'=>$_POST['P_Title']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($_POST['P_Id'] != '' && $_POST['P_Summary'] !=''){
            $data = array(
                'description'=>$_POST['P_Summary']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($_POST['P_Id'] != '' && $_POST['d_other'] !=''){
            $condition = array('email'=>$_POST['Email'],'status'=>'Active');
            $data = array(
                'other_thingnote'=>$_POST['d_other']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($_POST['P_Id'] != '' && $_POST['d_house_rules'] !=''){
            $data = array(
                'house_rules'=>$_POST['d_house_rules']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($_POST['P_Id'] != '' && $_POST['d_listvalue'] !=''){
            $data = array(
                'list_name'=>$_POST['d_listvalue']
            );
            $condition = array(
                '   id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($_POST['P_Id'] != '' && $_POST['l_week'] !=''){
            $data = array(
                'price_perweek'=>$_POST['l_week'],
                'price_permonth'=>$_POST['l_month']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($_POST['P_Id'] != '' && $_POST['P_Price'] !=''){
            $data = array(
                'price'=>$_POST['P_Price']
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }elseif($_POST['P_Id'] != '' && $_POST['P_Currency'] !=''){
            if($_POST['P_Currency'] == '')$c_value = 'USD';
            else $c_value = $_POST['P_Currency'];
            $data = array(
                'currency'=>$c_value
            );
            $condition = array(
                'id'=>$_POST['P_Id']
            );
            $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
            $res = 'successfully added';
            $json_encode = json_encode(array("status"=>$res));
        }else{
            $res = 'failed';
            $json_encode = json_encode(array("status"=>$res));
        }
        echo $json_encode;
    }
    /* Property listing in user your listing */
    public function mobile_listview()
    {
        $id = $_POST['userid'];
        $host_id_verified = "";
        if($id == "") {
            $json_encode = json_encode(array("status"=>0,"message"=>"Missing parameter!"));
            echo $json_encode;
            exit;
        }
        $payment_gateway = $this->mobile_model->get_all_details(PAYMENT_GATEWAY, array());
        foreach ($payment_gateway->result() as $gateway)
        {
            if($gateway->id == '1'){
                $Paypal_status =$gateway->status;
            }else if($gateway->id == '3'){
                $Stripe_status =$gateway->status;
            }else{
                $Credit_Card_status =$gateway->status;
            }


        }

        $user_currencyCode = $_POST['currency_code'];
        $hosting_commission='SELECT * FROM '.COMMISSION.' WHERE seo_tag="host-listing"';
        $hosting_commission_status=$this->mobile_model->ExecuteQuery($hosting_commission);
        $condition = array('id'=>$id);
        $this->db->select('p.product_title,p.description,p.price,p.calendar_checked,p.list_name,p.id,p.user_status,p.status,p.room_type,p.other_thingnote,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.house_rules,pp.product_image,pa.address,pa.country, pa.lat, pa.lang, u.user_name as hostname,pa.lat as latitude,p.listings,p.cancellation_policy,hs.payment_status,p.created,p.currency,p.user_id as host_id,pay.is_coupon_used,pay.is_wallet_used,pay.wallet_Amount,pay.discount,pay.dval,pay.total_amt,pay.currency_code');
        $this->db->from(PRODUCT.' as p');
        $this->db->join(PRODUCT_PHOTOS.' as pp',"pp.product_id=p.id","LEFT");
        $this->db->join(USERS.' as u',"u.id=p.user_id","LEFT");
        $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
        $this->db->join(HOSTPAYMENT.' as hs',"hs.product_id=p.id","LEFT");
        $this->db->join(RENTALENQUIRY . ' as rq', 'p.id = rq.prd_id',"LEFT");
        $this->db->join(PAYMENT . ' as pay', 'pay.EnquiryId = rq.id', 'LEFT');
        $this->db->where('p.user_id',$id);
        if($_POST['status'] == 'publish')
            $this->db->where('p.status','Publish');
        if($_POST['status'] == 'unpublish')
            $this->db->where('p.status','UnPublish');
        $this->db->order_by('p.id','desc');
        $this->db->group_by('p.id');
        $query = $this->db->get();
        $search_res1 = $query->result();
        /*Get user email id verified details*/
        $host_id = 'SELECT id,id_verified FROM '.USERS.' WHERE id ='.$id;
        $host_verify = $this->mobile_model->ExecuteQuery($host_id);
        if(($host_verify->num_rows() > 0) && ($host_verify->row()->id_verified == 'Yes'))
        {
            $host_id_verified = "verified";
        }else{
            $host_id_verified = "not verified";
        }
        /*end*/
        if($query->num_rows() != 0) {
            foreach($search_res1 as $res1){
                $total_steps=8;
                if($res1->product_title !="")
                {
                    $total_steps--;
                }
                if($res1->price !="0.00")
                {
                    $total_steps--;
                }
                if($res1->calendar_checked !="")
                {
                    $total_steps--;
                }
                if($res1->product_image !="")
                {
                    $total_steps--;
                }
                if($res1->list_name !="")
                {
                    $total_steps--;
                }
                if($res1->latitude !="" && $res1->latitude !="0")
                {
                    $total_steps--;
                }
                if($res1->listings !="")
                {
                    $total_steps--;
                }
                if($res1->cancellation_policy !="")
                {
                    $total_steps--;
                }
                $payable = false;
                $calendar_status = false;
                if($res1->status == 'Publish' ){
                    $calendar_status = true;
                }
                if($total_steps != 0 ){
                    $status = $total_steps.' steps to list';
                } else {
                    if($res1->status == 'Publish' && $total_steps == 0){
                        $status = 'Listed';
                    } elseif($res1->status == 'UnPublish' && $total_steps == 0 && $hosting_commission_status->row()->status == 'Inactive'){
                        $status = 'Pending';
                    } elseif($res1->status == 'UnPublish' && $total_steps == 0 && $hosting_commission_status->row()->status == 'Active' && $res1->payment_status == 'paid'){
                        $status = 'Pending';
                    } elseif($res1->status == 'UnPublish' && $total_steps == 0 && $hosting_commission_status->row()->status == 'Active') {
                        //echo "2"; exit();
                        $status = 'Pay';
                        $payable = true;
                    }
                }
                if($res1->product_image != ''){
                    $p_img = explode('.',$res1->product_image);
                    $suffix = strrchr($res1->product_image, ".");
                    $pos = strpos  ( $res1->product_image  , $suffix);
                    $name = substr_replace ($res1->product_image, "", $pos);
                    // echo $suffix . "<br><br>". $name;
                    $pro_img = $name.''.$suffix;
                    $proImage = base_url().'images/rental/'.$pro_img;
                }else{
                    $proImage = base_url().'images/rental/dummyProductImage.jpg';
                }
                $adminCurrency = 'USD';
                // $condition = array('currency_type'=>$res1->currency);
                $condition = array('currency_type'=>$adminCurrency);
                //$condition = array('currency_type'=>$res1->currency);
                $property_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                $property_currency_symbol = $property_currency_details->row()->currency_symbols;
                $product_title = $res1->product_title;
                $hostname = $res1->hostname;
                $price = floatval($res1->price);
                $commission=$hosting_commission_status->row()->commission_percentage;
                if($hosting_commission_status->row()->promotion_type=='percentage')
                {
                    $hosting_price=floatval(($res1->price/100)*$commission);
                }
                else{
                    $hosting_price=floatval($commission);
                }
                $productarr[] = array("host_id_verified"=>$host_id_verified,'remaining_steps'=>$total_steps,'property_image'=>$proImage,'property_title'=>$product_title,'property_price'=>$hosting_price,'property_status'=>$status,'hostname'=>$hostname,'property_id'=>intval($res1->id),'created_date'=>$res1->created,'property_currency_code'=>$adminCurrency,'property_currency_symbol'=>$property_currency_symbol,'payable'=>$payable,'calendar_status'=>$calendar_status,'host_id'=>intval($res1->host_id),"paypal_status" => $Paypal_status,"Stripe_status" => $Stripe_status,"Credit_Card_status" => $Credit_Card_status);
            }
        }
        $prop_curcode = $user_currencyCode;
        $prop_curSymb = $this->mobile_model->get_all_details(CURRENCY, array('currency_type'=>$prop_curcode))->row()->currency_symbols;
        $this->db->select('pb.product_id,pa.zip as post_code,pa.address,pa.street as apt, pa.country as country_name,pa.state as state_name, pa.city as city_name, p.product_name,p.product_title,p.price,p.currency,p.security_deposit,p.other_thingnote,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,u.firstname, u.image, u.loginUserType, rq.id as EnqId, rq.booking_status, rq.checkin, rq.checkout, rq.currencycode, rq.dateAdded, rq.user_id as GestId, rq.numofdates as noofdates, rq.approval as approval,rq.subTotal,rq.serviceFee,rq.secDeposit,rq.totalAmt,rq.Bookingno as  Bookingno,p.cancellation_policy,p.house_rules,rq.NoofGuest,rq.user_currencycode,rq.currency_cron_id,pay.is_wallet_used,pay.wallet_Amount,pay.is_coupon_used,pay.discount,pay.dval,pay.total_amt,pay.currency_code');
        $this->db->from(PRODUCT_BOOKING.' as pb');
        $this->db->join(PRODUCT_ADDRESS_NEW.' as pa' , 'pa.productId = pb.product_id','left');
        $this->db->join(PRODUCT.' as p' , 'p.id = pb.product_id');
        $this->db->join(RENTALENQUIRY.' as rq' , 'p.id = rq.prd_id');
        $this->db->join(USERS.' as u' , 'u.id = rq.user_id');
        $this->db->join(PAYMENT . ' as pay', 'pay.EnquiryId = rq.id', 'LEFT');
        $this->db->where('p.user_id = '.$id);
        $this->db->where('rq.renter_id = '.$id);
        $this->db->where('rq.booking_status != "Enquiry"');
        $this->db->group_by('rq.id');
        $this->db->order_by('rq.dateAdded','desc');
        $reservationDetails = $this->db->get();
        $my_reservation =array();
        $payment_status = "";
        $approval_status = "";
        if($reservationDetails->num_rows()>0){
            foreach($reservationDetails->result() as $trip)
            {
                if($trip->currency_cron_id=='' || $trip->currency_cron_id==0){ $currencyCronId=''; }else{ $currencyCronId=$trip->currency_cron_id; }
                $paymentstatus = $this->mobile_model->get_all_details(PAYMENT,array('Enquiryid'=>$trip->EnqId));
                $chkval = $paymentstatus->num_rows();
                if($chkval==1) {
                    $payment_status = "Paid";
                }else {
                    $payment_status = "Pending";
                }
                if($trip->approval=='Pending') {
                    $approval_status = "Approval Pending";
                }else {
                    if($trip->approval == 'Accept'){
                        $approval_status = "Accepted";
                    } else {
                        $approval_status = "Declined";
                    }
                }
                if($trip->image != ''){
                    if($trip->loginUserType == 'google'){
                        $userImage = $trip->image;
                    }elseif($trip->image == '' ){
                        $userImage = base_url().'images/users/profile.png';
                    } else {
                        $userImage = base_url().'images/users/'.$trip->image;
                    }
                }else{
                    $userImage = base_url().'images/users/profile.png';
                }
                if($trip->firstname != ''){
                    $host_name = $trip->firstname;
                } else {
                    $host_name ="";
                }
                if($trip->house_rules != ''){
                    $house_rules = $trip->house_rules;
                } else {
                    $house_rules ="None";
                }
                if($trip->house_rules == ''){
                    $house_rules = 'None';
                }else{
                    $house_rules = $trip->house_rules;
                }
                if($trip->guest_access == ''){
                    $guest_access = '';
                }else{
                    $guest_access = $trip->guest_access;
                }
                if($trip->interact_guest == ''){
                    $interact_guest = '';
                }else{
                    $interact_guest = $trip->interact_guest;
                }
                if($trip->neighbor_overview == ''){
                    $neighbor_overview = '';
                }else{
                    $neighbor_overview = $trip->neighbor_overview;
                }
                if($trip->neighbor_around == ''){
                    $neighbor_around = '';
                }else{
                    $neighbor_around = $trip->neighbor_around;
                }
                if($trip->other_thingnote == ''){
                    $other_things_to_note = '';
                }else{
                    $other_things_to_note = $trip->other_thingnote;
                }
                if($trip->checkin!='0000-00-00 00:00:00' && $res->checkout!='0000-00-00 00:00:00'){
                    $book_date = date('M d Y',strtotime($trip->checkin))." - ".date('M d Y',strtotime($trip->checkout));
                }
                $cur_date = date("Y-m-d H:i:s");
                $secDeposit = floatval($trip->secDeposit);
                $total = $trip->subTotal + $trip->secDeposit +$trip->serviceFee;
                /*$condition = array('currency_type'=>$trip->currency);
        $property_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
        $property_currency_symbol = $property_currency_details->row()->currency_symbols;
        //paid currency details
        $conditionrq = array('currency_type'=>$trip->currencycode);
        $paid_currency_details = $this->mobile_model->get_all_details(CURRENCY, $conditionrq);
        $paid_currency_symbol = $paid_currency_details->row()->currency_symbols; */

                /*Get coupon Price*/
                if ($trip->is_coupon_used == 'Yes')
                {
                    $currencySymbol;
                    $couponPrice = ($trip->total_amt - $trip->discount);
                    $is_coupon_used=$trip->is_coupon_used;
                    if ($user_currencyCode!=$trip->currency)                    {
                        $tot_coup = currency_conversion($trip->user_currencycode,$user_currencyCode,$couponPrice,$currencyCronId);
                    } else {
                        $tot_coup = currency_conversion($trip->user_currencycode,$user_currencyCode,$couponPrice,$currencyCronId);
                    }
                }else{
                    $tot_coup = ""; $is_coupon_used = "";$couponPrice ="0.00";
                }
                /*get wallet price*/
                if($trip->is_wallet_used == "Yes")
                {
                    if ($user_currencyCode!=$trip->currency)                    {
                        $total_wallet = currency_conversion($trip->user_currencycode,$user_currencyCode,$trip->wallet_Amount,$currencyCronId);
                    } else {
                        $total_wallet = currency_conversion($trip->user_currencycode,$user_currencyCode,$trip->wallet_Amount,$currencyCronId);
                    }
                }

                $total = $trip->subTotal + $trip->secDeposit + $trip->serviceFee - ($tot_coup + $total_wallet);
                $paid_currency_symbol = $this->mobile_model->get_all_details(CURRENCY, array('currency_type'=>$trip->user_currencycode))->row()->currency_symbols;
                if($user_currencyCode!=$trip->user_currencycode)
                {
                    $prop_price   = currency_conversion($trip->user_currencycode,$user_currencyCode, $trip->price/*,$currencyCronId*/);
                    $prop_servicefee= currency_conversion($trip->user_currencycode,$user_currencyCode, $trip->serviceFee/*,$currencyCronId*/);
                    $prop_subTotal  = currency_conversion($trip->user_currencycode,$user_currencyCode, $trip->subTotal/*,$currencyCronId*/);
                    $security_depos = currency_conversion($trip->user_currencycode,$user_currencyCode, $trip->secDeposit/*,$currencyCronId*/);
                    //$prop_grandtotal= currency_conversion($trip->user_currencycode,$user_currencyCode, $total,$currencyCronId);
                    $prop_coupon_amt = currency_conversion($trip->user_currencycode,$user_currencyCode, $couponPrice,$currencyCronId);
                    $prop_wallet_amt = currency_conversion($trip->user_currencycode,$user_currencyCode, $trip->wallet_Amount,$currencyCronId);
                }
                else
                {
                    $prop_price   = $trip->price;
                    $prop_servicefee= $trip->serviceFee;
                    $prop_subTotal  = $trip->subTotal;
                    $security_depos = $trip->secDeposit;
                    //$prop_grandtotal= $total;
                    $prop_coupon_amt = $couponPrice;
                    $prop_wallet_amt = $trip->wallet_Amount;
                }


                /*get total amount*/
                $prop_grandtotal = $prop_servicefee +$security_depos +  ( $prop_subTotal - $prop_coupon_amt - $prop_wallet_amt);
                /*Get Host cancel Show status for host*/
                $time_val = date('Y-m-d');
                $checkinBeforeDay = date('Y-m-d', $trip->checkin);
                $dis_details = $this->mobile_model->get_all_details(DISPUTE, array('prd_id' => $trip->product_id, 'booking_no' => $trip->Bookingno,'cancel_status' =>1));

                $is_canceled = false;
                $cancel_show_status = false;
                $cancelled_by ="No cancel";
                /*if ($dis_details->row()->cancel_status == 1) {
                    $is_canceled = true;
                    $cancel_show_status = true;
                }*/

                if ($dis_details->num_rows() == 0)
                {
                    $time_val = date('Y-m-d');
                    $check_in = date("Y-m-d", strtotime($trip->checkin));
                    $check_out = date("Y-m-d", strtotime($trip->checkout));
                    //echo $time_val.'/'.$check_in;
                    $admin = $this->mobile_model->get_all_details(ADMIN_SETTINGS, array('id' => '1'));

                    $cancel_hide_days_experience_host = $admin->row()->cancel_hide_days_property_host;
                    $req_date = '-'.$cancel_hide_days_experience_host.' days';

                    $cancel_hide_days = date('Y-m-d', strtotime($req_date, strtotime($trip->checkin)));
                    $date1=date_create($time_val);
                    $date2=date_create($cancel_hide_days);
                    $diff_cancel_days=date_diff($date1,$date2);
                    /*if($time_val <= $cancel_hide_days && $trip->is_coupon_used != 'Yes'  && $trip->is_wallet_used != 'Yes'){
                        $cancel_show_status = true;
                        $is_canceled = false;
                         $cancelled_by ="";
                        }*/
                    /* if($diff_cancel_days->format("%d") <= $cancel_hide_days_experience_host)
                         {*//*other month neglect from current month*/
                    if (($time_val) >= $check_in) {
                        $cancel_show_status = false;
                    }else{
                        if($time_val <= $cancel_hide_days && $trip->is_wallet_used!="Yes" && $trip->is_coupon_used != 'Yes'){

                            $cancel_show_status = true;

                        }else{
                            $cancel_show_status = false;
                        }
                    }
                    /* if($time_val <= $checkinBeforeDay && $trip->is_coupon_used != 'Yes' && intval($trip->walletAmount)==0){
                             $cancel_show_status = true;
                         } */
                    /* }else{
                          $cancel_show_status = false;
                     }*/
                }elseif($dis_details->row()->dispute_by == "Host" )
                {
                    $cancel_show_status = false;
                    $is_canceled = true;
                    $cancelled_by = "Cancelled By Host";
                }elseif($dis_details->row()->dispute_by == "" )
                {
                    $cancel_show_status = false;
                    $is_canceled = true;
                    $cancelled_by = "Cancelled By Guest";
                }else{
                    $cancel_show_status = false;
                    $is_canceled = false;
                    $cancelled_by ="No cancel";
                }
                /***END***/

                $my_reservation[] = array(
                    "id"=>$trip->EnqId,
                    "property_title"=>$trip->product_title,
                    "property_price"=>floatval($prd_price),
                    "property_currency_code"=>$prop_curcode,
                    "property_currency_symbol"=>$prop_curSymb,
                    "booking_dates"=>$book_date,
                    "checkin"=>$trip->checkin,
                    "checkout"=>$trip->checkout,
                    "numofdates"=>$trip->noofdates,
                    "property_address"=>$trip->address,
                    "country"=>$trip->country_name,
                    "state"=>$trip->state_name,
                    "city"=>$trip->city_name,
                    "post_code"=>$trip->post_code,
                    "property_id"=>$trip->product_id,
                    "service_fee"=>floatval($prop_servicefee),
                    "sub_total"=>floatval($prop_subTotal),
                    "security_deposit"=>floatval($security_depos),
                    "NoofGuest"=>$trip->NoofGuest,
                    "cancellation_policy"=>$trip->cancellation_policy,
                    "house_rules"=>$house_rules,
                    "other_things_to_note"=>$other_things_to_note,
                    "interact_guest"=>$interact_guest,
                    "neighbor_overview"=>$neighbor_overview,
                    "neighbor_around"=>$neighbor_around,
                    "guest_access"=>$guest_access,
                    "total"=>floatval($prop_grandtotal),
                    "payment_status"=>$payment_status,
                    "approval_status"=>$approval_status,
                    "paid_currency_code"=>$trip->user_currencycode,
                    "paid_currency_symbol"=>$paid_currency_symbol,
                    "guest_id"=>$trip->GestId,
                    "user_name"=>$host_name,
                    "bookingno"=>$trip->Bookingno,
                    "loginUserType"=>$trip->loginUserType,
                    "user_image"=>$userImage,
                    "is_wallet_used" => (($trip->is_wallet_used == "Yes" ) ?$trip->is_wallet_used : "No" ),
                    "wallet_Amount" => (($trip->wallet_Amount != "" ) ? $prop_wallet_amt : "0.00" ),
                    "is_coupon_used" => $is_coupon_used,
                    "coupon_amount"=>$tot_coup,
                    "cancel_show_status"=>$cancel_show_status,
                    "is_canceled"=>$is_canceled,
                    "cancelled_by"=>$cancelled_by
                );
            }
        }
        if($query->num_rows() == 0 && $reservationDetails->num_rows() ==0) {
            $productarr = array();
            $json_encode = json_encode(array("status"=>0,"message"=>"No Listing available","property_listing"=>$productarr,"my_reservation"=>$my_reservation));
        } else {
            $json_encode = json_encode(array("status"=>1,"message"=>"Listing available","property_listing"=>$productarr,"my_reservation"=>$my_reservation));
        }
        echo $json_encode;
    }
    /* Property details for property edit  */
    public function product_edit()
    {
        $catID = intval($this->input->post('property_id'));
        if ($catID=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Parameter missing'));
        } else {
            $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
            $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

            $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
            $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
            $currencyvalueArr = array();
            if($currency_values->num_rows() >0) {
                foreach($currency_values->result() as $cur_value) {
                    $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
                }
            }
            $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
            $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
            $attribute = array();
            $property = array();
            $rooms = array();
            $conditions = array('status'=>'Active','id'=>9);
            $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
            /* Property and Room Type and so on */
            if($property_space->num_rows()>0) {
                foreach($property_space->result() as $pro) {
                    $conditions1 = array('status'=>'Active','listspace_id'=>9);
                    $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                    if($property_listvalue->num_rows()>0) {
                        $propertyvalueArr = array();
                        foreach($property_listvalue->result() as $prty) {
                            $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                        }
                        $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                    }
                }
            }
            $conditions = array('status'=>'Active','id'=>10);
            $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
            /* Room Type and so on */
            if($property_space->num_rows()>0) {
                foreach($property_space->result() as $pro) {
                    $conditions1 = array('status'=>'Active','listspace_id'=>10);
                    $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                    if($room_listvalue->num_rows()>0) {
                        $propertyvalueArr = array();
                        foreach($room_listvalue->result() as $room) {
                            $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                        }
                        $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                    }
                }
            }
            /* Features of amenties,extras ,wifi and so on */
            if($parent_list_values->num_rows()>0) {
                foreach($parent_list_values->result() as $parent_value) {
                    $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                    $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                    if($list_values->num_rows()>0) {
                        $listvalueArr = array();
                        foreach($list_values->result() as $list_value) {
                            if($parent_value->id == $list_value->list_id) {
                                $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                            }
                        }
                        $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                    }
                }
            }
            $roombedVal=array();
            $roombedVal1=array();
            $select_qry = "select * from fc_listings where id=1";
            $list_values = $this->mobile_model->ExecuteQuery($select_qry);
            if($list_values->num_rows()>0){
                foreach($list_values->result() as   $list){
                    $roombedVal[] =json_decode($list->listing_values);
                    $roombedVal1[] =json_decode($list->rooms_bed);
                }
            }
            /***********Charles 18-3-2017 Parent Name*********/
            $select_qrys = "select * from fc_listing_types where status='Active'";
            $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
            $property_attributes = array();
            if($listing_values->num_rows()>0)
            {
                foreach($listing_values->result() as $listing_parent)
                {
                    $listing_id = $listing_parent->id;
                    $listing_name = $listing_parent->name;
                    $listing_type = $listing_parent->type;
                    if($listing_name == 'Minimum_stay' || $listing_name == 'Guest_Capacity'){
                        $listing_labelname = $listing_parent->labelname.' *';
                    }else{
                        $listing_labelname = $listing_parent->labelname;
                    }
                    $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                    /***********Charles 18-3-2017 Child Name*********/
                    /***********Charles 2-3-2017 Child Name*********/
                    $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                    $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                    //print_r($list_valuesy->result()); exit;
                    $property_child_attributes = array();
                    if($list_valuesy->num_rows()>0){
                        if($listing_type=="option") {
                            foreach($list_valuesy->result() as $listing_child){
                                $listing_child_id = $listing_child->id;
                                $listing_child_name = $listing_child->child_name;
                                $listing_child_type = $listing_child->type;
                                $listing_child_labelname = $listing_child->labelname;
                                $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                            }
                        }
                    }
                    if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                    }
                    else
                    {
                        $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                    }
                }
            }
            /***********Charles 18-3-2017 Parent Name*********/
            if($catID !="") {
                /* schedule starts here */
                $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$catID));
                $sometime_arr = array();
                if($scheduleCheck->num_rows() >0){
                    foreach($scheduleCheck->result() as $sc){
                        $json_decode = json_decode($sc->data);
                        foreach($json_decode as $key=>$value){
                            if($value->status=="available"){
                                $status = 1;
                            }else if($value->status=="booked"){
                                $status = 2;
                            }else if($value->status=="unavailable"){
                                $status = 3;
                            }
                            $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                        }
                    }
                }
                /* schedule ends here */
                /* Get the property details */
                $attributes=array();
                $where1 = array('p.id'=>$catID);
                $where2 = array('product_id'=>$catID);
                $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.request_to_book,p.instant_pay,p.status,p.listings,p.cancel_description,p.cancel_percentage,p.space');
                $this->db->from(PRODUCT.' as p');
                $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
                $this->db->where($where1);
                $rental_details = $this->db->get();
                /* Get Cancellation Policy detail starts */
                $seourl = 'cancellation-policy';
                $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
                $cancellation_policy_description  = "";
                $cancellation_policy_title        = "";
                if($pageDetails->num_rows()>0) {
                    foreach($pageDetails->result() as $page){
                        $cancellation_policy_description  = $page->description;
                        $cancellation_policy_title        = $page->page_title;
                    }
                }
                /* Get Cancellation Policy detail ends */
                /* Get the property image details */
                $photos = array();
                if($rental_details->num_rows() == 1) {
                    $this->db->from(PRODUCT_PHOTOS);
                    $this->db->where('product_id',$catID);
                    $this->db->order_by('imgPriority','asc');
                    $productImages = $this->db->get();
                    if($productImages->num_rows()>0) {
                        foreach($productImages->result() as $prd_Images){
                            $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                        }
                    }
                    foreach($rental_details->result() as $rental_detail){
                        if($rental_detail->listings !=""){
                            $attributes[] = json_decode($rental_detail->listings);
                            $array_attributes = (array) $attributes[0];
                        }
                        else {
                            if($rental_detail->accommodates!="") {
                                //fc_listing_child where parent_id=".$listing_id." and status=0"
                                $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE A.status='Active' and B.id=".$rental_detail->accommodates;
                                $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                                foreach($listing_values_v1->result() as $listnamev1) {
                                    $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                                }
                                $array_attributes = $attributes[0];
                            }
                        }
                        $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                        $calendar_status = false;
                        if($rental_detail->status == 'Publish' ){
                            $calendar_status = true;
                        }
                        $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                    }
                    $price ="";
                    if($rental_detail->price !=0){
                        $price = floatval($rental_detail->price);
                    }
                    if($rental_detail->house_rules == ''){
                        $house_rules = 'None';
                    }else{
                        $house_rules = $rental_detail->house_rules;
                    }
                    if($rental_detail->guest_access == ''){
                        $guest_access = 'None';
                    }else{
                        $guest_access = $rental_detail->guest_access;
                    }
                    if($rental_detail->interact_guest == ''){
                        $interact_guest = 'None';
                    }else{
                        $interact_guest = $rental_detail->interact_guest;
                    }
                    if($rental_detail->neighbor_overview == ''){
                        $neighbor_overview = 'None';
                    }else{
                        $neighbor_overview = $rental_detail->neighbor_overview;
                    }
                    if($rental_detail->neighbor_around == ''){
                        $neighbor_around = 'None';
                    }else{
                        $neighbor_around = $rental_detail->neighbor_around;
                    }
                    if($rental_detail->other_thingnote == ''){
                        $other_things_to_note = 'None';
                    }else{
                        $other_things_to_note = $rental_detail->other_thingnote;
                    }
                    if($rental_detail->instant_pay == ''){
                        $instant_pay = 'No';
                    }else{
                        $instant_pay = $rental_detail->instant_pay;
                    }
                    if($rental_detail->request_to_book == ''){
                        $request_to_book = 'Yes';
                    }else{
                        $request_to_book = $rental_detail->request_to_book;
                    }
                    if($rental_detail->space == ''){
                        $space = '';
                    }else{
                        $space = $rental_detail->space;
                    }
                    $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                    $step4 = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$rental_detail->other_thingnote,"house_rules"=>$rental_detail->house_rules,"interact_guest"=>$rental_detail->interact_guest,"neighbor_overview"=>$rental_detail->neighbor_overview,"neighbor_around"=>$rental_detail->neighbor_around,"guest_access"=>$rental_detail->guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space);
                    $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                    $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                    $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                    $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                    $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                    $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,"cancel_description"=>$rental_detail->cancel_description,"cancel_percentage"=>$rental_detail->cancel_percentage);
                    $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
                    $step_empty1=0;
                    if (in_array('', $step1)) { $step_empty1++; }
                    if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
                    $step1 = array_merge($array1, $step1);
                    $step22[] = $step2['calendar_checked'];
                    $step_empty2=0;
                    if (in_array('',$step22)) { $step_empty2++; }
                    if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
                    $step2 = array_merge($array2, $step2);
                    $step_empty3=0;
                    if (in_array('', $step3)) { $step_empty3++; }
                    if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
                    $step3 = array_merge($array3, $step3);
                    $step_empty4=0;
                    if (in_array('', $step4_chk)) { $step_empty4++; }
                    if($step_empty4>0){ $array4 = array("step_completed"=>false,"admin_instant_pay_staus" => $instant_pay_staus); } else { $array4 = array("step_completed"=>true,"admin_instant_pay_staus" => $instant_pay_staus); }
                    $step4 = array_merge($array4, $step4);
                    $step_empty5=0;
                    if (empty($photos)) { $step_empty5++; }
                    if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
                    $step5 = array_merge($array5, $step5);
                    $step_empty6=0;
                    if (in_array('', $step6)) { $step_empty6++; }
                    if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
                    $step6 = array_merge($array6, $step6);
                    $step_empty7=0;
                    /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
                    if($rental_detail->listings != ''){ $step_empty7++; }
                    //$select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
                    //if (!empty($attributes) && (count($array_attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
                    //if (!empty($attributes) && (count($attributes)>0)) { $step_empty7++; }
                    //if (in_array('', $step7)) { $step_empty7++; }
                    if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
                    $step7 = array_merge($array7, $step7);
                    $step_empty8=0;
                    if (in_array('', $step8)) { $step_empty8++; }
                    if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
                    $step8 = array_merge($array8, $step8);
                    $step_empty9=0;
                    if (in_array('', $step9_chk)) { $step_empty9++; }
                    if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
                    $step9 = array_merge($array9, $step9);
                    $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
                    $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"admin_instant_pay_staus" => $instant_pay_staus,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes" => $property_attributes,"currency" =>$currencyvalueArr));
                } else {
                    $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
                }
            }
        }
        echo $json_encode;
    }
    /**
     *
     * Loading Category Json Page
     */
    //wish list
    public function mobile_wishlist() {
        $wishcatname = $_POST['wishlist_title'];
        $product_id =$_POST['property_id'];
        $userid = $_POST['userid'];
        $wishuser_id = $userid;
        $condition = array('user_id'=>$wishuser_id,'product_id'=>$product_id);
        $check = $this->mobile_model->get_all_details(LISTS_DETAILS,$condition);
        if($check->num_rows() == 0) {
            $data = $this->mobile_model->add_wishlist_category ( array (
                'user_id' => $wishuser_id,
                'name' => ucfirst ( $wishcatname ),
                'product_id'=>$product_id
            ) );
            $newdata = array('fav'=>1);
            $condition = array('id'=>$product_id);
            $this->mobile_model->update_details ( PRODUCT, $newdata, $condition );
            $res = 'successfully wishlist added';
            $json_encode = json_encode(array("status"=>1,"message"=>$res));
        }else{
            $this->db->where('user_id', $wishuser_id);
            $this->db->where('product_id', $product_id);
            $this->db->delete(LISTS_DETAILS);
            $newdata = array('fav'=>0);
            $condition = array('id'=>$product_id);
            $this->mobile_model->update_details ( PRODUCT, $newdata, $condition );
            $res = 'successfully wishlist removed';
            $json_encode = json_encode(array("status"=>0,"message"=>$res));
        }
        echo $json_encode;
    }
    public function mobile_setcurrency(){
        $currencytype = $_GET['currency_code'];
        $email = $_GET['email'];
        if($_GET['currency_code'] != '' && $_GET['email'] != '') {
            $condition1 = array("email"=>$email);
            $view = $this->mobile_model->get_all_details(USERS,$condition1);
            $euser_id = $view->row()->id;
            $newdata = array('user_currency'=>$currencytype);
            $condition = array('id'=>$euser_id);
            $this->mobile_model->update_details ( USERS, $newdata, $condition );
            $res = 'successful';
            $json_encode = json_encode(array("status"=>$res));
        }else{
            $res = 'failed';
            $json_encode = json_encode(array("status"=>$res));
        }
        echo $json_encode;
    }
    public function mobile_yourtrips() {
        $email = $_GET['email'];
        $condition = array("email"=>$email);
        $view = $this->mobile_model->get_all_details(USERS,$condition);
        $user_id = $view->row()->id;
        //$user_id= 75;
        if($_GET['email'] != ''){
            $this->db->select('pb.*,pa.post_code,pa.address,pa.apt,pp.product_image,
                c.name as country_name,
                s.name as state_name,
                ci.name as city_name,
                p.product_name,p.product_title,p.price,p.currency,
                u.firstname,u.image,
                rq.booking_status,rq.checkin,rq.checkout,rq.dateAdded,rq.user_id as GestId,rq.renter_id,rq.serviceFee,rq.totalAmt,rq.approval as approval,rq.id as cid');
            $this->db->from(PRODUCT_BOOKING.' as pb');
            $this->db->join(PRODUCT_ADDRESS.' as pa' , 'pa.product_id = pb.product_id','left');
            $this->db->join(LOCATIONS.' as c' , 'c.id = pa.country','left');
            $this->db->join(STATE_TAX.' as s' , 's.id = pa.state','left');
            $this->db->join(CITY.' as ci' , 'ci.id = pa.city','left');
            $this->db->join(PRODUCT.' as p' , 'p.id = pb.product_id','left');
            $this->db->join(PRODUCT_PHOTOS.' as pp' , 'p.id = pp.product_id','left');
            $this->db->join(RENTALENQUIRY.' as rq' , 'p.id = rq.prd_id');
            $this->db->join(USERS.' as u' , 'u.id = rq.renter_id');
            $this->db->where('rq.user_id = '.$user_id);
            $this->db->where('DATE(rq.checkout) > ', date('"Y-m-d H:i:s"'), FALSE);
            $this->db->where('rq.booking_status != "Enquiry"');
            $this->db->group_by('rq.id');
            $this->db->order_by('rq.dateAdded');
            $tripresult = $this->db->get();
            foreach($tripresult->result() as $trip){
                if($trip->product_image !=''){
                    $p_img = explode('.',$trip->product_image);
                    $suffix = strrchr($trip->product_image, ".");
                    $pos = strpos  ( $trip->product_image  , $suffix);
                    $name = substr_replace ($trip->product_image, "", $pos);
                    // echo $suffix . "<br><br>". $name;
                    $pro_img = $name.''.$suffix;
                    $proImage = $pro_img;
                }else{
                    $proImage = 'no_image.jpg';
                }
                $res[] =array("product_title"=>$trip->product_title,"image"=>'no_image.jpg');
            }
            if($tripresult->num_rows()==0) {
                $res=array();
                $json_encode = json_encode(array("status"=>$res));
            }else{
                $json_encode = json_encode(array("status"=>$res));
            }
        }else{
            $res=array();
            $json_encode = json_encode(array("status"=>$res));
        }
        echo $json_encode;
    }
    public function mobile_psdchange(){
        $email = $_POST['email'];
        $current_pass = md5 ( $_POST['currentpsd'] );
        $newpsd = $_POST['newpsd'];
        $condition = array (
            'email' => $email,
            'password' => $current_pass
        );
        $checkuser = $this->mobile_model->get_all_details ( USERS, $condition );
        if ($checkuser->num_rows () == 1) {
            $newPass = md5 ( $newpsd );
            $newdata = array (
                'password' => $newPass
            );
            $condition1 = array (
                'email' => $email
            );
            $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            $res = 'Password changed successfully';
        } else {
            $res = 'Current password is wrong';
        }
        $json_encode = json_encode(array("status"=>$res));
        echo $json_encode;
    }
    /* Room Type Sub values */
    public function mobile_roomtype() {
        $condition = array('listspace_id'=>9,'other'=>'Yes');
        $listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $condition );
        foreach($listvalue->result() as $list){
            $propertytype[] = array('room_title'=>$list->list_value,'room_type_id'=>$list->id,'room_type_mainid'=>$list->listspace_id);
        }
        $json_encode = json_encode(array('room_type'=>$propertytype));
        echo $json_encode;
    }
    /*  Property type values */
    public function mobile_listspacetype() {
        $condition = array('listspace_id'=>10,'other'=>'yes');
        $listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $condition );
        foreach($listvalue->result() as $list){
            $propertytype[] = array('property_title'=>$list->list_value,'propertytype_id'=>$list->id,'propertytype_mainid'=>$list->listspace_id);
        }
        $json_encode = json_encode(array('property_type'=>$propertytype));
        echo $json_encode;
    }
    public function mobile_update_account() {
        //echo '<pre>';print_r($_POST);die;
        //$email = $_GET['Email'];
        $user_id = $_POST['userid'];
        $condition = array("id"=>$user_id);
        $view = $this->mobile_model->get_all_details(USERS,$condition);
        //$user_id = $view->row()->id;
        $detail=array();
        $notify=array();
        $payout=array();
        $privacy=array();
        $comp_trans=array();
        $fut_trans=array();
        $country_list=array();
        if ($view->num_rows() == 1) {
            if($_POST['u_first_name'] != '') {
                $firstname = $_POST['u_first_name'];
                $newdata = array ('firstname' => $firstname,'user_name'=>$firstname);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['u_last_name'] != '') {
                $lastname = $_POST['u_last_name'];
                $newdata = array ('lastname' => $lastname);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['u_gender'] != '') {
                $gender = $_POST['u_gender'];
                $newdata = array ('gender' => $gender);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
                // echo $this->db->last_query();die;
            }
            if($_POST['u_birth'] != '') {
                $dob = explode("/",$_POST['u_birth']);
                $newdata = array ('dob_date' => $dob[0],"dob_month"=>$dob[1],"dob_year"=>$dob[2]);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
                //  echo $this->db->last_query();die;
            }
            if($_POST['u_phone'] != '') {
                $phone_no = $_POST['u_phone'];
                $newdata = array ('phone_no' => $phone_no);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_FILES['photo1'] != '') {
                $uploaddir = "images/users/";
                $data = file_get_contents($_FILES['photo1']['tmp_name']);
                $image = imagecreatefromstring( $data );
                $imgname=time().".jpg";
                imagejpeg($image,$uploaddir.$imgname, 99);
                $newdata = array ('image' => $imgname);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['u_live'] != '') {
                $live = $_POST['u_live'];
                $newdata = array ('address' => $live);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['u_about'] != '') {
                $describe = $_POST['u_about'];
                $newdata = array ('description' => $describe);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['school'] != '') {
                $school = $_POST['school'];
                $newdata = array ('school' => $school);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['work'] != '') {
                $work = $_POST['work'];
                $newdata = array ('work' => $work);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['language'] != '') {
                $newdata = array ('languages_known' => $language);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['email_id_verified'] != '' && $_POST['email_id_verified'] =='Yes'){
                $id_verified ="Yes";
                $newdata = array ('id_verified' => $id_verified);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['phone_verified'] != '' && $_POST['phone_verified'] =='Yes') {
                $id_verified ="Yes";
                $newdata = array ('ph_verified' => $id_verified);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['email_notifications'] != '') {
                $email_notifications =$_POST['email_notifications'];
                $newdata = array ('email_notifications' => $email_notifications);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['notifications'] != '') {
                $notifications =$_POST['notifications'];
                $newdata = array ('notifications' => $notifications);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['accname'] != '' && $_POST['accno'] != '' && $_POST['bankname'] != '' && $_POST['paypal_email'] != '') {
                $newdata = array ('accname' => $_POST['accname'],'accno' => $_POST['accno'],  'bankname' => $_POST['bankname'],'paypal_email' => $_POST['paypal_email']);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['social_recommend'] != '') {
                if($_POST['social_recommend'] =='true' || $_POST['social_recommend']=='false') {
                    if($_POST['social_recommend'] =='true') {
                        $social ='yes';
                    } else if($_POST['social_recommend'] =='false') {
                        $social ='no';
                    }
                    $newdata = array ('social_recommend' => $social );
                    $condition1 = array ('id' => $user_id );
                    $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
                }
            }
            if($_POST['search_by_profile'] != '') {
                if($_POST['search_by_profile'] =='true' || $_POST['search_by_profile']=='false') {
                    if($_POST['search_by_profile'] =='true') {
                        $search_by_profile ='yes';
                    } else if($_POST['search_by_profile'] =='false') {
                        $search_by_profile ='no';
                    }
                    $newdata = array ('search_by_profile' => $search_by_profile);
                    $condition1 = array ('id' => $user_id );
                    $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
                }
            }
            if($_POST['country'] != '') {
                $newdata = array ('country' => $_POST['country'],'ph_country' => $_POST['country']);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            $user_id = $_POST['userid'];
            $condition = array("id"=>$user_id);
            $view = $this->mobile_model->get_all_details(USERS,$condition);
            //echo '<pre>';print_r($view->row());die;
            if($view->row()->image != '') {
                $img = base_url().'images/users/'.$view->row()->image;
            }else{
                $img = base_url().'images/users/profile.png';
            }
            if($view->row()->gender != 'Unspecified') {
                $gender = $view->row()->gender;
            }else{
                $gender = '';
            }
            if($view->row()->dob_date != 0) {
                $date = $view->row()->dob_date."-";
            }else{
                $date = '';
            }
            if($view->row()->dob_month != 0) {
                $month = $view->row()->dob_month."-";
            }else{
                $month = '';
            }
            if($view->row()->dob_year != 0) {
                $year = $view->row()->dob_year;
            }else{
                $year = '';
            }
            if($view->row()->ph_verified != "") {
                if($view->row()->ph_verified =="Yes"){
                    $phone_verified = true;
                } else if($view->row()->ph_verified =="No"){
                    $phone_verified = false;
                } else {
                    $phone_verified = '';
                }
            }else{
                $phone_verified = '';
            }
            if($view->row()->id_verified != "") {
                if($view->row()->id_verified =="Yes"){
                    $email_id_verified = true;
                } else if($view->row()->id_verified =="No"){
                    $email_id_verified = false;
                } else {
                    $email_id_verified = '';
                }
            }else{
                $email_id_verified = '';
            }
            if($view->row()->email_notifications != "") {
                $email_notifications = $view->row()->email_notifications;
            }else{
                $email_notifications = '';
            }
            if($view->row()->notifications != "") {
                $notifications = $view->row()->notifications;
            }else{
                $notifications = '';
            }
            if($view->row()->accname != "") {
                $accname = $view->row()->accname;
            }else{
                $accname = '';
            }
            if($view->row()->paypal_email != "") {
                $paypal_email = $view->row()->paypal_email;
            }else{
                $paypal_email = '';
            }
            if($view->row()->accno != "") {
                $accno = $view->row()->accno;
            }else{
                $accno = '';
            }
            if($view->row()->bankname != "") {
                $bankname = $view->row()->bankname;
            }else{
                $bankname = '';
            }
            if($view->row()->social_recommend != "") {
                if($view->row()->social_recommend =='yes') {
                    $social_recommend =true;
                } else if($view->row()->social_recommend =='no') {
                    $social_recommend =false;
                } else {
                    $social_recommend = '';
                }
            }else{
                $social_recommend = '';
            }
            if($view->row()->search_by_profile != "") {
                if($view->row()->search_by_profile =='yes') {
                    $search_by_profile =true;
                } else if($view->row()->search_by_profile =='no') {
                    $search_by_profile =false;
                } else {
                    $search_by_profile = '';
                }
            }else{
                $search_by_profile = '';
            }
            if($view->row()->country != "") {
                $country = $view->row()->country;
            }else{
                $country = '';
            }
            $payout[] = array("accname"=>$accname,"accno"=>$accno,"bankname"=>$bankname,"paypal_email"=>$paypal_email);
            $notify[] = array("reservation_request"=>$notifications,"email_notifications"=>$email_notifications);
            $privacy[] = array("search_by_profile"=>$search_by_profile,"social_recommend"=>$social_recommend);
            $detail[] = array("firstname"=>$view->row()->firstname,"lastname"=>$view->row()->lastname,"email"=>$view->row()->email,"phone"=>$view->row()->phone_no,"gender"=>$gender,"dob"=>$date.$month.$year,"live"=>$view->row()->address,"describe"=>$view->row()->description,"school"=>$view->row()->school,"work"=>$view->row()->work,"language"=>$view->row()->language,"image"=>$img,"country"=>intval($country),"phone_verified"=>$phone_verified,"email_id_verified"=>$email_id_verified);
            /* Country List starts here */
            $country_list = array();
            $country_query='SELECT id,name FROM '.LOCATIONS.' WHERE status="Active" order by name';
            $active_countries = $this->mobile_model->ExecuteQuery($country_query);
            if($active_countries->num_rows() >0) {
                foreach($active_countries->result() as $cntry) {
                    $country_list[] = array("id"=>intval($cntry->id),"country_name"=>$cntry->name);
                }
            }
            /*  Country List ends here */
            /* Transaction History starts here */
            $emailQry = $this->mobile_model->get_all_details(USERS, array('id' => $user_id));
            $email = $emailQry->row()->email;
            $future_transaction = $this->mobile_model->get_future_transaction($email);
            $completed_transaction = $this->mobile_model->get_completed_transaction($email);
            $fut_trans = array();
            $comp_trans = array();
            if($completed_transaction->num_rows() >0) {
                foreach($completed_transaction->result() as $comp) {
                    $comp_trans[] = array(
                        "dateadded"=>date('M d, Y',strtotime($comp->dateAdded)),
                        "transaction_method"=>"Via Bank",
                        "transaction_id"=>$comp->transaction_id,
                        "amount"=>floatval($comp->amount),
                        "bookingno"=>$comp->booking_no,
                        "currency_code"=>"USD",
                        "currency_symbol"=>"$");
                }
            }
            if($future_transaction->num_rows() >0) {
                foreach($future_transaction->result() as $fut) {
                    /*to view Who is the cancel by the booking*/
                    if($fut->cancelled == 'Yes' )
                    {
                        if($fut->dispute_by == "Host")
                        {
                            $cancel_by = "Cancelled by You";
                        }
                        else
                        {  $cancel_by = "Cancelled by Guest"; }
                    }
                    else
                    { $cancel_by = "Not Cancelled"; }
                    /*end*/
                    $fut_trans[] = array(
                        "dateadded"=>date('M d, Y',strtotime($fut->dateAdded)),
                        "firstname"=>(($fut->firstname != '') ? $fut->firstname : ''),
                        "property_title"=>(($fut->product_title != '') ? $fut->product_title : ''),
                        "property_price"=>floatval($fut->price),
                        "bookingno"=>(($fut->Bookingno != '') ? $fut->Bookingno : ''),
                        "totalAmt"=>floatval($fut->totalAmt),
                        "sub_total"=>floatval($fut->subTotal),
                        "service_fee"=>floatval($fut->guest_fee),
                        "security_deposit"=>floatval(($fut->secDeposit != "") ? $fut->secDeposit : "0.00"),
                        "host_fee"=>floatval($fut->host_fee),
                        "payable_amount"=>floatval($fut->payable_amount),
                        "currency_code"=>"USD",
                        "currency_symbol"=>"$",
                        "sub_total"=>$fut->subTotal,
                        "security_deposit"=>$fut->secDeposit,
                        "cancel_by"=>$cancel_by);
                }
            }
            //$user_transaction = array("completed_transaction"=>$comp_trans,"future_transaction"=>$fut_trans);
            /* Transaction History starts here */
            $json_encode = json_encode(array("status"=>1,"message"=>"Successfully Updated","accountinfo"=>$detail,"notifications"=>$notify,"payout_perference"=>$payout,"privacy"=>$privacy,"completed_transaction"=>$comp_trans,"future_transaction"=>$fut_trans,"country_list"=>$country_list));
        } else {
            $json_encode = json_encode(array("status"=>0,"message"=>'Failed',"accountinfo"=>$detail,"notifications"=>$notify,"payout_perference"=>$payout,"privacy"=>$privacy,"completed_transaction"=>$comp_trans,"future_transaction"=>$fut_trans,"country_list"=>$country_list));
        }
        echo $json_encode;
    }
    public function mobile_updateprofile()
    {
        $user_id = $_POST['userid'];
        $currency_code = $_POST['currency_code'];
        $condition = array("id"=>$user_id);
        $view = $this->mobile_model->get_all_details(USERS,$condition);
        //$user_id = $view->row()->id;
        $overAll_unread_count = $this->mobile_model->overAll_unread_count($user_id);
        $detail=array();
        $notify=array();
        $payout=array();
        $privacy=array();
        $trust= array();
        $country_list = array();
        $rev_abt_you = array();
        $rev_by_you = array();
        $Dis_abt_you = array();
        $Dis_by_you = array();

        if ($view->num_rows() == 1) {
            // if($_POST['photo1'] != '')
            $Image_name = $_FILES['photos']['name'];
            if($_POST['device_type'] == 'IOS' && $Image_name != '')
            {

                $Image_name = $_FILES['photos']['name'];

                if ($Image_name!='')
                {
                    $config['overwrite'] = FALSE;
                    $config['allowed_types'] = 'jpg|jpeg|gif|png';
                    $config['upload_path'] = 'images/users/';
                    $this->load->library('upload', $config);
                    $this->upload->initialize($config);
                    if ( $this->upload->do_upload('photos'))
                    {
                        $imgDetails = $this->upload->data();
                        $insertdata = array('image' => $imgDetails['file_name']);
                        $this->db->where('id', $user_id);
                        $this->db->update('fc_users', $insertdata);
                    }
                    else
                    {
                        $json_encode = json_encode(array("status"=>0,"message" => "Choose Image File","error"=>$this->upload->display_errors()),JSON_PRETTY_PRINT);
                        echo $json_encode;
                        exit();
                    }
                }
                else
                {

                    $json_encode = json_encode(array("status"=>0,"message" => "Choose Image File","error"=>"Please choose valid image ext.. jpg/png"),JSON_PRETTY_PRINT);
                    echo $json_encode;
                    exit();
                }
            }
            else
            {
                $base64_string = $_POST['photos'];
                $imgname= time().".jpg";
                $ifp = fopen( "images/users/".$imgname, "wb" );
                fwrite( $ifp, base64_decode( $base64_string) );
                fclose( $ifp );
                $newdata = array ('image' => $imgname);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['u_first_name'] != '') {
                $firstname = $_POST['u_first_name'];
                $newdata = array ('firstname' => $firstname,'user_name'=>$firstname);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['u_last_name'] != '') {
                $lastname = $_POST['u_last_name'];
                $newdata = array ('lastname' => $lastname);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['u_gender'] != '') {
                $gender = $_POST['u_gender'];
                $newdata = array ('gender' => $gender);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
                // echo $this->db->last_query();die;
            }
            if($_POST['u_birth'] != '') {
                $dob = explode("/",$_POST['u_birth']);
                $newdata = array ('dob_date' => $dob[0],"dob_month"=>$dob[1],"dob_year"=>$dob[2]);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
                //  echo $this->db->last_query();die;
            }
            if($_POST['u_phone'] != '') {
                $phone_no = $_POST['u_phone'];
                $newdata = array ('phone_no' => $phone_no);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            /*  if($_FILES['photo1'] != '') {
            $uploaddir = "images/users/";
            $data = file_get_contents($_FILES['photo1']['tmp_name']);
            $image = imagecreatefromstring( $data );
            $imgname=time().".jpg";
            imagejpeg($image,$uploaddir.$imgname, 99);
        $newdata = array ('image' => $imgname);
        $condition1 = array ('id' => $user_id );
        $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
      }
      */
            if($_POST['u_live'] != '') {
                $live = $_POST['u_live'];
                $newdata = array ('address' => $live);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['u_about'] != '') {
                $describe = $_POST['u_about'];
                $newdata = array ('description' => $describe);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['school'] != '') {
                $school = $_POST['school'];
                $newdata = array ('school' => $school);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['work'] != '') {
                $work = $_POST['work'];
                $newdata = array ('work' => $work);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['language'] != '') {
                $newdata = array ('languages_known' => $language);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['email_id_verified'] != '' && (($_POST['email_id_verified'] =='true') || ($_POST['email_id_verified'] =='false'))){
                if($_POST['email_id_verified'] =='true'){
                    $id_verified ="Yes";
                } else if($_POST['email_id_verified'] =='false'){
                    $id_verified ="No";
                } else {
                    $id_verified ="";
                }
                $newdata = array ('id_verified' => $id_verified);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['phone_verified'] != '' && (($_POST['phone_verified'] =='true') ||($_POST['phone_verified'] =='false'))) {
                if($_POST['phone_verified'] =='true'){
                    $id_verified ="Yes";
                } else if($_POST['phone_verified'] =='false'){
                    $id_verified ="No";
                }else {
                    $id_verified ="";
                }
                $newdata = array ('ph_verified' => $id_verified);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['email_notifications'] != '') {
                $email_notifications =$_POST['email_notifications'];
                $newdata = array ('email_notifications' => $email_notifications);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['notifications'] != '') {
                $notifications =$_POST['notifications'];
                $newdata = array ('notifications' => $notifications);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['accname'] != '' && $_POST['accno'] != '' && $_POST['bankname'] != '') {
                $newdata = array ('accname' => $_POST['accname'],'accno' => $_POST['accno'],  'bankname' => $_POST['bankname']);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            if($_POST['social_recommend'] != '') {
                if($_POST['social_recommend'] =='yes' || $_POST['social_recommend']=='no') {
                    $newdata = array ('social_recommend' => $_POST['social_recommend'] );
                    $condition1 = array ('id' => $user_id );
                    $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
                }
            }
            if($_POST['search_by_profile'] != '') {
                if($_POST['search_by_profile'] =='yes' || $_POST['search_by_profile']=='no') {
                    $newdata = array ('search_by_profile' => $_POST['search_by_profile']);
                    $condition1 = array ('id' => $user_id );
                    $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
                }
            }
            if($_POST['country'] != '') {
                $newdata = array ('country' => $_POST['country']);
                $condition1 = array ('id' => $user_id );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
            }
            $user_id = $_POST['userid'];
            $condition = array("id"=>$user_id);
            $view = $this->mobile_model->get_all_details(USERS,$condition);
            //echo '<pre>';print_r($view->row());die;
            if($view->row()->image != '') {
                $img = base_url().'images/users/'.$view->row()->image;
            }else{
                $img = base_url().'images/users/profile.png';
            }
            if($view->row()->gender != 'Unspecified') {
                $gender = $view->row()->gender;
            }else{
                $gender = '';
            }
            if($view->row()->dob_date != 0) {
                $date = $view->row()->dob_date."-";
            }else{
                $date = '';
            }
            if($view->row()->dob_month != 0) {
                $month = $view->row()->dob_month."-";
            }else{
                $month = '';
            }
            if($view->row()->dob_year != 0) {
                $year = $view->row()->dob_year;
            }else{
                $year = '';
            }
            if($view->row()->ph_verified != "") {
                if($view->row()->ph_verified =="Yes"){
                    $phone_verified = true;
                } else if($view->row()->ph_verified =="No"){
                    $phone_verified = false;
                } else {
                    $phone_verified = '';
                }
            }else{
                $phone_verified = '';
            }
            if($view->row()->id_verified != "") {
                if($view->row()->id_verified =="Yes"){
                    $email_id_verified = true;
                } else if($view->row()->id_verified =="No"){
                    $email_id_verified = false;
                } else {
                    $email_id_verified = '';
                }
            }else{
                $email_id_verified = '';
            }
            if($view->row()->email_notifications != "") {
                $email_notifications = $view->row()->email_notifications;
            }else{
                $email_notifications = '';
            }
            if($view->row()->notifications != "") {
                $notifications = $view->row()->notifications;
            }else{
                $notifications = '';
            }
            if($view->row()->accname != "") {
                $accname = $view->row()->accname;
            }else{
                $accname = '';
            }
            if($view->row()->accno != "") {
                $accno = $view->row()->accno;
            }else{
                $accno = '';
            }
            if($view->row()->bankname != "") {
                $bankname = $view->row()->bankname;
            }else{
                $bankname = '';
            }
            if($view->row()->social_recommend != "") {
                if($view->row()->social_recommend =='yes') {
                    $social_recommend =true;
                } else if($view->row()->social_recommend =='no') {
                    $social_recommend =false;
                } else {
                    $social_recommend = '';
                }
            }else{
                $social_recommend = '';
            }
            if($view->row()->search_by_profile != "") {
                if($view->row()->search_by_profile =='yes') {
                    $search_by_profile =true;
                } else if($view->row()->search_by_profile =='no') {
                    $search_by_profile =false;
                } else {
                    $search_by_profile = '';
                }
            }else{
                $search_by_profile = '';
            }
            if($view->row()->twitter != "") {
                if($view->row()->twitter =='Yes') {
                    $linkedin_connect =true;
                } else if($view->row()->twitter =='No') {
                    $linkedin_connect =false;
                } else {
                    $linkedin_connect = '';
                }
            }else{
                $linkedin_connect = '';
            }
            if($view->row()->google != "") {
                if($view->row()->google =='Yes') {
                    $google_connect =true;
                } else if($view->row()->google =='No') {
                    $google_connect =false;
                } else {
                    $google_connect = '';
                }
            }else{
                $google_connect = '';
            }
            if($view->row()->facebook != "") {
                if($view->row()->facebook =='Yes') {
                    $facebook_connect =true;
                } else if($view->row()->facebook =='No') {
                    $facebook_connect =false;
                } else {
                    $facebook_connect = '';
                }
            }else{
                $facebook_connect = '';
            }
            if($view->row()->country != "") {
                $country = $view->row()->country;
            }else{
                $country = '';
            }
            /*Get count cancellation response pending count*/
            $cancellation_aboutYou_count=$this->mobile_model->cancellation_aboutYou_count($user_id);
            $cancel_byYou_count= $this->mobile_model->cancel_byYou_count($user_id);

            /*Get count of dispute status pending, processing, completed, rejected */
            $dispute_aboutYou_count = $this->mobile_model->get_all_details(DISPUTE,array('disputer_id'=>$user_id,'status'=>'Pending','cancel_status'=>0));

            $dispute_byYou_count = $this->mobile_model->get_all_details(DISPUTE,array('user_id'=>$user_id,'status'=>'Pending','cancel_status'=>0));
            $payout[] = array("accname"=>$accname,"accno"=>$accno,"bankname"=>$bankname);
            $notify[] = array("reservation_request"=>$notifications,"email_notifications"=>$email_notifications);
            $privacy[] = array("search_by_profile"=>$search_by_profile,"social_recommend"=>$social_recommend);
            $trust[] = array("phone_verified"=>$phone_verified,"email_id_verified"=>$email_id_verified,"country"=>intval($country),"phone"=>$view->row()->phone_no,"linkedin_connect"=>$linkedin_connect,"facebook_connect"=>$facebook_connect,"google_connect"=>$google_connect);
            $detail[] = array("id"=>intval($view->row()->id),"firstname"=>$view->row()->firstname,"lastname"=>$view->row()->lastname,"email"=>$view->row()->email,"phone_no"=>$view->row()->phone_no,"gender"=>$gender,"dob"=>$date.$month.$year,"live"=>$view->row()->address,"describe"=>$view->row()->description,"school"=>$view->row()->school,"work"=>$view->row()->work,"language"=>$view->row()->language,"country"=>intval($country),"search_by_profile"=>$search_by_profile,"social_recommend"=>$social_recommend,"accname"=>$accname,"accno"=>$accno,"bankname"=>$bankname,"notifications"=>$notifications,"email_notifications"=>$email_notifications,"user_image"=>$img,"where_you_live"=>$view->row()->address,"description"=>$view->row()->description,"dob_date"=>$date,"dob_month"=>$month,"dob_year"=>$year, 'cancellation_aboutYou_count'=>$cancellation_aboutYou_count->num_rows(),
                'cancellation_byYou_count'=>$cancel_byYou_count->num_rows(),
                'dispute_aboutYou_count'=>$dispute_aboutYou_count->num_rows(),
                'dispute_byYou_count'=>$dispute_byYou_count->num_rows(),
                'overAll_unread_count'=>$overAll_unread_count,);
            /* Reviews starts here */
            $Review_about_you = $this->mobile_model->get_productreview_aboutyou($user_id);
            $Review_by_you = $this->mobile_model->get_productreview_byyou($user_id);
            $rev_abt_you = array();
            $rev_by_you = array();
            if($Review_about_you->num_rows() >0) {
                foreach($Review_about_you->result() as $rau) {
                    if($rau->image != ''){
                        if($rau->loginUserType == 'google'){
                            $userimg = $rau->image;
                        } else {
                            $userimg = base_url().'images/users/'.$rau->image;
                        }
                    }else{
                        $userimg = base_url().'images/users/profile.png';
                    }
                    if($rau->email !=""){ $email=$rau->email;} else { $email="";}
                    if($rau->review !=""){ $review=$rau->review;} else { $review="";}
                    /*$rev_abt_you[] = array("review"=>$review,"review_email"=>$email,"star_rating"=>$rau->total_review,"user_image"=>$userimg);*/
                    $rev_abt_you[] = array(
                        "id"=>$rau->review_id,
                        "reviewer_id"=>$rau->reviewer_id,
                        "review_property_id"=>$rau->property_id,
                        "review_booking_no"=>$rau->bookingno,
                        "review_property_name"=>$rau->product_name,
                        "reviewer_name"=>$rau->reviewer_name,
                        "reviewer_comments"=>$rau->review,
                        "reviewer_rating"=>$rau->total_review,
                        "reviwer_image"=>$userimg,
                        "review_date"=>$rau->dateAdded);
                }
            }
            if($Review_by_you->num_rows() >0) {
                foreach($Review_by_you->result() as $rbu) {
                    if($rbu->image != ''){
                        if($rbu->loginUserType == 'google'){
                            $userimg = $rbu->image;
                        } else {
                            $userimg = base_url().'images/users/'.$rbu->image;
                        }
                    }else{
                        $userimg = base_url().'images/users/profile.png';
                    }
                    if($rbu->email !=""){ $email=$rbu->email;} else { $email="";}
                    if($rbu->review !=""){ $review=$rbu->review;} else { $review="";}
                    /*$rev_by_you[] = array("review"=>$review,"review_email"=>$email,"star_rating"=>$rbu->total_review,"user_image"=>$userimg);*/
                    $rev_by_you[] = array(
                        "id"=>$rbu->review_id,
                        "reviewer_id"=>$rbu->reviewer_id,
                        "review_property_id"=>$rbu->property_id,
                        "review_booking_no"=>$rbu->bookingno,
                        "review_property_name"=>$rbu->product_name,
                        "reviewer_name"=>$rbu->reviewer_name,
                        "reviewer_comments"=>$rbu->review,
                        "reviewer_rating"=>$rbu->total_review,
                        "reviwer_image"=>$userimg,
                        "review_date"=>$rbu->dateAdded);
                }
            }
            //$review = array('reviews_about_you'=>$rev_abt_you,'reviews_by_you'=>$rev_by_you);
            /* Review Ends here */
            /* Dispute starts here */
            $Dispute_about_you = $this->mobile_model->get_productdispute_aboutyou($user_id);
            $Dispute_by_you = $this->mobile_model->get_productdispute_byyou($user_id);
            $Dis_abt_you = array();
            $Dis_by_you = array();
            if($Dispute_about_you->num_rows() >0) {
                foreach($Dispute_about_you->result() as $dau) {
                    if($dau->image != ''){
                        if($dau->loginUserType == 'google'){
                            $userimg = $dau->image;
                        } else {
                            $userimg = base_url().'images/users/'.$dau->image;
                        }
                    }else{
                        $userimg = base_url().'images/users/profile.png';
                    }
                    /*$Dis_abt_you[] = array("message"=>$dau->message,"review_email"=>$dau->email,"booking_no"=>$dau->booking_no,"user_image"=>$userimg);*/
                    $Dis_abt_you[] = array(
                        "dispute_id"=>$dau->id,
                        "message"=>$dau->message,
                        "rental_name"=>$dau->product_title,
                        "host_name"=>$dau->user_name,
                        "review_email"=>$dau->email,
                        "booking_no"=>$dau->booking_no,
                        "user_image"=>$userimg,
                        "created_date"=>$dau->created_date,
                        "checkout_date"=>date('Y-m-d',strtotime($dau->checkout)),
                        "status" => $dispute_status
                    );
                }
            }
            if($Dispute_by_you->num_rows() >0) {
                foreach($Dispute_by_you->result() as $dbu) {
                    if($dbu->image != ''){
                        if($dbu->loginUserType == 'google'){
                            $userimg = $dbu->image;
                        } else {
                            $userimg = base_url().'images/users/'.$dbu->image;
                        }
                    }else{
                        $userimg = base_url().'images/users/profile.png';
                    }
                    /*  $Dis_by_you[] = array("message"=>$dbu->message,"review_email"=>$dbu->email,"booking_no"=>$dbu->booking_no,"user_image"=>$userimg);*/
                    $Dis_by_you[] = array(
                        "dispute_id"=>$dbu->id,
                        "message"=>$dbu->message,
                        "rental_name"=>$dbu->product_title,
                        "host_name"=>$dbu->user_name,
                        "review_email"=>$dbu->email,
                        "booking_no"=>$dbu->booking_no,
                        "user_image"=>$userimg,
                        "checkout_date"=>date('Y-m-d',strtotime($dbu->checkout)),
                        "created_date"=>$dbu->created_date,
                        "status" => $dbu->status
                    );
                }
            }
            //$dispute = array('dispute_about_you'=>$Dis_abt_you,'dispute_by_you'=>$Dis_by_you);
            /* Dispute starts here */
            /* Country List starts here */
            /*cancellation section start*/
            $cancellation_about_you = $this->mobile_model->get_productcancellation_aboutyou($user_id);
            $cancellation_by_you = $this->mobile_model->get_productcancellation_byyou($user_id);

            $cancl_abt_you = array();
            $cancl_by_you = array();
            if($cancellation_about_you->num_rows() >0) {
                foreach($cancellation_about_you->result() as $dau) {
                    if($dau->image != ''){
                        if($dau->loginUserType == 'google'){
                            $userimg = $dau->image;
                        } else {
                            $userimg = base_url().'images/users/'.$dau->image;
                        }
                    }else{
                        $userimg = base_url().'images/users/profile.png';
                    }
                    if($dau->status == "Pending")
                    {
                        if(strtotime(date('Y-m-d')) < strtotime($dau->checkin)) {
                            $status = $dau->status;
                        }
                        else{
                            $status = "Pending Request Expired";
                        }
                    }else{
                        $status = $dau->status;
                    }
                    if($dau->user_name == "")
                    {
                        $user_name = "";
                    }
                    $cancl_abt_you[] = array(
                        "cancel_id"=>$dau->id,
                        "property_name"=>$dau->product_title,
                        "host_name"=>(($dau->user_name != "" ) ? $dau->user_name : ""),
                        "message"=>$dau->message,
                        "review_email"=>(($dau->email != "" ) ? $dau->email : ""),
                        "booking_no"=>$dau->booking_no,
                        "user_image"=>$userimg,
                        "checkin_date"=>$dau->checkin,
                        "created_date"=>$dau->created_date,
                        "status" => $status);
                }
            }
            if($cancellation_by_you->num_rows() >0) {
                foreach($cancellation_by_you->result() as $dbu) {
                    if($dbu->image != ''){
                        if($dbu->loginUserType == 'google'){
                            $userimg = $dbu->image;
                        } else {
                            $userimg = base_url().'images/users/'.$dbu->image;
                        }
                    }else{
                        $userimg = base_url().'images/users/profile.png';
                    }
                    if($dbu->status == "Pending")
                    {
                        if($dbu->checkin < date("Y-m-d"))//23 < 24
                        {
                            $cancel_by_status = "Pending Request Expired";
                        }else{
                            $cancel_by_status = $dbu->status;
                        }

                    }else{
                        $cancel_by_status = $dbu->status;
                    }
                    $cancl_by_you[] = array(
                        "cancel_id"=>$dbu->id,
                        "property_name"=>$dbu->product_title,
                        "host_name"=>$dbu->user_name,
                        "message"=>$dbu->message,
                        "review_email"=>$dbu->email,
                        "booking_no"=>$dbu->booking_no,
                        "user_image"=>$userimg,
                        "checkin_date"=>$dbu->checkin,
                        "created_date"=>$dbu->created_date,
                        "status"=>$cancel_by_status);
                }
            }
            /*cancellation section start*/
            $country_list = array();
            $country_query='SELECT id,name FROM '.LOCATIONS.' WHERE status="Active" order by name';
            $active_countries = $this->mobile_model->ExecuteQuery($country_query);
            if($active_countries->num_rows() >0) {
                foreach($active_countries->result() as $cntry) {
                    $country_list[] = array("id"=>intval($cntry->id),"country_name"=>$cntry->name);
                }
            }
            /*  Country List ends here */
            /*  Property List starts here */
            $rentalDetail = $this->mobile_model->get_dashboard_list ( $userid,Publish);
            $listingarr = array();
            if($rentalDetail->num_rows() >0) {
                foreach($rentalDetail->result() as $r) {
                    if($r->product_image != ''){
                        $p_img = explode('.',$r->product_image);
                        $suffix = strrchr($r->product_image, ".");
                        $pos = strpos  ( $r->product_image  , $suffix);
                        $name = substr_replace ($r->product_image, "", $pos);
                        // echo $suffix . "<br><br>". $name;
                        $pro_img = $name.''.$suffix;
                        $proImage = base_url().'images/rental/'.$pro_img;
                    }else{
                        $proImage = base_url().'images/rental/dummyProductImage.jpg';
                    }
                    $listingarr[] = array("property_id"=>intval($r->id),"property_title"=>$r->product_title,"property_image"=>$proImage,'property_address'=>$r->address);
                }
            }
            /*  Property List ends here */
            /*Host Cancellation*/
            $host_cancel_details = array();
            $cancel_details = $this->mobile_model->get_host_calcelled_bookings($user_id);
            foreach($cancel_details->result() as $host)
            {
                /*Get currency symbol*/
                $condition = array('currency_type'=>$currency_code);
                $paid_currency_details = $this->mobile_model->get_all_details(CURRENCY,$condition );
                //print_r($paid_currency_details->result());exit;
                $currencySymbol = $paid_currency_details->row()->currency_symbols;
                $currencyCronId = $host->currency_cron_id;
                $user_currencycode = $host->user_currencycode;

                /*cancellation amount*/
                if ($user_currencycode != $currency_code)
                { $Paid = changeCurrency($user_currencycode,$currency_code,$host->paid_cancel_amount,$currencyCronId);
                } else {   $Paid = $host->paid_cancel_amount;
                }

                /*Paid Amount*/
                if ($host->paid_canel_status == 1)
                { if ($user_currencycode != $currency_code)
                { $Paid_amt = changeCurrency($user_currencycode,$currency_code,$host->paid_cancel_amount,$currencyCronId);
                }else{  $Paid_amt = $host->paid_cancel_amount; }
                    $paid_amt_total = $currencySymbol . ' ' . $Paid_amt;
                }
                else
                {
                    $paid_amt_total = $currencySymbol . ' ' . "0.00";
                }
                /*balance amount*/
                if ($host->paid_canel_status == 0)
                { if ($user_currencycode != $currency_code)
                { $amount = changeCurrency($user_currencycode,$currency_code,$host->paid_cancel_amount,$currencyCronId);
                } else{ $amount = $host->paid_cancel_amount; }
                    $bal_amt = $currencySymbol . ' ' . $amount;
                }
                else
                { $bal_amt = $currencySymbol . '' . "0.00";}
                if($host->product_image != ''){
                    $p_img = explode('.',$host->product_image);
                    $suffix = strrchr($host->product_image, ".");
                    $pos = strpos  ( $host->product_image  , $suffix);
                    $name = substr_replace ($host->product_image, "", $pos);
                    // echo $suffix . "<br><br>". $name;
                    $pro_img = $name.''.$suffix;
                    $proImage = base_url().'images/rental/'.$pro_img;
                }else{
                    $proImage = base_url().'images/rental/dummyProductImage.jpg';
                }
                if ($host->paid_canel_status == 0)
                {
                    $paid_canel_status = "Pending" ;
                }
                else
                {
                    $paid_canel_status = "Paid" ;

                }

                $host_cancel_details[] = array(
                    'product_title'     => $host->product_title,
                    'booking_no'        => $host->booking_no,
                    'paid_amount'=>$paid_amt_total ,
                    'cancellation_amount'=> $currencySymbol . ' ' . $Paid,
                    'balance_amount'=> $bal_amt,
                    'paid_status'=> $paid_canel_status,
                    'bookedDate'=> $host->bookedDate,
                    'checkin'=> date('M d,Y',strtotime($host->checkin)),
                    'checkout'=> date('M d,Y',strtotime($host->checkout)),
                    'currencycode'=> $host->currencycode,
                    'user_image'=> $proImage
                );
            }
            //$json_encode = json_encode(array("status"=>1,"message"=>"Successfully Updated","profileinfo"=>$detail,"notifications"=>$notify,"payout_perference"=>$payout,"privacy"=>$privacy,"trust_verify"=>$trust));
            $json_encode = json_encode(array(
                "status"=>1,"message"=>
                    "Successfully Updated","profileinfo"=>$detail,
                "trust_verify"=>$trust,
                'reviews_about_you'=>$rev_abt_you,
                'reviews_by_you'=>$rev_by_you,
                'dispute_about_you'=>$Dis_abt_you,
                'dispute_by_you'=>$Dis_by_you,
                'cancellation_about_you'=>$cancl_abt_you,
                'cancellation_by_you'=>$cancl_by_you,
                'host_cancellation'=>$host_cancel_details,
                "country_list"=>$country_list,
                "property_listing"=>$listingarr));
        }else{
            $json_encode = json_encode(array("status"=>0,"message"=>'Failed',"profileinfo"=>$detail,"trust_verify"=>$trust,'reviews_about_you'=>$rev_abt_you,'reviews_by_you'=>$rev_by_you,'dispute_about_you'=>$Dis_abt_you,'dispute_by_you'=>$Dis_by_you,"country_list"=>$country_list,"property_listing"=>$listingarr));
        }
        echo $json_encode;
    }
    public function mobile_chat_new() {
        $user_email = $_POST['Email'];
        $rental_id = $_POST['p_id'];
        $message = $_POST['h_msg'];
        $receiverId = $_POST['h_id'];
        $condition = array('email'=>$user_email);
        $senderDetails = $this->mobile_model->get_all_details ( USERS, $condition );
        $senderId = $senderDetails->row()->id;
        $condition = array('id'=>$receiverId);
        $receiverDetails = $this->mobile_model->get_all_details ( USERS, $condition );
    }
    public function mobile_chat() {
        $user_email = $_POST['Email'];
        $rental_id = $_POST['p_id'];
        $message = $_POST['h_msg'];
        $host_id = $_POST['h_id'];
        $condition = array('email'=>$user_email);
        $useremail = $this->mobile_model->get_all_details ( USERS, $condition );
        $user_id = $useremail->row()->id;
        $condition4 = array('id'=>$rental_id);
        $productdetail = $this->mobile_model->get_all_details ( PRODUCT, $condition4);
        $pro_user_id = $useremail->row()->user_id;
        $condition2 = array('rental_id'=>$rental_id,'sender_id'=>$user_id);
        $sender = $this->mobile_model->get_all_details ( DISCUSSION, $condition2 );
        $condition3 = array('rental_id'=>$rental_id,'receiver_id'=>$user_id,'sender_id'=>$host_id);
        $receiver = $this->mobile_model->get_all_details (DISCUSSION, $condition3 );
        if($sender->num_rows() > 0) {
            $condition1 = array('id'=>$host_id);
            $key = $this->mobile_model->get_all_details ( USERS, $condition1 );
            $mobile_key = $key->row()->mobile_key;
            $ios_key = $key->row()->ios_key;
            $conid = $sender->row()->convId;
            $data = array(
                'rental_id'=>$rental_id,
                'sender_id'=>$user_id,
                'receiver_id'=>$host_id,
                'message'=>$message,
                'convId'=>$conid,
                'posted_by'=>$_POST['h_type']
            );
            $this->mobile_model->simple_insert(DISCUSSION,$data);
        }elseif($receiver->num_rows() > 0){
            $condition1 = array('id'=>$host_id);
            $key = $this->mobile_model->get_all_details ( USERS, $condition1 );
            $mobile_key = $key->row()->mobile_key;
            $ios_key = $key->row()->ios_key;
            $conid = $receiver->row()->convId;
            $data = array(
                'rental_id'=>$rental_id,
                'sender_id'=>$user_id,
                'receiver_id'=>$host_id,
                'message'=>$message,
                'convId'=>$conid,
                'posted_by'=>$_POST['h_type']
            );
            $this->mobile_model->simple_insert(DISCUSSION,$data);
            //echo "test";die;
        }else{
            $condition1 = array('id'=>$host_id);
            $key = $this->mobile_model->get_all_details ( USERS, $condition1 );
            $mobile_key = $key->row()->mobile_key;
            $ios_key = $key->row()->ios_key;
            $conid = time();
            $data = array(
                'rental_id'=>$rental_id,
                'sender_id'=>$user_id,
                'receiver_id'=>$host_id,
                'message'=>$message,
                'convId'=>$conid,
                'posted_by'=>$_POST['h_type']
            );
            $this->mobile_model->simple_insert(DISCUSSION,$data);
        }
        $condition1 = array('id'=>$user_id);
        $key = $this->mobile_model->get_all_details ( USERS, $condition1 );
        if($key->row()->image !=''){
            $userImage = $key->row()->image;
        }else{
            $userImage  = 'profile.jpg';
        }
        $userName = $key->row()->user_name;
        $pushStatus = "";
        if($mobile_key != ''){
            if(!empty($_GET["push"])) {
                $gcmRegID  = $mobile_key;
                $pushMessage = $message;
                if (isset($gcmRegID) && isset($pushMessage)) {
                    $gcmRegIds = array($gcmRegID);
                    $message = array("m" => $pushMessage,"k"=>'msg',"convId"=>$conid,"convName"=>$userName,"convImage"=>$userImage,"convRentalId"=>$rental_id,"convIHostId"=>$host_id);
                    $pushStatus = $this->sendPushNotificationToGCM($gcmRegIds, $message);
                }
            }
        }
        if($ios_key != ''){
            $message = array('message'=>$message);
            $this->push_notification($ios_key,$message);
        }
        $json_encode = json_encode(array('status'=>'successful'));
        echo $json_encode;
    }
    function sendPushNotificationToGCM($registatoin_ids, $message) {
        //Google cloud messaging GCM-API url
        $url = 'https://android.googleapis.com/gcm/send';
        $fields = array(
            'registration_ids' => $registatoin_ids,
            'data' => $message,
        );
        // Google Cloud Messaging GCM API Key
        define("GOOGLE_API_KEY", "AIzaSyD0VJs5nLcm0j34eHCIpP7I8iNI-yRycqo");
        $headers = array(
            'Authorization: key=' . GOOGLE_API_KEY,
            'Content-Type: application/json'
        );
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
        $result = curl_exec($ch);
        if ($result === FALSE) {
            die('Curl failed: ' . curl_error($ch));
        }
        curl_close($ch);
        return $result;
    }
    public function mobile_viewchat() {
        $user_email = $_GET['email'];
        $condition = array('email'=>$user_email);
        $useremail = $this->mobile_model->get_all_details ( USERS, $condition );
        $user_id = $useremail->row()->id;
        $this->db->select('d.message,d.receiver_id,d.sender_id,d.rental_id,d.convId,d.date_created,u.user_name,u.image,p.user_id');
        $this->db->from(DISCUSSION.' as d');
        $this->db->join(USERS.' as u' , 'u.id = d.receiver_id');
        $this->db->join(PRODUCT.' as p' , 'p.id = d.rental_id','LEFT');
        $this->db->where('d.sender_id',$user_id);
        $this->db->or_where('d.receiver_id',$user_id);
        $this->db->group_by('d.convId');
        $chat = $this->db->get();
        if($chat->num_rows() != 0) {
            foreach($chat->result() as $list)
            {
                $newChat[] = $list;
            }
            foreach($newChat as $key => $list)
            {
                $newMessages = $this->mobile_model->get_all_details(DISCUSSION, array('convId'=>$list->convId),array(array('field'=>'id','type'=>'desc')));
                $newChat[$key]->newMsg = $newMessages->row()->message;
                $newChat[$key]->newDate = $newMessages->row()->date_created;
            }
            foreach($newChat as $chatval) {
                if($chatval->image !=''){
                    $img = $chatval->image;
                }else{
                    $img  = 'profile.jpg';
                }
                if($user_id == $chatval->sender_id){
                    $hot = $chatval->receiver_id;
                }else{
                    $hot = $chatval->sender_id;
                }
                $CatArr[] = array("msg" =>$chatval->newMsg,"newMsg" =>$chatval->newMsg,"username"=>$chatval->user_name,"date"=>$chatval->newDate,"newDate"=>$chatval->newDate,"image"=>$img,'convId'=>$chatval->convId,'rental_id'=>$chatval->rental_id,'host_id'=>$hot);
            }
        }else{
            $CatArr = array();
        }
        $json_encode = json_encode(array("sender" => $CatArr));
        echo $json_encode;
    }
    public function mobile_detailchat() {
        $convId = $_GET['convId'];
        $condition = array('email'=>$_GET['email']);
        $useremail = $this->mobile_model->get_all_details ( USERS, $condition );
        $user_id = $useremail->row()->id;
        $this->db->select('d.message,d.sender_id,d.receiver_id,d.convId,d.posted_by,d.date_created');
        $this->db->from(DISCUSSION.' as d');
        $this->db->where('convId',$convId);
        $chat = $this->db->get();
        if($chat->num_rows() != 0) {
            foreach($chat->result() as $chatval) {
                if($chatval->image !=''){
                    $img = $chatval->image;
                }else{
                    $img  = 'profile.jpg';
                }
                $sender_id = $chatval->sender_id;
                $receiver_id = $chatval->receiver_id;
                $msgby='';
                if($user_id == $sender_id){
                    //$msgby='currentuser';
                    //echo $sender_id;
                    $detail = $this->mobile_model->get_all_details ( USERS, array ('id' => $sender_id));
                    //echo $detail->row()->email;
                }else{
                    //$msgby='receiver';
                    //echo $receiver_id;
                    $detail = $this->mobile_model->get_all_details ( USERS, array ('id' => $sender_id ));
                    //echo $detail->row()->email;die;
                }
                $CatArr[] = array("msg" =>$chatval->message,"username"=>$detail->row()->user_name,"date"=>$chatval->date_created,"image"=>$img,'convId'=>$chatval->convId,'post_by'=>$chatval->posted_by,'email'=>$detail->row()->email);
            }
        }else{
            $CatArr = array();
        }
        $json_encode = json_encode(array("sender" => $CatArr));
        echo $json_encode;
    }
    public function category(){
        $this->db->select('id,cat_name,image,rootID');
        $this->db->from(CATEGORY);
        $this->db->where('status','Active');
        $CategoryVal = $this->db->get();
        $CatArr = array();
        foreach($CategoryVal->result() as $catVal){
            if($catVal->image!=''){
                $catImage = $catVal->image;
            }else{
                $catImage = 'no_image.jpg';
            }
            $CatArr[] = array("id" => $catVal->id, "categoryName" => $catVal->cat_name,"image" =>'mb/'.$catImage,"catId"=>$catVal->rootID);
        }
        $json_encode = json_encode(array("categoryDetails" => $CatArr,"cartCount"=>(string)$this->data["cartCount"]));
        echo $json_encode;
    }
    public function product() {
        $catid=intval($_GET['catid']);
        $shopname=$_GET['shopname'];
        $shopId=0;
        if($shopname!="")   {
            $shopId=intval($this->mobile_model->get_sellerId($shopname));
        }
        $this->db->select('p.id,p.product_name,p.image,p.price,p.base_price,p.user_id,p.status,s.seller_businessname,s.seller_id,a.pricing');
        $this->db->from(PRODUCT.' as p');
        $this->db->join(SELLER.' as s' , 'p.user_id = s.seller_id');
        $this->db->join(SUBPRODUCT.' as a','p.id=a.product_id','left');
        if($catid>0){
            $run = "FIND_IN_SET('".$catid."', p.category_id)";
            $this->db->where($run);
        }
        $this->db->where('p.status','Publish');
        $this->db->where('p.pay_status','Paid');
        if($shopId>0){
            $this->db->where('p.user_id',$shopId);
        }
        $this->db->group_by('p.id');
        $productList = $this->db->get();
        $ProdArr = array();
        //$ProdArr[] = array('itemCount'=>$productList->num_rows());
        $i=1;
        foreach($productList->result() as $ProdList) {
            if($i<=20){
                $img=explode(',',$ProdList->image);
                #$price= $ProdList->base_price;
                $price= number_format($this->data["currencyValue"]*$ProdList->base_price,2);
                $favStatus = $this->mobile_model->get_all_details(FAVORITE,array('p_id'=>$ProdList->id,'user_id'=>$this->data["commonId"],'favorite'=>'Yes'))->num_rows();
                if($favStatus>0){$favStatus=1;}else{$favStatus=0;}
                $ProdArr[] = array("productId" => $ProdList->id,
                    "productName" => character_limiter($ProdList->product_name,15),
                    "Image" => 'mb/'.$img[0],
                    "Price" => $price,
                    "currencySymbol" =>$this->data["currencySymbol"],
                    "currencyCode" =>$this->data["currencyCode"],
                    "favStatus" =>(string)$favStatus,
                    "storeName" => $ProdList->seller_businessname,
                    "itemCount"=> (string)$productList->num_rows(),
                    "pagePos"=>'1');
                $i++;
            }else{
                break;
            }
        }
        $json_encode = json_encode(array("productDetails" => $ProdArr,"cartCount"=>(string)$this->data["cartCount"]));
        echo $json_encode;
    }
    public function mobile_pay_cal(){
        $date1 = $_GET['start'];
        $date2 = $_GET['end'];
        $diff = abs(strtotime($date2) - strtotime($date1));
        $years = floor($diff / (365*60*60*24));
        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
        $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
    }
    public function GetDays($sStartDate, $sEndDate)
    {
        $sStartDate = date("Y-m-d", strtotime($sStartDate));
        $sEndDate = date("Y-m-d", strtotime("-1 day", strtotime($sEndDate)));
        $aDays[] = $sStartDate;
        $sCurrentDate = $sStartDate;
        while($sCurrentDate < $sEndDate)
        {
            $sCurrentDate = date("Y-m-d", strtotime("+1 day", strtotime($sCurrentDate)));
            $aDays[] = $sCurrentDate;
        }
        return $aDays;
    }
    public function mobile_price_calculation(){
        $productId = $_GET['P_Id'];
        $startDate = $_GET['s_date'];
        $endDate = $_GET['e_date'];
        $CalendarDateArr = $this->GetDays($startDate, $endDate);
        $this->data['productPriceDetails'] = $this->mobile_model->get_all_details(PRODUCT,array('id'=>$productId));
        $price = $this->data['productPriceDetails']->row()->price;
        $currency = 1;
        $currencySymbol = '$';
        if($_GET['code'] && $_GET['code'] != '')
        {
            $this->data['currencyDetails'] = $this->mobile_model->get_all_details(CURRENCY,array('currency_type'=>$_GET['code']));
            if($this->data['currencyDetails']->num_rows() == 1){
                $currency = $this->data['currencyDetails']->row()->currency_rate;
                $currencySymbol = $this->data['currencyDetails']->row()->currency_symbols;
            }
        }
        $price = $price*$currency;
        $jsonReturn['perNight'] = $currencySymbol.$price;
        foreach($CalendarDateArr as $CalendarDateRow){
            $CalendarTimeDateArr = explode(' GMT',$CalendarDateRow);
            $sadfsd=trim($CalendarTimeDateArr[0]);
            $startDate = strtotime($sadfsd);
            $result[] =  date("Y-m-d",$startDate);
        }
        $jsonReturn['totalNights'] = count($result) > 1 ? count($result).' nights' : count($result).' night';
        $DateCalCul=0;
        $this->data['ScheduleDatePrice'] = $this->mobile_model->get_all_details(SCHEDULE,array('id'=>$productId));
        if($this->data['ScheduleDatePrice']->row()->data !=''){
            $dateArr=json_decode($this->data['ScheduleDatePrice']->row()->data);
            $finaldateArr=(array)$dateArr;
            foreach($result as $Rows){
                if (array_key_exists($Rows, $finaldateArr)) {
                    $DateCalCul = $DateCalCul+$finaldateArr[$Rows]->price;
                }else{
                    $DateCalCul = $DateCalCul+$price;
                };
            }
        }else{
            $DateCalCul = (count($result) * $price);
        }
        $jsonReturn['total'] = $currencySymbol.$DateCalCul;
        $service_tax_query='SELECT * FROM '.COMMISSION.' WHERE commission_type="Guest Booking" AND status="Active"';
        $service_tax = $this->mobile_model->ExecuteQuery($service_tax_query);
        if($service_tax->num_rows()==0){
            $tax = 0;
        }
        else if($service_tax->row()->promotion_type=='flat'){
            $tax = $service_tax->row()->commission_percentage*$currency;
        }
        else{
            $tax = number_format((($DateCalCul * $service_tax->row()->commission_percentage)/100)*$currency, 2);
        }
        $jsonReturn['tax'] = $currencySymbol.$tax;
        $jsonReturn['grandTotal'] = $currencySymbol.($DateCalCul+$tax);
        echo json_encode($jsonReturn);
    }
    /* Book Property for Rental */
    public function mobile_host_request(){
        $productId = $_POST['P_Id'];
        $startDate = $_POST['s_date'];
        $endDate = $_POST['e_date'];
        $guestEmail = $_POST['email'];
        $currency_code = $_POST['currency_code'];
        $message = $_POST['message'];
        if($productId =="" || $startDate =="" || $endDate =="" ||$guestEmail =="" || $currency_code =="") {
            $jsonReturn = array("status"=>0,"message"=>"Your request has failed!");
            echo json_encode($jsonReturn);
            exit;
        }
        $this->data['guestDetails'] = $this->mobile_model->get_all_details(USERS,array('email'=>$guestEmail));
        $this->data['productPriceDetails'] = $this->mobile_model->get_all_details(PRODUCT,array('id'=>$productId));
        if($this->data['productPriceDetails']->num_rows() ==0) {
            $jsonReturn = array("status"=>0,"message"=>"Your request has failed!");
            echo json_encode($jsonReturn);
            exit;
        }
        if($this->data['guestDetails']->num_rows() ==0) {
            $jsonReturn = array("status"=>0,"message"=>"Your request has failed!");
            echo json_encode($jsonReturn);
            exit;
        }
        $userId = $this->data['guestDetails']->row()->id;
        $phone_no = $this->data['guestDetails']->row()->phone_no;
        $guest_firebase_token = $this->data['guestDetails']->row()->firebase_token;
        $guests = $_POST['guests'];
        $CalendarDateArr = $this->GetDays($startDate, $endDate);
        if($this->data['productPriceDetails']->row()->currency != $currency_code)
        {
            $price = currency_conversion($this->data['productPriceDetails']->row()->currency,$currency_code,$this->data['productPriceDetails']->row()->price);
            //$security_deposit = convertCurrency($this->data['productPriceDetails']->row()->currency,$currency_code,$this->data['productPriceDetails']->row()->security_deposit);
            $security_deposit = currency_conversion($this->data['productPriceDetails']->row()->currency,$currency_code,$this->data['productPriceDetails']->row()->security_deposit);
        }
        else{
            $price = $this->data['productPriceDetails']->row()->price;
            $security_deposit  = $this->data['productPriceDetails']->row()->security_deposit;
        }
        //$price = $this->data['productPriceDetails']->row()->price;
        $sellerId = $sellerId = $this->data['productPriceDetails']->row()->user_id;
        $this->data['hostDetails'] = $this->mobile_model->get_all_details(USERS,array('id'=>$sellerId));
        $host_firebase_token = $this->data['hostDetails']->row()->firebase_token;
        $currency = 1;
        $currencySymbol = '';
        $checkIn = date('Y-m-d H:i:s', strtotime($startDate));
        $checkOut = date('Y-m-d H:i:s', strtotime($endDate));
        $price = $price*$currency;
        foreach($CalendarDateArr as $CalendarDateRow){
            $CalendarTimeDateArr = explode(' GMT',$CalendarDateRow);
            $sadfsd=trim($CalendarTimeDateArr[0]);
            $startDate = strtotime($sadfsd);
            $result[] =  date("Y-m-d",$startDate);
        }
        $totalNights = count($result) > 1 ? count($result).' nights' : count($result).' night';
        $DateCalCul=0;
        $this->data['ScheduleDatePrice'] = $this->mobile_model->get_all_details(SCHEDULE,array('id'=>$productId));
        if($this->data['ScheduleDatePrice']->row()->data !=''){
            $dateArr=json_decode($this->data['ScheduleDatePrice']->row()->data);
            $finaldateArr=(array)$dateArr;
            foreach($result as $Rows){
                if (array_key_exists($Rows, $finaldateArr)) {
                    if($this->data['productPriceDetails']->row()->currency != $currency_code)
                    {
                        //$price1 = convertCurrency($this->data['productPriceDetails']->row()->currency,$currency_code,$finaldateArr[$Rows]->price);
                        $price1 = currency_conversion($this->data['productPriceDetails']->row()->currency,$currency_code,$finaldateArr[$Rows]->price);
                    }
                    else{
                        $price1 = $finaldateArr[$Rows]->price;
                    }
                    $DateCalCul = $DateCalCul+$price1;
                }else{
                    $DateCalCul = $DateCalCul+$price;
                };
            }
        }else{
            $DateCalCul = (count($result) * $price);
        }
        $service_tax_query='SELECT * FROM '.COMMISSION.' WHERE commission_type="Guest Booking" AND status="Active"';
        $service_tax = $this->mobile_model->ExecuteQuery($service_tax_query);
        if($service_tax->num_rows()==0){
            $tax = 0;
        }
        else if($service_tax->row()->promotion_type=='flat'){
            $tax = $service_tax->row()->commission_percentage*$currency;
        }
        else{
            $t = number_format((($DateCalCul * $service_tax->row()->commission_percentage)/100)*$currency, 2);
            $tax = str_replace(',', '', $t);
        }
        $grandTotal = $DateCalCul+$tax+$security_deposit;
        $currencyCronId = $this->db->select('curren_id')->where('created_date',date('Y-m-d'))->get(CURRENCY_CRON)->row()->curren_id;
        if($currencyCronId=='') { $currencyCronId=0; }
        $dataArr = array(
            'user_id' => $userId,
            'prd_id' => $productId,
            'checkin' => $checkIn,
            'checkout' => $checkOut,
            'caltophone' => $phone_no,
            'NoofGuest' => $guests,
            'renter_id' => $sellerId,
            'numofdates' => $totalNights,
            'serviceFee' => $tax,
            'subTotal' => $DateCalCul,
            'totalAmt' => $grandTotal,
            'phone_no' => $phone_no,
            'currencycode' => $this->data['productPriceDetails']->row()->currency,
            'user_currencycode' => $currency_code,
            'currency_cron_id' => $currencyCronId,
            'booking_status' => 'Pending',
            'secDeposit' => $security_deposit,
            'approval' => 'Pending'
        );
        /*echo '<pre>';print_r($dataArr); die;*/
        $this->db->insert(RENTALENQUIRY, $dataArr);
        $insertid = $this->db->insert_id ();
        $val = 1500000+$insertid;
        $bookingno ="EN".$val;
        $newdata = array ('Bookingno' => $bookingno);
        $condition = array ('id' => $insertid);
        $this->mobile_model->update_details (RENTALENQUIRY,$newdata,$condition);
        $message = $_POST['message'];
        $dataArr = array('productId' => $productId, 'bookingNo' => $bookingno, 'senderId' => $userId, 'receiverId' => $sellerId, 'subject' => 'Booking Request : '.$bookingno, 'message' => $message,"dateAdded"=>date('Y-m-d H:i:s'));
        $this->user_model->simple_insert(MED_MESSAGE, $dataArr);
        /* Mail function start */
        $id = $insertid;
        $this->data['bookingmail'] = $this->mobile_model->getbookeduser_detail($id);
        $currencycd = $currency_code;
        $this->data['hostdetail'] = $this->mobile_model->get_all_details(USERS,array('id'=>$this->data['bookingmail']->row()->renter_id));
        $hostemail = $this->data['hostdetail']->row()->email;
        $hostname = $this->data['hostdetail']->row()->user_name;
        $price = $this->data['bookingmail']->row()->price * $this->data['bookingmail']->row()->noofdates+$this->data['bookingmail']->row()->secDeposit;
        $checkindate = date('d-M-Y',strtotime($this->data['bookingmail']->row()->checkin));
        $checkoutdate = date('d-M-Y',strtotime($this->data['bookingmail']->row()->checkout));
        $newsid = '16';
        $template_values = $this->mobile_model->get_newsletter_template_details ( $newsid );
        if ($template_values ['sender_name'] == '' && $template_values ['sender_email'] == '') {
            $sender_email = $this->config->item ( 'site_contact_mail' );
            $sender_name = $this->config->item ( 'email_title' );
        } else {
            $sender_name = $template_values ['sender_name'];
            $sender_email = $template_values ['sender_email'];
        }
        $hostCurrencySymbol = $this->db->select('*')->from('fc_currency')->where('currency_type = ', $this->data['bookingmail']->row()->user_currencycode)->get()->row()->currency_symbols;
        if($this->data['bookingmail']->row()->currencycode!=$this->data['bookingmail']->row()->user_currencycode)
        {
            $host_TotalAmount = currency_conversion($this->data['bookingmail']->row()->user_currencycode,$this->data['bookingmail']->row()->currencycode,$this->data['bookingmail']->row()->totalAmt);
        }
        else
        {
            $host_TotalAmount = $this->data['bookingmail']->row()->totalAmt;
        }
        $Booking_info = array('travellername' => $this->data['bookingmail']->row()->name, 'checkindate'=>$checkindate, 'checkoutdate' => $checkoutdate, 'singleNightPrice' => $this->data['bookingmail']->row()->price, 'totalprice' => $host_TotalAmount, 'email_title' => $sender_name ,'currencySymbol' =>$hostCurrencySymbol, 'currencycode'=>$currencycd,'logo'=>$this->data['logo'],'booking_no'=>$this->data['bookingmail']->row()->Bookingno);
        $message = $this->load->view('newsletter/BookInfo'.$newsid.'.php',$Booking_info,TRUE);
        $email_values = array (
            'mail_type' => 'html',
            'from_mail_id' => $sender_email,
            'mail_name' => $sender_name,
            'to_mail_id' => $hostemail,
            'subject_message' => $template_values['news_subject'],
            'body_messages' => $message
        );
        //print_r($Booking_info); echo '<hr>'; print_r($email_values); echo '<hr>'.$message; exit;
        //send mail
        $this->load->library('email');
        $this->email->from($email_values['from_mail_id'], $sender_name);
        $this->email->to($email_values['to_mail_id']);
        $this->email->subject($email_values['subject_message']);
        $this->email->set_mailtype("html");
        $this->email->message($message);
        try{
            $this->email->send();
        }catch(Exception $e) {
            echo $e->getMessage();
        }
        /* Mail function end */
        $hostDetails = $this->mobile_model->get_all_details(USERS,array('id'=>$sellerId));
        $gcmRegID  = $hostDetails->row()->mobile_key;
        $pushMessage = 'Your property '.$this->data['productPriceDetails']->row()->product_title.' was booked by '.$this->data['guestDetails']->row()->user_name;
        /*Firebase Notification*/
        if($guest_firebase_token != '')
        {
            error_reporting(-1);
            ini_set('display_errors', 'On');
            require_once __DIR__ . '/firebase.php';
            require_once __DIR__ . '/push.php';
            $firebase = new Firebase();
            $push = new Push();
            // optional payload
            $payload = array();
            // notification title
            $title = 'Property Booking Request';
            // notification message
            $user_body = 'Successfully booked the property '.$this->data['productPriceDetails']->row()->product_title;
            $host_body = $pushMessage;
            // push type - single user / topic
            $push_type = isset($_GET['push_type']) ? $_GET['push_type'] : '';
            // whether to include to image or not
            $include_image = TRUE;
            $push->setTitle($title);
            $push->setMessage($message);
            $push->setImage('https://api.androidhive.info/images/minion.jpg');
            $push->setIsBackground(FALSE);
            $push->setPayload($payload);
            $json = '';
            $user_firebase_response = '';
            /*notifcation for User*/
            $user_regId = $guest_firebase_token;
            $user_json = $push->getPush($user_regId);
            $user_firebase_response = $firebase->send($user_regId, $user_json, $title, $user_body);
            /*notifcation for Host*/
            $host_firebase_response = '';
            if($host_firebase_token !=''){
                $host_regId = $host_firebase_token;
                $host_json = $push->getPush($host_regId);
                $host_firebase_response = $firebase->send($host_regId, $host_json, $title, $host_body);
            }
        }
        /*End Firebase Notification*/
        /* if (isset($gcmRegID) && isset($pushMessage)) {
      $gcmRegIds = array($gcmRegID);
      $message = array("m" => $pushMessage, "k"=>'Your Reservation');
      $pushStatus = $this->sendPushNotificationToGCM($gcmRegIds, $message);
    } */
        if($insertid > 0)
        {
            $jsonReturn = array("status"=>1,"message"=>"Your request has been sent to Host successfully!","user_firebase_response"=>$user_firebase_response,"host_firebase_response"=>$host_firebase_response);
        }
        else
        {
            $jsonReturn = array("status"=>0,"message"=>"Your request has failed!");
        }
        echo json_encode($jsonReturn);
    }
    /* Your Trips */
    public function mobile_your_trips(){
        $guestEmail = $_POST['email'];
        $user_currencyCode = $_POST['currency_code'];
        $keyword = "";
        $payment_gateway = $this->mobile_model->get_all_details(PAYMENT_GATEWAY, array());
        foreach ($payment_gateway->result() as $gateway)
        {
            if($gateway->id == '1'){
                $Paypal_status =$gateway->status;
            }else if($gateway->id == '3'){
                $Stripe_status =$gateway->status;
            }else{
                $Credit_Card_status =$gateway->status;
            }


        }
        if ($_POST) {
            $keyword = $this->input->post ('product_title');
        }
        $this->data['guestDetails'] = $this->mobile_model->get_all_details(USERS,array('email'=>$guestEmail));
        $userId = $this->data['guestDetails']->row()->id;
        $this->db->select('pb.expiredate,pb.product_id,pn.zip as post_code,pn.address as prd_address, pn.street as apt, pp.product_image, pn.country as country_name, pn.state as state_name, pn.city as city_name, p.product_name,p.product_title,p.price,p.currency, u.firstname,u.image, rq.booking_status, rq.checkin, rq.currencycode,rq.currency_cron_id,rq.checkout, rq.dateAdded, rq.user_id as GestId, rq.renter_id, rq.serviceFee, rq.totalAmt, rq.approval as approval, rq.id as cid, rq.Bookingno as bookingno,rq.numofdates,rq.subTotal,rq.secDeposit,rq.NoofGuest, p.cancellation_policy,p.cancel_percentage,p.house_rules,gu.email as Guestemail,rq.user_currencycode,pay.is_wallet_used,pay.is_coupon_used,pay.wallet_Amount,pay.discount,pay.dval,pay.total_amt,pay.currency_code,pay.status as pay_status');
        $this->db->from(RENTALENQUIRY.' as rq');
        $this->db->join(PRODUCT_BOOKING.' as pb' , 'pb.product_id = rq.prd_id', 'left');
        $this->db->join(PRODUCT_ADDRESS_NEW.' as pn' , 'pn.productId = pb.product_id','left');
        $this->db->join(PRODUCT.' as p' , 'p.id = rq.prd_id','left');
        $this->db->join(PRODUCT_PHOTOS.' as pp' , 'p.id = pp.product_id','left');
        $this->db->join(USERS.' as u' , 'u.id = rq.renter_id');
        $this->db->join(USERS.' as gu' , 'gu.id = rq.user_id');
        $this->db->join(PAYMENT . ' as pay', 'pay.EnquiryId = rq.id', 'left');
        $this->db->where('rq.user_id = '.$userId);
        //$this->db->where('DATE(rq.checkout) > ', date('"Y-m-d H:i:s"'), FALSE);
        if($keyword !="")
        {
            $this->db->like('p.product_title',$keyword);
            $this->db->or_like('u.firstname',$keyword);
            $this->db->or_like('pn.address',$keyword);
        }else{
            $this->db->where('rq.booking_status != "Enquiry"');
        }
        $this->db->group_by('rq.id');
        $this->db->order_by('rq.dateAdded', 'desc');
        $this->data['tripDetails'] = $trip_details = $this->db->get();
        /* print_r($this->data['tripDetails']->result()); die();*/
        $tripDetails['yourTrips'] = array();
        $my_trips =array();
        if($trip_details->num_rows()>0)
        {
            foreach($trip_details->result() as $trip)
            {
                if($trip->product_image != '')
                {
                    $p_img = explode('.',$trip->product_image);
                    $suffix = strrchr($trip->product_image, ".");
                    $pos = strpos  ( $trip->product_image  , $suffix);
                    $name = substr_replace ($trip->product_image, "", $pos);
                    // echo $suffix . "<br><br>". $name;
                    $pro_img = $name.''.$suffix;
                    $proImage = base_url().'images/rental/'.$pro_img;
                }else{
                    $proImage = base_url().'images/rental/dummyProductImage.jpg';
                }
                if($trip->firstname != ''){
                    $host_name = $trip->firstname;
                } else {
                    $host_name ="";
                }
                if($trip->house_rules != ''){
                    $house_rules = $trip->house_rules;
                } else {
                    $house_rules ="None";
                }
                if(($trip->checkout) > date("Y-m-d H:i:s")) {
                    $is_previous = false;
                } else if(($trip->checkout) <= date("Y-m-d H:i:s")) {
                    $is_previous = true;
                }
                $cancel_show_status = false;
                $is_canceled = false;
                $condition = array('currency_type'=>$trip->currency);
                $property_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                $property_currency_symbol = $property_currency_details->row()->currency_symbols;
                $conditionrq = array('currency_type'=>$trip->currencycode);
                $paid_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $conditionrq );
                $paid_currency_symbol = $paid_currency_details->row()->currency_symbols;
                $condition_new = array('currency_type' => $user_currencyCode);
                $user_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition_new );
                $user_currency_symbol = $user_currency_details->row()->currency_symbols;
                $cur_date = date("Y-m-d H:i:s");
                $secDeposit = floatval($trip->secDeposit);
                $total = $trip->subTotal + $trip->secDeposit +$trip->serviceFee;
                $reviewData = $this->mobile_model->get_trip_review($trip->bookingno,$userId);
                if($reviewData->num_rows()==0){
                    $is_review =false;
                } else {
                    $is_review =true;
                }
                $condtn = array('user_id'=>$userId,'prd_id'=>$trip->product_id,'booking_no'=>$trip->bookingno);
                $dis_details = $this->mobile_model->get_all_details(DISPUTE, $condtn);
                /*if($dis_details->num_rows() == 0){
                    $is_dispute=false;
                } else {
                    $is_dispute =true;
                }

                $is_canceled = false;
                if ($dis_details->row()->cancel_status == 1) {
                    $is_canceled = true;
                }*/


                /*Dispute & cancel Show Status*/
                $dispute_show_status = false;
                $review_show_status = false;
                $cancel_show_status = false;

                $time_val = date('Y-m-d');
                $check_in = date("Y-m-d", strtotime($trip->checkin));
                $dipute_day =$this->config->item('dispute_days');
                $after_day = strtotime("+" . $dipute_day . "days", strtotime($check_in));
                $out_date = date('Y-m-d', $after_day);

                $hideCancelDay = $this->config->item('cancel_hide_days_property');
                $totlessDays = $hideCancelDay + 1;
                $minus_checkin = strtotime("-" . $totlessDays . "days", strtotime($check_in));
                $checkinBeforeDay = date('Y-m-d', $minus_checkin);

                $date1=date_create($time_val);
                $date2=date_create($checkinBeforeDay);
                $diff_cancel_days=date_diff($date1,$date2);
                $date3=date_create($check_in);
                $date4=date_create($out_date);
                $diff_dispute_days=date_diff($date1,$date4);

                if ($dis_details->num_rows() == 0) {/*Not cencelled property*/
                    $cancel_status = "";
                    $is_canceled = false;
                    $is_dispute = false;
                    //$cancel_show_status = true;
                    $cancelled_by = "";

                    if($time_val >= $check_in) { /*dispute*/
                        if($diff_dispute_days->format("%d") <= $dipute_day)
                        {/*other month neglect from current month */
                            if($time_val < $out_date)
                            {
                                $dispute_show_status = true;
                            } else{
                                $dispute_show_status = false;
                            }

                        }else{
                            $dispute_show_status = false;
                        }

                    }else{/*cancel*/

                        if (($time_val) >= $check_in) {
                            $cancel_show_status = false;
                        }else{
                            if($time_val <= $checkinBeforeDay && $trip->is_wallet_used != "Yes" && $trip->is_coupon_used != 'Yes'){
                                $cancel_show_status = true;
                            }else{
                                $cancel_show_status = false;
                            }
                        }

                    }

                }else{/*If cancelled*/
                    $cancel_status = $dis_details->row()->status;
                    if($dis_details->row()->cancel_status == 1 ){

                        if($dis_details->row()->dispute_by == "Host" )/*cancel by host*/
                        {
                            // $cancel_show_status = true;
                            $is_canceled = true;
                            $cancelled_by = "Cancelled By Host";
                            $is_dispute = false;
                        }elseif($dis_details->row()->dispute_by == "" )/*cancel by guest*/
                        {
                            //$cancel_show_status = true;
                            $is_canceled = true;
                            $cancelled_by = "Cancelled By Guest";
                            $is_dispute = false;
                        }else{
                            //$cancel_show_status = true;
                            $is_canceled = false;
                            $cancelled_by ="";
                            $is_dispute = false;
                        }

                        if($cancel_status == "Reject")/*cancel rejected*/
                        {
                            //$cancel_show_status = true;
                            $is_canceled = true;
                            $is_dispute = false;
                        }else{ }


                    }
                    elseif($dis_details->row()->cancel_status == 0)
                    {
                        if($cancel_status == "Accept")
                        {
                            $is_dispute = false;
                        }else{
                            $is_dispute = true;
                        }
                    }else{
                        $is_dispute = true;
                    }
                }
                /*Dispute & cancel Show Status*/

                /*Review show status */
                if(($time_val) >= $check_in && $trip->booking_status == "Booked" && $trip->approval == "Accept" && $dis_details->row()->status != "Accept")
                {
                    $review_show_status = true;
                }else{
                    $review_show_status = false;
                }
                /***End***/

                /*Get coupon Price*/
                if ($trip->is_coupon_used == 'Yes') {
                    $currencySymbol;
                    $couponPrice = ($trip->total_amt - $trip->discount);
                    $is_coupon_used=$trip->is_coupon_used;
                    if ($user_currencyCode!=$trip->currency) {
                        $tot_coup = currency_conversion($trip->user_currencycode,$user_currencyCode,$couponPrice,$trip->currency_cron_id);
                    } else {
                        $tot_coup = currency_conversion($trip->currency,$user_currencyCode,$couponPrice,$trip->currency_cron_id);
                    }
                }else{
                    $tot_coup = "";
                    $is_coupon_used = "No";
                }
                /***End**/

                /*For Happy staying view status*/
                if($dis_details->num_rows() == 0 && $dis_details->row()->cancel_status == 0 && $dispute_show_status == false && $cancel_show_status == false){
                    if($time_val >= $check_in) {
                        $show_status = false;
                    }else{
                        $show_status = true;
                    }
                }else{
                    $show_status = false;
                }

                /*Added for Paypal conversion - only for paypal conversion - 3/3/2018*/
                if($user_currencyCode!=$trip->currency)
                {
                    $prop_price = currency_conversion($trip->currency,$user_currencyCode,$trip->price,$trip->currency_cron_id);
                }
                else
                {
                    $prop_price = $trip->price;
                }

                $totalAmount = ($trip->subTotal - $trip->wallet_Amount - $tot_coup) + $trip->serviceFee + $trip->secDeposit;

                if($user_currencyCode!=$trip->user_currencycode)
                {
                    $total = currency_conversion($trip->user_currencycode,$user_currencyCode,$totalAmount,$trip->currency_cron_id);
                    $secDeposit = currency_conversion($trip->user_currencycode,$user_currencyCode,$trip->secDeposit,$trip->currency_cron_id);
                    $serviceFee = currency_conversion($trip->user_currencycode,$user_currencyCode,$trip->serviceFee,$trip->currency_cron_id);
                    $sub_total = currency_conversion($trip->user_currencycode,$user_currencyCode,$trip->subTotal,$trip->currency_cron_id);
                }
                else
                {
                    $total = $totalAmount;
                    $secDeposit = $trip->secDeposit;
                    $serviceFee = $trip->serviceFee;
                    $sub_total = $trip->subTotal;
                }
                if($this->paypal_curency!=$user_currencyCode)
                {
                    $payable_paypal_total = currency_conversion($trip->user_currencycode,$this->paypal_curency,$trip->totalAmt,$trip->currency_cron_id);
                }
                else
                {
                    $payable_paypal_total = $trip->totalAmt;
                }
                /*if(trim($trip->currencycode) != $this->paypal_curency)
    {
    $payable_paypal_total= convertCurrency($trip->currencycode,$this->paypal_curency,floatval($total));
    $payable_paypal_symbol=$this->paypal_symbol;
    $payable_paypal_currency=$this->paypal_curency;
     }
     else{
    $payable_paypal_total= floatval($total);
    $payable_paypal_symbol=$paid_currency_symbol;
    $payable_paypal_currency=$trip->currencycode;
     }*/
                if( $this->data['guestDetails']->num_rows() != ''){
                    $wallet =  $this->data['guestDetails']->row()->referalAmount;
                    if($this->data['guestDetails']->row()->referalAmount_currency != $user_currencyCode)
                    {
                        $wallet_balance_amount = currency_conversion( $this->data['guestDetails']->row()->referalAmount_currency,$user_currencyCode, $wallet);
                    }else{
                        $wallet_balance_amount =  $wallet;
                    }
                }

                /**** Check pay status****/
                $is_booking_allowed_status = "";
                $restrict_dates=$this->mobile_model->booked_dates($trip->checkin,$trip->checkout,$trip->product_id);
                $paymentstatus = $this->mobile_model->get_all_details(PAYMENT, array('Enquiryid' => $trip->cid));
                if ($trip->approval == 'Accept' && ($paymentstatus->num_rows() == 0 || $paymentstatus->row()->status == 'Pending')) 
                { 
                    if(count($restrict_dates) == 0)
                    {
                        $is_booking_allowed_status = "allowed";
                    }else{
                        $is_booking_allowed_status = "not allowed";
                    }
                }
                /**end**/
                $my_trips[] = array(
                    "id"=>intval($trip->cid),
                    "property_title"=>$trip->product_title,
                    "property_price"=>floatval($prop_price),
                    "property_currency_code"=>$user_currencyCode,
                    "property_currency_symbol"=>$property_currency_symbol,
                    "bookedon"=>$trip->dateAdded,
                    "bookingno"=>$trip->bookingno,
                    "booking_status"=>$trip->booking_status,
                    "is_booking_allowed"=>$is_booking_allowed_status,
                    "approval_status"=>$trip->approval,
                    "checkin"=>$trip->checkin,
                    "checkout"=>$trip->checkout,
                    "numofdates"=>intval($trip->numofdates),
                    "property_address"=>$trip->prd_address,
                    "expiredate"=>$trip->expiredate,
                    "country"=>$trip->country_name,
                    "state"=>$trip->state_name,
                    "city"=>$trip->city_name,
                    "property_id"=>intval($trip->product_id),
                    "host_name"=>$host_name,
                    "NoofGuest"=>intval($trip->NoofGuest),
                    "cancel_percentage"=>$trip->cancel_percentage,
                    "cancellation_policy"=>$trip->cancellation_policy,
                    "house_rules"=>$house_rules,
                    "paid_currency_code"=>$trip->currencycode,
                    "paid_currency_symbol"=>$paid_currency_symbol,
                    "payable_paypal_currency"=>$this->paypal_curency,
                    "payable_paypal_symbol"=>$this->paypal_symbol,
                    "payable_paypal_total"=>$payable_paypal_total,
                    "property_image"=>$proImage,
                    "is_previous"=>$is_previous,
                    "guest_id"=>intval($trip->GestId),
                    "guest_email"=>$trip->Guestemail,
                    "host_id"=>intval($trip->renter_id),
                    "user_currency_code"=>$user_currencyCode,
                    "user_currency_symbol"=>$user_currency_symbol,
                    "paypal_status" => $Paypal_status,
                    "Stripe_status" => $Stripe_status,
                    "Credit_Card_status" => $Credit_Card_status,
                    "service_fee"=>floatval($serviceFee),
                    "security_deposit"=>floatval($secDeposit),
                    "sub_total"=>floatval($sub_total),
                    "total"=>floatval($total),
                    "is_wallet_used" => (($trip->is_wallet_used == "" ) ? "No" : $trip->is_wallet_used),
                    "wallet_Amount" => (($trip->wallet_Amount == "" ) ? "" : $trip->wallet_Amount),
                    "is_coupon_used" => $is_coupon_used,
                    "coupon_amount"=>$tot_coup,
                    "show_status"=>$show_status,
                    "cancel_show_status"=>$cancel_show_status,
                    "is_canceled"=>$is_canceled,
                    "cancel_status" =>$cancel_status,
                    "cancelled_by" =>$cancelled_by,
                    "is_dispute"=>$is_dispute,
                    "dispute_show_status"=>$dispute_show_status,
                    "is_review"=>$is_review,
                    "review_show_status"=>$review_show_status,
                    "wallet_balance_amount"=>$wallet_balance_amount
                );
            }
        }
        if($trip_details->num_rows()==0){
            $response = array("status"=>0,"message"=>"No Listing found","mytrips"=>$my_trips);
        } else {
            $response = array("status"=>1,"message"=>"My trips available","mytrips"=>$my_trips);
        }
        echo json_encode($response);
    }
    /* Host Approve the user booking */
    public function host_approval()
    {
        $sender_id = $this->input->post ( 'sender_id' );//3
        $receiver_id = $this->input->post ( 'receiver_id' );//5
        $bookingno = $this->input->post ( 'bookingno' );
        $property_id = $this->input->post ( 'property_id' );//43
        $subject = $this->input->post ( 'subject' );
        $message = $this->input->post ( 'message' );
        $status = $this->input->post ( 'status' ); // Accept
        if($sender_id =="" || $receiver_id =="" || $bookingno =="" || $property_id =="" || $subject =="" || $message =="" || $status ==""){
            $response = array("status"=>1,"message"=>"Parameter missing!");
            echo json_encode($response);
            exit;
        }
        $dataArr = array(
            'productId' => $property_id ,
            'senderId' => $sender_id ,
            'receiverId' => $receiver_id ,
            'bookingNo' => $bookingno ,
            'subject' => $subject ,
            'message' => $message,
            "dateAdded"=>date('Y-m-d H:i:s'),
            'point' => '1',
            'status' => $status
        );
        $this->db->insert(MED_MESSAGE, $dataArr);
        $this->db->where('bookingNo', $bookingno);
        $this->db->update(MED_MESSAGE, array('status' => $status));
        $newdata = array('approval' => $status);
        $condition = array('Bookingno' => $bookingno);
        $this->mobile_model->update_details(RENTALENQUIRY,$newdata,$condition);
        /*
    $enquiryId = $_POST['enqId'];
    $newdata = array ('approval' => 'Accept');
    $condition = array ('id' => $enquiryId);
    $this->mobile_model->update_details (RENTALENQUIRY,$newdata,$condition);
    */
        $enqDetails = $this->mobile_model->get_all_details(RENTALENQUIRY,array('Bookingno'=>$bookingno));
        $enquiryId = $enqDetails->row()->id;
        $product_Id = $enqDetails->row()->prd_id;
        $rentalDetails = $this->mobile_model->get_all_details(PRODUCT,array('id'=>$product_Id));
        $product_title = $rentalDetails->row()->product_title;
        //$productDetails = $this->mobile_model->get_all_details(RENTALENQUIRY,array('id'=>$enquiryId));
        $userId = $enqDetails->row()->user_id;
        $userDetails = $this->mobile_model->get_all_details(USERS,array('id'=>$userId));
        $hostdetail = $this->mobile_model->get_all_details(USERS,array('id'=>$enqDetails->row()->renter_id));
        /* Approval mail function Start */
        $newsid = '23';
        $template_values = $this->mobile_model->get_newsletter_template_details ($newsid);
        if ($template_values ['sender_name'] == '' && $template_values ['sender_email'] == '') {
            $sender_email = $this->config->item ( 'site_contact_mail' );
            $sender_name = $this->config->item ( 'email_title' );
        } else {
            $sender_name = $template_values ['sender_name'];
            $sender_email = $template_values ['sender_email'];
        }
        $Approval_info = array('email_title' => $sender_name,'logo' => $this->data ['logo'],'travelername'=>$userDetails->row()->firstname."  ".$userDetails->row()->lastname,'propertyname'=>$product_title,'hostname'=>$hostdetail->row()->firstname." ".$hostdetail->row()->lastname );
        $message = $this->load->view('newsletter/Host Approve Reservation'.$newsid.'.php',$Approval_info,TRUE);
        $email_values = array (
            'mail_type' => 'html',
            'from_mail_id' => $sender_email,
            'mail_name' => $sender_name,
            'to_mail_id' => $userDetails->row()->email,
            'subject_message' => $template_values ['news_subject'],
            'body_messages' => $message
        );
        //send mail
        $this->load->library('email');
        $this->email->from($email_values['from_mail_id'], $sender_name);
        $this->email->to($email_values['to_mail_id']);
        $this->email->subject($email_values['subject_message']);
        $this->email->set_mailtype("html");
        $this->email->message($message);
        try{
            $this->email->send();
        }catch(Exception $e){
            echo $e->getMessage();
        }
        /* Approval mail function Ends */
        /* Firebase Push Notification */
        $firebase_token = $userDetails->row()->firebase_token;
        if($firebase_token != '')
        {
            error_reporting(-1);
            ini_set('display_errors', 'On');
            require_once __DIR__ . '/firebase.php';
            require_once __DIR__ . '/push.php';
            $firebase = new Firebase();
            $push = new Push();
            // optional payload
            $payload = array();
            // notification title
            $title = 'Host Accept your Request';
            // notification message
            $pushMessage = 'The Requested property '.$rentalDetails->row()->product_title.' was approved';
            $body = $pushMessage;
            // push type - single user / topic
            $push_type = isset($_GET['push_type']) ? $_GET['push_type'] : '';
            // whether to include to image or not
            $include_image = TRUE;
            $push->setTitle($title);
            $push->setMessage($message);
            $push->setImage('https://api.androidhive.info/images/minion.jpg');
            $push->setIsBackground(FALSE);
            $push->setPayload($payload);
            $json = '';
            $firbase_response = '';
            $regId = $firebase_token;
            $json = $push->getPush($regId);
            $firbase_response = $firebase->send($regId, $json, $title, $body);
        }
        /* Firebase Push Notification End */
        //print_r($Approval_info); echo '<hr>'; print_r($email_values); exit;
        $response = array("status"=>1,"message"=>"Successfully accepted",'firebase'=>$firbase_response);
        echo json_encode($response);
        /*
    $gcmRegID  = $userDetails->row()->mobile_key;
    $pushMessage = 'The booked property '.$rentalDetails->row()->product_title.' was approved';
    if (isset($gcmRegID) && isset($pushMessage)) {
      $gcmRegIds = array($gcmRegID);
      $message = array("m" => $pushMessage, "k"=>'Your Trips');
      $pushStatus = $this->sendPushNotificationToGCM($gcmRegIds, $message);
    }
    if($enquiryId > 0) $jsonReturn['status'] = 'successfully accepted';
    else $jsonReturn['status'] = 'Failed';
    echo json_encode($jsonReturn);
    */
    }
    /* Host Decline the user booking */
    public function host_decline()
    {
        $sender_id = $this->input->post ( 'sender_id' );
        $receiver_id = $this->input->post ( 'receiver_id' );
        $bookingno = $this->input->post ( 'bookingno' );
        $property_id = $this->input->post ( 'property_id' );
        $subject = $this->input->post ( 'subject' );
        $message = $this->input->post ( 'message' );
        $status = $this->input->post ( 'status' ); // Decline
        if($sender_id =="" || $receiver_id =="" || $bookingno =="" || $property_id =="" || $subject =="" || $message =="" || $status ==""){
            $response = array("status"=>1,"message"=>"Parameter missing!");
            echo json_encode($response);
            exit;
        }
        $dataArr = array('productId' => $property_id ,
            'senderId' => $sender_id ,
            'receiverId' => $receiver_id ,
            'bookingNo' => $bookingno ,
            'subject' => $subject ,
            'message' => $message,
            "dateAdded"=>date('Y-m-d H:i:s'),
            'point' => '1',
            'status' => $status
        );
        $this->db->insert(MED_MESSAGE, $dataArr);
        $this->db->where('bookingNo', $bookingno);
        $this->db->update(MED_MESSAGE, array('status' => $status));
        $newdata = array('approval' => $status);
        $condition = array('Bookingno' => $bookingno);
        $this->mobile_model->update_details(RENTALENQUIRY,$newdata,$condition);
        $enqDetails = $this->mobile_model->get_all_details(RENTALENQUIRY,array('Bookingno'=>$bookingno));
        $enquiryId = $enqDetails->row()->id;
        $product_Id = $enqDetails->row()->prd_id;
        $rentalDetails = $this->mobile_model->get_all_details(PRODUCT,array('id'=>$product_Id));
        $product_title = $rentalDetails->row()->product_title;
        $userId = $enqDetails->row()->user_id;
        $userDetails = $this->mobile_model->get_all_details(USERS,array('id'=>$userId));
        $hostdetail = $this->mobile_model->get_all_details(USERS,array('id'=>$enqDetails->row()->renter_id));
        /* Decline mail function Start */
        $newsid = '24';
        $template_values = $this->mobile_model->get_newsletter_template_details ($newsid);
        if ($template_values ['sender_name'] == '' && $template_values ['sender_email'] == '') {
            $sender_email = $this->config->item ( 'site_contact_mail' );
            $sender_name = $this->config->item ( 'email_title' );
        } else {
            $sender_name = $template_values ['sender_name'];
            $sender_email = $template_values ['sender_email'];
        }
        $Approval_info = array('email_title' => $sender_name,'logo' => $this->data ['logo'],'travelername'=>$userDetails->row()->firstname."  ".$userDetails->row()->lastname,'propertyname'=>$product_title,'hostname'=>$hostdetail->row()->firstname." ".$hostdetail->row()->lastname );
        $message = $this->load->view('newsletter/Host Decline Reservation'.$newsid.'.php',$Approval_info,TRUE);
        $email_values = array ('mail_type' => 'html',
            'from_mail_id' => $sender_email,
            'mail_name' => $sender_name,
            'to_mail_id' => $userDetails->row()->email,
            'subject_message' => $template_values ['news_subject'],
            'body_messages' => $message
        );
        //send mail
        $this->load->library('email');
        $this->email->from($email_values['from_mail_id'], $sender_name);
        $this->email->to($email_values['to_mail_id']);
        $this->email->subject($email_values['subject_message']);
        $this->email->set_mailtype("html");
        $this->email->message($message);
        try{
            $this->email->send();
        }catch(Exception $e){
            echo $e->getMessage();
        }
        /* Decline mail function Ends */
        /*Firebase Push Notification*/
        $firebase_token = $userDetails->row()->firebase_token;
        if($firebase_token != '')
        {
            error_reporting(-1);
            ini_set('display_errors', 'On');
            require_once __DIR__ . '/firebase.php';
            require_once __DIR__ . '/push.php';
            $firebase = new Firebase();
            $push = new Push();
            // optional payload
            $payload = array();
            // notification title
            $title = 'Host Declined your Request';
            // notification message
            $pushMessage = 'The Requested property '.$rentalDetails->row()->product_title.' was declined by host';
            $body = $pushMessage;
            // push type - single user / topic
            $push_type = isset($_GET['push_type']) ? $_GET['push_type'] : '';
            // whether to include to image or not
            $include_image = TRUE;
            $push->setTitle($title);
            $push->setMessage($message);
            $push->setImage('https://api.androidhive.info/images/minion.jpg');
            $push->setIsBackground(FALSE);
            $push->setPayload($payload);
            $json = '';
            $firbase_response = '';
            $regId = $firebase_token;
            $json = $push->getPush($regId);
            $firbase_response = $firebase->send($regId, $json, $title, $body);
        }
        /*Firebase Push Notification Ends*/
        $response = array("status"=>1,"message"=>"Successfully Declined!","firebase"=>$firbase_response);
        echo json_encode($response);
        exit;
        /*    $gcmRegID  = $userDetails->row()->mobile_key;
    $pushMessage = 'The booked property '.$rentalDetails->row()->product_title.' was declined';
    if (isset($gcmRegID) && isset($pushMessage)) {
    $gcmRegIds = array($gcmRegID);
    $message = array("m" => $pushMessage, "k"=>'Your Trips');
    $pushStatus = $this->sendPushNotificationToGCM($gcmRegIds, $message);
    }
    if($enquiryId > 0) $jsonReturn['status'] = 'successfully declined';
    else $jsonReturn['status'] = 'Failed';
    echo json_encode($jsonReturn);
    */
    }
    /* SEnd Message the user booking */
    public function send_message()
    {
        $sender_id = $this->input->post ( 'sender_id' );
        $receiver_id = $this->input->post ( 'receiver_id' );
        $bookingno = $this->input->post ( 'bookingno' );
        $property_id = $this->input->post ( 'property_id' );
        $subject = $this->input->post ( 'subject' );
        $message = $this->input->post ( 'message' );
        if($sender_id =="" || $receiver_id =="" || $bookingno =="" || $property_id =="" || $subject =="" || $message ==""){
            $response = array("status"=>1,"message"=>"Parameter missing!");
            echo json_encode($response);
            exit;
        }
        $statusQry = $this->user_model->get_all_details ( MED_MESSAGE, array ('bookingNo' => $bookingno));
        $status = $statusQry->row()->status;
        $sub='Booking Request : '.$subject;
        $dataArr = array(
            'productId' => $property_id ,
            'senderId' => $sender_id ,
            'receiverId' => $receiver_id ,
            'bookingNo' => $bookingno ,
            'subject' => $sub ,
            'message' => $message,
            'dateAdded' => date('Y-m-d H:i:s'),
            'status' => $status
        );
        if($statusQry->num_rows()>0){
            $this->db->insert(MED_MESSAGE, $dataArr);
            $response = array("status"=>1,"message"=>"Successfully Message Sent!");
        } else {
            $response = array("status"=>0,"message"=>"Invalid data!");
        }
        echo json_encode($response);
    }
    public function host_delete_list()
    {
        $email = $_GET['email'];
        $productId = $_GET['pId'];
        $condition = array('email'=>$email);
        $userDetails = $this->mobile_model->get_all_details ( USERS, $condition );
        $userId = $userDetails->row()->id;
        $this->db->where('user_id', $userId);
        $this->db->where('id', $productId);
        $this->db->delete(PRODUCT);
        $condition = array('user_id' => $userId, 'id' => $productId);
        $productDetails = $this->mobile_model->get_all_details ( PRODUCT, $condition );
        if($productDetails->num_rows() == 0)
        {
            $this->db->where('product_id', $productId);
            $this->db->delete(PRODUCT_ADDRESS);
            $this->db->where('product_id', $productId);
            $this->db->delete(PRODUCT_PHOTOS);
            $this->db->where('id', $productId);
            $this->db->delete(SCHEDULE);
            $this->db->where('PropId', $productId);
            $this->db->delete(CALENDARBOOKING);
            $jsonReturn['status'] = 'Success';
        }
        echo json_encode($jsonReturn);
    }
    public function host_unlist_list()
    {
        $email = $_GET['email'];
        $productId = $_GET['pId'];
        $action = $_GET['action'];
        $condition = array('email'=>$email);
        $userDetails = $this->mobile_model->get_all_details ( USERS, $condition );
        $userId = $userDetails->row()->id;
        $data = array(
            'user_status'=>$action
        );
        $condition = array(
            'id'=>$productId,
            'user_id'=>$userId
        );
        $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        $jsonReturn['status'] = 'Success';
        echo json_encode($jsonReturn);
    }
    public function save_cancel_policy()
    {
        $tType = $_GET['tType'];
        $productId = $_GET['pId'];
        $data = array(
            'cancellation_policy'=>$tType
        );
        $condition = array(
            'id'=>$productId
        );
        $this->mobile_model->update_details(PRODUCT ,$data ,$condition);
        $jsonReturn['status'] = 'successfully added';
        echo json_encode($jsonReturn);
    }
    public function proceedPayment(){
        //if ($_POST['enqId']!=''){
        $enqId = 1;
        if ($enqId != ''){
            $this->db->select('R.*');
            $this->db->from(RENTALENQUIRY . ' as R');
            $this->db->where('R.id',$enqId);
            $result = $this->db->get();
            $userId=$result->row()->renter_id;
            $sellerId=$result->row()->user_id;
            $productId=$result->row()->prd_id;
            $payment=$result->row()->totalAmt;
            $payArr = array('userId'  =>  $userId,
                'sellerId'    =>  $sellerId,
                'productId'   =>  $productId,
                'payment' =>  $payment,
            );
            $this->mobile_model->simple_insert(MOBILE_PAYMENT,$payArr);
            $mobileId = $this->db->insert_id();
            $json_encode = json_encode(array("status"=>'Success', "mobileId"=>$mobileId));
            echo $json_encode;
            //echo "Success|".$mobileId;
        }else{
            $json_encode = json_encode(array("status"=>'Failed'));
            echo $json_encode;
            //echo "Failure";
        }
    }
    public function send_iphone_message()
    {
        $this->push_notification();
    }
    /**
     *
     * Load CMS pages for mobile view
     */
    public function mobilePages() {
        $seourl = $this->uri->segment(2);
        $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
        if ($pageDetails->num_rows() == 0){
            show_404();
        }else {
            $this->mobdata['pageDetails'] = $pageDetails;
            $this->load->view('mobile/cms.php',$this->mobdata);
        }
    }
    public function iospn(){
        #413944117c13a80d85ef678f6557d854e36fe378da63376bdf24bdbe6e86381a
        $this->push_notification();
    }
    public function transaction_history(){
        $email = $_POST['email'];
        $to_currency_code = $_POST['currency_code'];

        //$transactionsArr = $this->mobile_model->get_all_details(COMMISSION_TRACKING,array('host_email'=>$email));
        //$resonse_json = $transactionsArr->result();
        $paid_currency_details = $this->mobile_model->get_all_details ( CURRENCY, array('currency_type' => $to_currency_code) );
        $currencySymbol = $paid_currency_details->row()->currency_symbols;
        if($email == "" || $to_currency_code == "")
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));exit;
        }else{
            $transactionsArr = $this->mobile_model->get_transaction_details($email);
            $transaction_arr =array();
            if($transactionsArr->num_rows()== 0) {
                echo json_encode(array('status'=>0,'message'=>'No Transaction found','transaction_history'=>$transaction_arr));
            } else {

                foreach($transactionsArr->result() as $transaction)
                {
                    $transaction_arr[] = array(
                        "id"=> $transaction->id,
                        "host_email"=>$transaction->host_email,
                        "booking_no"=> $transaction->booking_no,
                        "total_amount"=> (($transaction->currency_code != $to_currency_code) ? (currency_conversion($transaction->currency_code,$to_currency_code,$transaction->total_amount/*,$transaction->currency_cron_id*/)) : ($transaction->total_amount)),
                        "subtotal"=> ( ($transaction->currency_code != $to_currency_code) ? (currency_conversion($transaction->currency_code,$to_currency_code,$transaction->subtotal/*,$transaction->currency_cron_id*/)) : ($transaction->subtotal)),
                        "guest_fee"=> (($transaction->currency_code != $to_currency_code) ? (currency_conversion($transaction->currency_code,$to_currency_code,$transaction->guest_fee/*,$transaction->currency_cron_id*/)) : ($transaction->guest_fee)),
                        "host_fee"=> (($transaction->currency_code != $to_currency_code) ? (currency_conversion($transaction->currency_code,$to_currency_code,$transaction->host_fee/*,$transaction->currency_cron_id*/)) : ($transaction->host_fee)),
                        "dispute_by"=> $transaction->dispute_by,
                        "disputer_id"=> $transaction->disputer_id,
                        "cancel_percentage"=> $transaction->cancel_percentage,
                        "paid_cancel_amount"=> (($transaction->currency_code != $to_currency_code) ? (currency_conversion($transaction->currency_code,$to_currency_code,$transaction->paid_cancel_amount)) : ($transaction->paid_cancel_amount)),
                        "paid_canel_status"=> $transaction->paid_canel_status,
                        "booking_walletUse"=>(($transaction->currency_code != $to_currency_code) ? (currency_conversion($transaction->currency_code,$to_currency_code,$transaction->booking_walletUse/*,$transaction->currency_cron_id*/)) : ($transaction->booking_walletUse)),
                        "listing_walletUse"=> (($transaction->currency_code != $to_currency_code) ? (currency_conversion($transaction->currency_code,$to_currency_code,$transaction->listing_walletUse/*,$transaction->currency_cron_id*/)) : ($transaction->listing_walletUse)),
                        "payable_amount"=> (($transaction->currency_code != $to_currency_code) ? (currency_conversion($transaction->currency_code,$to_currency_code,$transaction->payable_amount/*,$transaction->currency_cron_id*/)) : ($transaction->payable_amount)),
                        "commission_paid_id"=> $transaction->commission_paid_id,
                        "paid_status"=> $transaction->paid_status,
                        "dateAdded"=> $transaction->dateAdded,
                        "currency_code"=> (($transaction->currency_code != $to_currency_code) ? $to_currency_code : ($transaction->currency_code)),
                        "currency_symbol"=> $currencySymbol
                    );
                }

                echo json_encode(array('status'=>1,'message'=>'Transaction available','transaction_history'=>$transaction_arr));
            }
        }

    }
    public function add_to_favourite(){
        $email = $_POST['email'];
        $productId = $_POST['p_Id'];
        $userDetails = $this->mobile_model->get_all_details(USERS,array('email'=>$email));
        $userId = $userDetails->row()->id;
        $listDetails = $this->mobile_model->get_all_details(LISTS_DETAILS,array('user_id'=>$userId, 'product_id'=>$productId));
        if($listDetails->num_rows() == 0)
        {
            $productDetails = $this->mobile_model->get_all_details(PRODUCT,array('id'=>$productId));
            $productName = $productDetails->row()->product_title;
            $dataArr = array('user_id'=>$userId, 'name'=>$productName, 'product_id'=>$productId, 'whocansee'=>'Everyone');
            $this->mobile_model->simple_insert(LISTS_DETAILS,$dataArr);
            $listDetails = $this->mobile_model->get_all_details(LISTS_DETAILS,array('user_id'=>$userId, 'product_id'=>$productId));
        }
        $jsonReturn['status'] = 'successfully added';
        echo json_encode(array('jsonReturn'=>$jsonReturn));
    }
    public function remove_from_favourite(){
        $email = $_POST['email'];
        $productId = $_POST['p_Id'];
        $userDetails = $this->mobile_model->get_all_details(USERS,array('email'=>$email));
        $userId = $userDetails->row()->id;
        $productDetails = $this->mobile_model->get_all_details(PRODUCT,array('id'=>$productId));
        $productName = $productDetails->row()->product_title;
        $this->db->where('user_id', $userId);
        $this->db->where('product_id', $productId);
        $this->db->delete(LISTS_DETAILS);
        $jsonReturn['status'] = 'successfully removed';
        echo json_encode(array('jsonReturn'=>$jsonReturn));
    }
    /************10-06-2016************************************************************/
    public function property_values() {
        $select_qry = "id,seller_product_id,product_title,seourl,price,price_range,description,quantity,max_quantity,purchasedCount,shipping_type,shipping_cost,taxable_type,tax_cost,user_id,list_name,ship_immediate,status,currency,home_type,room_type,accommodates,listings,price_perweek,price_permonth,datefrom,dateto,minimum_stay,security_deposit,cancellation_policy,user_status from fc_product";
        $property_values = $this->product_model->check_product_id($select_qry);
        $productvalueArr = array();
        foreach($property_values->result() as $product_value) {
            $productvalueArr[] = array("id" =>$product_value->id,"seller_product_id"=>$product_value->seller_product_id,"product_title"=>$product_value->product_title,"seourl"=>$product_value->seourl,"price"=>$product_value->price,"price_range"=>$product_value->price_range,"description"=>$product_value->description,"quantity"=>$product_value->quantity,"max_quantity"=>$product_value->max_quantity,"purchasedCount"=>$product_value->purchasedCount,"shipping_type"=>$product_value->shipping_type,"shipping_cost"=>$product_value->shipping_cost,"taxable_type"=>$product_value->taxable_type,"tax_cost"=>$product_value->tax_cost,"user_id"=>$product_value->user_id,"list_name"=>$product_value->list_name,"ship_immediate"=>$product_value->ship_immediate,"status"=>$product_value->status,"currency"=>$product_value->currency,"home_type"=>$product_value->home_type,"room_type"=>$product_value->room_type,"accommodates"=>$product_value->accommodates,"listings"=>$product_value->listings,"price_perweek"=>$product_value->price_perweek,"price_permonth"=>$product_value->price_permonth,"datefrom"=>$product_value->datefrom,"dateto"=>$product_value->dateto,"minimum_stay"=>$product_value->minimum_stay,"security_deposit"=>$product_value->security_deposit,"cancellation_policy"=>$product_value->cancellation_policy,"user_status"=>$product_value->user_status);
        }
        $json_encode = json_encode(array("product_values"=>$productvalueArr));
        echo $json_encode;
    }
    public function booking_values() {
        $select_qry = "id,id_item,the_date,id_state,id_booking,PropId,price from bookings";
        $booking_values = $this->bookings_model->book_all($select_qry);
        $bookingvalueArr = array();
        foreach($booking_values->result() as $booking_value) {
            $bookingvalueArr[] = array("id" =>$booking_value->id,"id_item"=>$booking_value->id_item,"the_date"=>$booking_value->the_date,"id_state"=>$booking_value->id_state,"id_booking"=>$booking_value->id_booking,"PropId"=>$booking_value->PropId,"price"=>$booking_value->price);
        }
        $json_encode = json_encode(array("booking_values"=>$bookingvalueArr));
        echo $json_encode;
    }
    public function custom_values() {
        //$select_qry = "id,loginUserType,user_name,group,email,password,status from fc_users";
        $custom_values = $this->custom_model->get_user_all();
        $customvalueArr = array();
        foreach($custom_values->result() as $custom_value) {
            $customvalueArr[] = array("id" =>$custom_value->id,"loginUserType"=>$custom_value->loginUserType,"user_name"=>$custom_value->user_name,"group"=>$custom_value->group,"email"=>$custom_value->email,"password"=>$custom_value->password,"status"=>$custom_value->status);
        }
        $json_encode = json_encode(array("custom_values"=>$customvalueArr));
        echo $json_encode;
    }
    /* PROPERTY HOME PAGE */
    public function home_property_info()
    {
        $userid = $this->input->post('userid');
        $CityDetails = $this->mobile_model->Featured_city();
        $response= array();
        $currency_val = array();
        $overAll_unread_count = 0;
        if($userid != '')
        {
            $overAll_unread_count = $this->mobile_model->overAll_unread_count($userid);
        }
        if($CityDetails->num_rows()>0){
            foreach ($CityDetails->result() as $result){
                $name=str_replace(' ','+',$result->name);
                if(file_exists('images/city/'.trim(stripslashes($result->citythumb))))
                {
                    $city_image = base_url().'images/city/'.trim(stripslashes($result->citythumb));
                }else{
                    $city_image = base_url().'images/city/no-image-found.jpg';
                }
                $response[] = array(
                    "name" => trim(stripslashes($result->name)),
                    "citythumb" => $result->citythumb,
                    "image_url" => $city_image,
                    "property_url" => 'property?city='.$name,
                    'overAll_unread_count'=>$overAll_unread_count,
                );
            }
            //$response_json['Home_page_details'] = $response;
        }
        $currency_symbol_query='SELECT * FROM '.CURRENCY.' where status = "Active" GROUP BY currency_type';
        $currency_symbol=$this->mobile_model->ExecuteQuery($currency_symbol_query);
        if($currency_symbol->num_rows() > 0)
        {
            foreach($currency_symbol->result() as $cur){
                $currency_rate =0;
                //if($currency_type != $cur->currency_type) {
                $currency_val[] = array('id'=>intval($cur->id),'currency_symbol'=>$cur->currency_symbols,'currency_code'=>$cur->currency_type,"currency_value"=>0);
                //}
            }
        }
        if(($currency_symbol->num_rows() == 0) && ($CityDetails->num_rows() ==0) )
        {
            $response_json = array('status'=>0,'message'=>'No Data Available','Home_page_details'=>$response,'currency_list'=>$currency_val);
        } else {
            $response_json = array('status'=>1,'message'=>'Data Available','Home_page_details'=>$response,'currency_list'=>$currency_val);
        }
        echo json_encode($response_json);
    }
    /* Listing type values */
    public function listing_type_values() {
        $roombedVal=array();
        $select_qrys = "select * from fc_listing_types WHERE status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_useproperty_attribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Yamuna 09-1-2018 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $roombedVal[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_useproperty_attribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        //print_r($roombedVal);die();
        echo json_encode(array('listing_type'=>$roombedVal));
        /* $select_qry = "select * from fc_listings where id=1";
    $list_values = $this->mobile_model->ExecuteQuery($select_qry);
    if($list_values->num_rows()>0){
      foreach($list_values->result() as $list){
        $roombedVal[] =json_decode($list->listing_values);
      }
    }
    echo json_encode(array('listing_type'=>$roombedVal)); */
    }
    /* Inbox message */
    public function json_med_message()
    {
        $userid = $_POST['userid'];
        $booking_numbers = $this->input->post('booking_numbers');
        $med_messages = $this->mobile_model->json_get_med_messages($userid);

        //echo $this->db->last_query();
        $overAll_unread_count = 0;
        $messageArr = array();
        $message = array();
        if($med_messages->num_rows()>0){
            $overAll_unread_count = $this->mobile_model->overAll_unread_count($userid);
            foreach($med_messages->result() as $message_value) {
                if($message_value->image != '') {
                    $img = base_url().'images/users/'.$message_value->image;
                }else{
                    $img = base_url().'images/users/profile.png';
                }
                if($message_value->firstname !=""){
                    $firstname = $message_value->firstname;
                }else { $firstname=""; }
                if($message_value->message !=""){
                    $no_based_message = $this->mobile_model->get_all_details(MED_MESSAGE,array('bookingNo'=>$message_value->bookingNo,'receiverId'=>$userid));
                    foreach($no_based_message->result() as $meg_val)
                    {
                        $message =  $meg_val->message;
                    }
                }else { $message=""; }
                if($message_value->subject !=""){
                    $subject = $message_value->subject;
                }else { $subject=""; }
                $id = $message_value->id;
                $property_id = $message_value->productId;
                $dateAdded = $message_value->dateAdded;
                $messageArr[] = array(
                    "id"=>$message_value->id,
                    "msg_unread_count"=>$message_value->msg_unread_count,
                    "property_id"=>$message_value->productId,
                    "dateAdded"=>$message_value->dateAdded,
                    "message"=>$message,
                    "subject"=>$subject,
                    "bookingno"=>$message_value->bookingNo,
                    "msg_read"=>$message_value->msg_read,
                    "status"=>$message_value->status,
                    "user_msgread_status"=>(($message_value->user_msgread_status == "Yes") ? "1" : "0"),
                    "host_msgread_status"=>(($message_value->host_msgread_status == "Yes") ? "1" : "0"),
                    "star_status"=>(($message_value->msg_star_status == "Yes") ? "1" : "0"),
                    "user_archive_status"=>$message_value->user_archive_status,
                    "host_archive_status"=>$message_value->host_archive_status,
                    "msg_status"=>$message_value->msg_status,
                    "sender_name"=>ucfirst($message_value->firstname.' '.$message_value->lastname),
                    "user_image"=>$img);
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Notification available","message_values"=>$messageArr));
        } else {
            $json_encode = json_encode(array(
                "status"=>0,
                "message"=>"No Inbox Notification Details Found",
                "overAll_unread_count"=>$overAll_unread_count,
                "message_values"=>$messageArr,
            ));
        }
        echo $json_encode;
    }
    /* Language values */
    public function mobile_lang_list() {
        $condition = array('language_code !='=>"");
        $listvalue = $this->mobile_model->get_all_details (LANGUAGES_KNOWN, $condition);
        $language =array();
        if($listvalue->num_rows()>0) {
            foreach($listvalue->result() as $list){
                $language[] = array('id'=>$list->id,'language_name'=>$list->language_name,'language_code'=>$list->language_code);
            }
            $json_encode = json_encode(array('status'=>1,'message'=>'Language Available','language_list'=>$language));
        } else {
            $json_encode = json_encode(array('status'=>0,'message'=>'No data found','language_list'=>$language));
        }
        echo $json_encode;
    }
    /* ADD PROPERTY STEP1 */
    public function mobile_add_property_step1()
    {
        $user_id = $this->input->post('user_id');
        $property_type = $this->input->post('property_type');
        $room_type = $this->input->post('room_type');
        $accommodates = $this->input->post('accommodates');
        $address = $this->input->post('city');
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyvalueArr = array();
        if($currency_values->num_rows() >0)
        {
            foreach($currency_values->result() as $cur_value)
            {
                $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0)
        {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0)
        {
            foreach($parent_list_values->result() as $parent_value)
            {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0)
                {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value)
                    {
                        if($parent_value->id == $list_value->list_id)
                        {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        $roombedVal=array();
        $roombedVal1=array();
        $select_qry = "select * from fc_listings where id=1";
        $list_values = $this->mobile_model->ExecuteQuery($select_qry);
        if($list_values->num_rows()>0)
        {
            foreach($list_values->result() as   $list){
                $roombedVal[] =json_decode($list->listing_values);
                $roombedVal1[] =json_decode($list->rooms_bed);
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        $select_qrys = "select * from fc_listing_types WHERE status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Charles 2-3-2017 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        if ($user_id=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Please sign in before listing your rental'));
            echo $json_encode;
        }
        else
        {
            $condition = array('id'=>$user_id,'status'=>'Active');
            $this->data['checkUser'] = $this->mobile_model->get_all_details(USERS,$condition);
            $cityArr = explode(',',$this->input->post('city'));
            if($this->data['checkUser']->num_rows() == 1)
            {
                $data = array('room_type'=>$this->input->post('room_type'),
                    'accommodates'=>$this->input->post('accommodates'),
                    'home_type'=>$this->input->post('property_type'),
                    'user_id'=>$user_id,
                    'status'=>'UnPublish',
                );
                $this->mobile_model->simple_insert(PRODUCT,$data);
                $getInsertId=$this->mobile_model->get_last_insert_id();
                $lat = 0.00;
                $lang = 0.00;
                $address1 = urlencode($address);
                //echo  $address1 = urldecode($address);

                //exit;
                $google_map_api = $this->config->item('google_developer_key');
                $json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$address1&sensor=false&key=$google_map_api");
                $json = json_decode($json);

                //print_r($json);
                //exit;

                $street = $city = $state = $country = $zip = "";
                $address_components=(array) $json->{'results'}[0]->{'address_components'};
                $address_components= json_decode(json_encode($address_components), True);
                //print_r($address_components);
                if(!empty($address_components)){
                    foreach ($address_components as $add){
                        //print_r($add);
                        if(in_array('street_number',$add['types'])) $street=$add['long_name'] ;
                        if(in_array('locality',$add['types'])) $city=$add['long_name'];
                        if(in_array('administrative_area_level_1',$add['types'])) $state=$add['long_name'];
                        if(in_array('country',$add['types'])) $country=$add['long_name'];
                        if(in_array('postal_code',$add['types'])) $zip= $add['long_name'];
                    }
                    //print_r($dataArr);
                }

                /*$street = $json->{'results'}[0]->{'address_components'}[0]->{'long_name'};
                $city = $json->{'results'}[0]->{'address_components'}[1]->{'long_name'};
                $state = $json->{'results'}[0]->{'address_components'}[2]->{'long_name'};
                $country = $json->{'results'}[0]->{'address_components'}[3]->{'long_name'};
                $zip = $json->{'results'}[0]->{'address_components'}[4]->{'long_name'};*/

                $lat = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
                $lang = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};

                if($lat == null || $lang==null){
                    $lat = 0.00;
                    $lang = 0.00;
                }
                $dataArr = array('productId' => $getInsertId, 'address' => $address,'street' => $street, 'city' => $city, 'state' => $state, 'country' => $country, 'lat' => $lat, 'lang' => $lang);
                $this->mobile_model->simple_insert(PRODUCT_ADDRESS_NEW,$dataArr);
                $inputArr3=array();
                $inputArr3 = array(
                    'product_id' =>$getInsertId
                );
                $this->mobile_model->simple_insert(PRODUCT_BOOKING,$inputArr3);
                $inputArr4=array();
                $inputArr4 = array(
                    'id' =>$getInsertId
                );
                $this->mobile_model->simple_insert(SCHEDULE,$inputArr4);
                $this->mobile_model->update_details(USERS,array('group'=>'Seller'),array('id'=>$user_id));
                //$json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$getInsertId));
            }
            else
            {
                $json_encode = json_encode(array('status'=>0,'message'=>'Please register  before listing your rental'));
                echo $json_encode;
                exit;
            }
        }
        $catID = $getInsertId;
        /* schedule starts here */
        $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$catID));
        $sometime_arr = array();
        if($scheduleCheck->num_rows()>0){
            foreach($scheduleCheck->result() as $sc){
                $json_decode = json_decode($sc->data);
                foreach($json_decode as $key=>$value){
                    if($value->status=="available"){
                        $status = 1;
                    }else if($value->status=="booked"){
                        $status = 2;
                    }else if($value->status=="unavailable"){
                        $status = 3;
                    }
                    $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                }
            }
        }
        /* schedule ends here */
        /* Get the property details */
        $attributes=array();
        $where1 = array('p.id'=>$catID);
        $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.space,p.request_to_book,p.instant_pay,p.cancel_description,p.cancel_percentage');
        $this->db->from(PRODUCT.' as p');
        $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
        $this->db->where($where1);
        $rental_details = $this->db->get();
        /* Get Cancellation Policy detail starts */
        $seourl = 'cancellation-policy';
        $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
        $cancellation_policy_description  = "";
        $cancellation_policy_title        = "";
        if($pageDetails->num_rows()>0) {
            foreach($pageDetails->result() as $page){
                $cancellation_policy_description  = $page->description;
                $cancellation_policy_title        = $page->page_title;
            }
        }
        /* Get Cancellation Policy detail ends */
        $photos = array();
        if($rental_details->num_rows() == 1) {
            $this->db->from(PRODUCT_PHOTOS);
            $this->db->where('product_id',$catID);
            $this->db->order_by('imgPriority','asc');
            $productImages = $this->db->get();
            if($productImages->num_rows()>0) {
                foreach($productImages->result() as $prd_Images){
                    $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                }
            }
            foreach($rental_details->result() as $rental_detail){
                if($rental_detail->listings !=""){
                    $attributes[] = json_decode($rental_detail->listings);
                    $array_attributes = (array) $attributes[0];
                }
                else {
                    if($rental_detail->accommodates!="") {
                        //fc_listing_child where parent_id=".$listing_id." and status=0"
                        $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE A.status='Active' and B.id=".$rental_detail->accommodates;
                        $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                        foreach($listing_values_v1->result() as $listnamev1) {
                            $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                        }
                        $array_attributes = $attributes[0];
                    }
                }
                $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                $calendar_status = false;
                if($rental_detail->status == 'Publish' ){
                    $calendar_status = true;
                }
                $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                $price ="";
                if($rental_detail->price !=0){
                    $price = floatval($rental_detail->price);
                }
                if($rental_detail->house_rules == ''){
                    $house_rules = '';
                }else{
                    $house_rules = $rental_detail->house_rules;
                }
                if($rental_detail->guest_access == ''){
                    $guest_access = '';
                }else{
                    $guest_access = $rental_detail->guest_access;
                }
                if($rental_detail->interact_guest == ''){
                    $interact_guest = '';
                }else{
                    $interact_guest = $rental_detail->interact_guest;
                }
                if($rental_detail->neighbor_overview == ''){
                    $neighbor_overview = '';
                }else{
                    $neighbor_overview = $rental_detail->neighbor_overview;
                }
                if($rental_detail->neighbor_around == ''){
                    $neighbor_around = '';
                }else{
                    $neighbor_around = $rental_detail->neighbor_around;
                }
                if($rental_detail->other_thingnote == ''){
                    $other_things_to_note = '';
                }else{
                    $other_things_to_note = $rental_detail->other_thingnote;
                }
                if($rental_detail->instant_pay == ''){
                    $instant_pay = 'No';
                }else{
                    $instant_pay = $rental_detail->instant_pay;
                }
                if($rental_detail->request_to_book == ''){
                    $request_to_book = 'Yes';
                }else{
                    $request_to_book = $rental_detail->request_to_book;
                }
                if($rental_detail->space == ''){
                    $space = '';
                }else{
                    $space = $rental_detail->space;
                }
                $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                $step4 = array("admin_instant_pay_staus"=>$instant_pay_staus,"propertyid"=>$catID,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$other_things_to_note,"house_rules"=>$house_rules,"interact_guest"=>$interact_guest,"neighbor_overview"=>$neighbor_overview,"neighbor_around"=>$neighbor_around,"guest_access"=>$guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space);
                $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,'cancel_description'=>$rental_detail->cancel_description,'cancel_percentage'=>$rental_detail->cancel_percentage);
                $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
            }

            /**InstantPay Option**/
            $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
            $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

            $step_empty1=0;
            if (in_array('', $step1)) { $step_empty1++; }
            if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
            $step1 = array_merge($array1, $step1);
            $step22[] = $step2['calendar_checked'];
            $step_empty2=0;
            if (in_array('',$step22)) { $step_empty2++; }
            if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
            $step2 = array_merge($array2, $step2);
            $step_empty3=0;
            if (in_array('', $step3)) { $step_empty3++; }
            if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
            $step3 = array_merge($array3, $step3);
            $step_empty4=0;
            if (in_array('', $step4_chk)) { $step_empty4++; }
            if($step_empty4>0){ $array4 = array("step_completed"=>false); } else { $array4 = array("step_completed"=>true); }
            $step4 = array_merge($array4, $step4);
            $step_empty5=0;
            if (empty($photos)) { $step_empty5++; }
            if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
            $step5 = array_merge($array5, $step5);
            $step_empty6=0;
            if (in_array('', $step6)) { $step_empty6++; }
            if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
            $step6 = array_merge($array6, $step6);
            $step_empty7=0;
            /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
            $select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
            if (!empty($attributes) && (count($array_attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
            //if (empty($attributes)) { $step_empty7++; }
            //if (in_array('', $step7)) { $step_empty7++; }
            if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
            $step7 = array_merge($array7, $step7);
            $step_empty8=0;
            if (in_array('', $step8)) { $step_empty8++; }
            if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
            $step8 = array_merge($array8, $step8);
            $step_empty9=0;
            if (in_array('', $step9_chk)) { $step_empty9++; }
            if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
            $step9 = array_merge($array9, $step9);
            $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
            $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"admin_instant_pay_staus"=>$instant_pay_staus,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes"=>$property_attributes,"currency" =>$currencyvalueArr));
        } else {
            $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
        }
        echo $json_encode;
    }
    /* ADD PROPERTY STEP2 CALENDAR */
    public function mobile_add_property_step2()
    {
        $some_times = json_decode($this->input->post('seasonal_list'));
        $user_id =$this->input->post('user_id');
        $property_id = intval($this->input->post('property_id'));
        $calendar_checked =$this->input->post('calendar_checked');
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyvalueArr = array();
        if($currency_values->num_rows() >0) {
            foreach($currency_values->result() as $cur_value) {
                $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        $roombedVal=array();
        $roombedVal1=array();
        $select_qry = "select * from fc_listings where id=1";
        $list_values = $this->mobile_model->ExecuteQuery($select_qry);
        if($list_values->num_rows()>0){
            foreach($list_values->result() as   $list){
                $roombedVal[] =json_decode($list->listing_values);
                $roombedVal1[] =json_decode($list->rooms_bed);
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        $select_qrys = "select * from fc_listing_types where status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Charles 18-3-2017 Child Name*********/
                /***********Charles 2-3-2017 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $listing_child_type = $listing_child->type;
                            $listing_child_labelname = $listing_child->labelname;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        if ($user_id=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Please sign in before listing your rental'));
        }
        else
        {
            $dataArr = array('calendar_checked' => $calendar_checked);
            $this->mobile_model->update_details(PRODUCT,$dataArr,array('id'=>$property_id));
            $this->mobile_model->commonDelete(PRODUCT_BOOKING,array('product_id' => $property_id));
            $inputArr3=array();
            $inputArr3 = array(
                'product_id' =>$this->input->post('property_id'),
                'dateto' => date('Y-m-d',strtotime($this->input->post('dateto'))),
                'datefrom' => date('Y-m-d',strtotime($this->input->post('datefrom')))
            );
            $this->mobile_model->simple_insert(PRODUCT_BOOKING,$inputArr3);
            $json_array = array();
            /*Get already updated dates*/
            $alreadyBookedArr = $this->db->from('schedule')->where('id',$property_id)->get()->result();
            $get_result=json_decode($alreadyBookedArr[0]->data);
            if (!empty($get_result)) {
                foreach ($get_result as $dates => $value) {
                    $json_array[$dates] = array("available" => $value->available, "bind" => $value->bind, "info" => $value->info, "notes" => $value->notes, "price" => $value->price, "promo" => $value->promo, "status" => $value->status);
                }
            }

            /***End**/
            /* schedule starts */
            if(!empty($some_times)) {
                foreach($some_times->seasonal_calendar_price as $s)
                {
                    if($s->status==1){
                        $status = "available";
                    }else if($s->status==2){
                        $status = "booked";
                    }else if($s->status==3){
                        $status = "unavailable";
                    }
                    $json_array[$s->date] = array('available' => 1, 'bind' => 0, 'info' => '','notes'=> '','price' => $s->price, 'promo' =>'','status'=>$status);
                }
                $schedule_data = json_encode($json_array);
                $schedule_arr = array('id' => $property_id,'data'=>$schedule_data);
                $res = $this->db->select('data')->from('schedule')->where('id',$property_id)->get()->result();
                $decode = json_decode($res);
                $this->db->where('id',$property_id);
                $this->db->update('schedule',$schedule_arr);
            }
            $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$property_id));
            $sometime_arr = array();
            if($scheduleCheck->num_rows() >0){
                foreach($scheduleCheck->result() as $sc){
                    $json_decode = json_decode($sc->data);
                    foreach($json_decode as $key=>$value)
                    {
                        if($value->status=="available")
                        {
                            $status = 1;
                        }
                        else if($value->status=="booked")
                        {
                            $status = 2;
                        }
                        else if($value->status=="unavailable")
                        {
                            $status = 3;
                        }
                        $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                    }
                }
            }
            /* schedule ends here */
            $DateUpdateCheck = $this->mobile_model->get_all_details(PRODUCT_BOOKING,array('product_id'=>$property_id,'dateto'=>$this->input->post('dateto'),'datefrom'=>$this->input->post('datefrom')));
            $getPrice = $this->mobile_model->get_all_details(PRODUCT, array('id'=>$property_id));
            $price=$getPrice->row()->price;
            if($DateUpdateCheck->num_rows() == '1'){
                $DateArr=$this->GetDays1($this->input->post('datefrom'), $this->input->post('dateto'));
                $dateDispalyRowCount=0;
                if(!empty($DateArr)){
                    $dateArrVAl .='{';
                    foreach($DateArr as $dateDispalyRow){
                        if($dateDispalyRowCount==0){
                            $dateArrVAl .='"'.$dateDispalyRow.'":{"available":"1","bind":0,"info":"","notes":"","price":"'.$price.'","promo":"","status":"available"}';
                        }else{
                            $dateArrVAl .=',"'.$dateDispalyRow.'":{"available":"1","bind":0,"info":"","notes":"","price":"'.$price.'","promo":"","status":"available"}';
                        }
                        $dateDispalyRowCount=$dateDispalyRowCount+1;
                    }
                    $dateArrVAl .='}';
                }
//          echo $dateArrVAl;die;
                $inputArr4=array();
                $inputArr4 = array(
                    'id' =>$property_id,
                    'data' => trim($dateArrVAl)
                );
                $this->mobile_model->update_details(SCHEDULE,$inputArr4,array('id'=>$property_id));
            }
            $inputArr3=array();
            $inputArr3 = array(
                'dateto' => $this->input->post('dateto'),
                'datefrom' => $this->input->post('datefrom'),
                'price' => $this->input->post('price'),
            );
            $this->mobile_model->update_details(PRODUCT_BOOKING,$inputArr3,array('product_id' => $property_id));
            //$json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$property_id));
        }
        $catID = $property_id;
        /* Get the property details */
        $attributes=array();
        $where1 = array('p.id'=>$catID);
        $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.instant_pay,p.request_to_book,p.space,p.cancel_description,p.cancel_percentage');
        $this->db->from(PRODUCT.' as p');
        $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
        $this->db->where($where1);
        $rental_details = $this->db->get();
        /* Get Cancellation Policy detail starts */
        $seourl = 'cancellation-policy';
        $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
        $cancellation_policy_description  = "";
        $cancellation_policy_title        = "";
        if($pageDetails->num_rows()>0) {
            foreach($pageDetails->result() as $page){
                $cancellation_policy_description  = $page->description;
                $cancellation_policy_title        = $page->page_title;
            }
        }
        /* Get Cancellation Policy detail ends */
        $photos = array();
        if($rental_details->num_rows() == 1) {
            $this->db->from(PRODUCT_PHOTOS);
            $this->db->where('product_id',$catID);
            $this->db->order_by('imgPriority','asc');
            $productImages = $this->db->get();
            if($productImages->num_rows()>0) {
                foreach($productImages->result() as $prd_Images){
                    $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                }
            }
            foreach($rental_details->result() as $rental_detail){
                if($rental_detail->listings !=""){
                    $attributes[] = json_decode($rental_detail->listings);
                    $array_attributes = (array) $attributes[0];
                } else {
                    if($rental_detail->accommodates!="") {
                        //fc_listing_child where parent_id=".$listing_id." and status=0"
                        $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE A.status='Active' and B.id=".$rental_detail->accommodates;
                        $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                        foreach($listing_values_v1->result() as $listnamev1) {
                            $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                        }
                        $array_attributes = $attributes[0];
                    }
                }
                if($rental_detail->house_rules == ''){
                    $house_rules = '';
                }else{
                    $house_rules = $rental_detail->house_rules;
                }
                if($rental_detail->guest_access == ''){
                    $guest_access = '';
                }else{
                    $guest_access = $rental_detail->guest_access;
                }
                if($rental_detail->interact_guest == ''){
                    $interact_guest = '';
                }else{
                    $interact_guest = $rental_detail->interact_guest;
                }
                if($rental_detail->neighbor_overview == ''){
                    $neighbor_overview = '';
                }else{
                    $neighbor_overview = $rental_detail->neighbor_overview;
                }
                if($rental_detail->neighbor_around == ''){
                    $neighbor_around = '';
                }else{
                    $neighbor_around = $rental_detail->neighbor_around;
                }
                if($rental_detail->other_thingnote == ''){
                    $other_things_to_note = '';
                }else{
                    $other_things_to_note = $rental_detail->other_thingnote;
                }
                if($rental_detail->instant_pay == ''){
                    $instant_pay = 'No';
                }else{
                    $instant_pay = $rental_detail->instant_pay;
                }
                if($rental_detail->request_to_book == ''){
                    $request_to_book = 'Yes';
                }else{
                    $request_to_book = $rental_detail->request_to_book;
                }
                if($rental_detail->space == ''){
                    $space = '';
                }else{
                    $space = $rental_detail->space;
                }
                $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                $calendar_status = false;
                if($rental_detail->status == 'Publish' ){
                    $calendar_status = true;
                }
                $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                $price ="";
                if($rental_detail->price !=0){
                    $price = floatval($rental_detail->price);
                }
                $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                $step4 = array("propertyid"=>$catID,"admin_instant_pay_staus"=>$instant_pay_staus,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$other_things_to_note,"house_rules"=>$house_rules,"interact_guest"=>$interact_guest,"neighbor_overview"=>$neighbor_overview,"neighbor_around"=>$neighbor_around,"guest_access"=>$guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space);
                $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,'cancel_description'=>$rental_detail->cancel_description,'cancel_percentage'=>$rental_detail->cancel_percentage);
                $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
            }
            $step_empty1=0;
            if (in_array('', $step1)) { $step_empty1++; }
            if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
            $step1 = array_merge($array1, $step1);
            $step22[] = $step2['calendar_checked'];
            $step_empty2=0;
            if (in_array('',$step22)) { $step_empty2++; }
            if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
            $step2 = array_merge($array2, $step2);
            $step_empty3=0;
            if (in_array('', $step3)) { $step_empty3++; }
            if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
            $step3 = array_merge($array3, $step3);
            $step_empty4=0;
            if (in_array('', $step4_chk)) { $step_empty4++; }
            if($step_empty4>0){ $array4 = array("step_completed"=>false); } else { $array4 = array("step_completed"=>true); }
            $step4 = array_merge($array4, $step4);
            $step_empty5=0;
            if (empty($photos)) { $step_empty5++; }
            if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
            $step5 = array_merge($array5, $step5);
            $step_empty6=0;
            if (in_array('', $step6)) { $step_empty6++; }
            if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
            $step6 = array_merge($array6, $step6);
            $step_empty7=0;
            /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
            $select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
            if (!empty($attributes) && (count($array_attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
            //if (in_array('', $step7)) { $step_empty7++; }
            if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
            $step7 = array_merge($array7, $step7);
            $step_empty8=0;
            if (in_array('', $step8)) { $step_empty8++; }
            if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
            $step8 = array_merge($array8, $step8);
            $step_empty9=0;
            if (in_array('', $step9_chk)) { $step_empty9++; }
            if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
            $step9 = array_merge($array9, $step9);
            $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
            $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes" => $property_attributes,"currency" =>$currencyvalueArr));
        } else {
            $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
        }
        echo $json_encode;
    }
    /* ADD PROPERTY STEP3 PRICE */
    public function mobile_add_property_step3()
    {
        $user_id =$this->input->post('user_id');
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyvalueArr = array();
        if($currency_values->num_rows() >0) {
            foreach($currency_values->result() as $cur_value) {
                $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }
        /*get instant pay status for selecting payment option*/
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        $roombedVal=array();
        $roombedVal1=array();
        $select_qry = "select * from fc_listings where id=1";
        $list_values = $this->mobile_model->ExecuteQuery($select_qry);
        if($list_values->num_rows()>0){
            foreach($list_values->result() as   $list){
                $roombedVal[] =json_decode($list->listing_values);
                $roombedVal1[] =json_decode($list->rooms_bed);
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        $select_qrys = "select * from fc_listing_types where status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Charles 18-3-2017 Child Name*********/
                /***********Charles 2-3-2017 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $listing_child_type = $listing_child->type;
                            $listing_child_labelname = $listing_child->labelname;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        if ($user_id=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Please sign in before listing your rental'));
        }
        else
        {
            $property_id = intval($this->input->post('property_id'));
            $value = $this->input->post('currency_code');
            $price = $this->input->post('price');
            $this->mobile_model->update_details(PRODUCT,array('price'=>$price,'currency'=>$value),array('id'=>$property_id));
            if($property_id != ''){
                $product_id = intval($this->input->post('property_id'));
                $DateUpdateCheck = $this->mobile_model->get_all_details(PRODUCT_BOOKING,array('product_id'=>$product_id));
                if($DateUpdateCheck->num_rows() == '1'){
                    $DateArr=$this->GetDays1($DateUpdateCheck->row()->datefrom, $DateUpdateCheck->row()->dateto);
                    $dateDispalyRowCount=0;
                    if(!empty($DateArr)){
                        $dateArrVAl .='{';
                        foreach($DateArr as $dateDispalyRow){
                            if($dateDispalyRowCount==0){
                                $dateArrVAl .='"'.$dateDispalyRow.'":{"available":"1","bind":0,"info":"","notes":"","price":"'.$price.'","promo":"","status":"available"}';
                            }else{
                                $dateArrVAl .=',"'.$dateDispalyRow.'":{"available":"1","bind":0,"info":"","notes":"","price":"'.$price.'","promo":"","status":"available"}';
                            }
                            $dateDispalyRowCount=$dateDispalyRowCount+1;
                        }
                        $dateArrVAl .='}';
                    }
                    $inputArr4=array();
                    $inputArr4 = array(
                        'id' =>$product_id,
                        'data' => trim($dateArrVAl)
                    );
                    //$this->mobile_model->update_details(SCHEDULE,$inputArr4,array('id'=>$product_id));
                }
            }
            $catID = $property_id;
            /* schedule starts here */
            $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$catID));
            $sometime_arr = array();
            if($scheduleCheck->num_rows() >0){
                foreach($scheduleCheck->result() as $sc){
                    $json_decode = json_decode($sc->data);
                    foreach($json_decode as $key=>$value){
                        if($value->status=="available"){
                            $status = 1;
                        }else if($value->status=="booked"){
                            $status = 2;
                        }else if($value->status=="unavailable"){
                            $status = 3;
                        }
                        $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                    }
                }
            }
            /* schedule ends here */
            /* Get the property details */
            $attributes=array();
            $where1 = array('p.id'=>$catID);
            $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.space,p.cancel_description,p.cancel_percentage');
            $this->db->from(PRODUCT.' as p');
            $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
            $this->db->where($where1);
            $rental_details = $this->db->get();
            /* Get Cancellation Policy detail starts */
            $seourl = 'cancellation-policy';
            $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
            $cancellation_policy_description  = "";
            $cancellation_policy_title        = "";
            if($pageDetails->num_rows()>0) {
                foreach($pageDetails->result() as $page){
                    $cancellation_policy_description  = $page->description;
                    $cancellation_policy_title        = $page->page_title;
                }
            }
            /* Get Cancellation Policy detail ends */
            $photos = array();
            if($rental_details->num_rows() == 1) {
                $this->db->from(PRODUCT_PHOTOS);
                $this->db->where('product_id',$catID);
                $this->db->order_by('imgPriority','asc');
                $productImages = $this->db->get();
                if($productImages->num_rows()>0) {
                    foreach($productImages->result() as $prd_Images){
                        $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                    }
                }
                foreach($rental_details->result() as $rental_detail){
                    if($rental_detail->listings !=""){
                        $attributes[] = json_decode($rental_detail->listings);
                        $array_attributes = (array) $attributes[0];
                    }
                    else {
                        if($rental_detail->accommodates!="") {
                            //fc_listing_child where parent_id=".$listing_id." and status=0"
                            $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE A.status='Active' and B.id=".$rental_detail->accommodates;
                            $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                            foreach($listing_values_v1->result() as $listnamev1) {
                                $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                            }
                            $array_attributes = $attributes[0];
                        }
                    }
                    if($rental_detail->house_rules == ''){
                        $house_rules = '';
                    }else{
                        $house_rules = $rental_detail->house_rules;
                    }
                    if($rental_detail->guest_access == ''){
                        $guest_access = '';
                    }else{
                        $guest_access = $rental_detail->guest_access;
                    }
                    if($rental_detail->interact_guest == ''){
                        $interact_guest = '';
                    }else{
                        $interact_guest = $rental_detail->interact_guest;
                    }
                    if($rental_detail->neighbor_overview == ''){
                        $neighbor_overview = '';
                    }else{
                        $neighbor_overview = $rental_detail->neighbor_overview;
                    }
                    if($rental_detail->neighbor_around == ''){
                        $neighbor_around = '';
                    }else{
                        $neighbor_around = $rental_detail->neighbor_around;
                    }
                    if($rental_detail->other_thingnote == ''){
                        $other_things_to_note = '';
                    }else{
                        $other_things_to_note = $rental_detail->other_thingnote;
                    }
                    if($rental_detail->instant_pay == ''){
                        $instant_pay = 'No';
                    }else{
                        $instant_pay = $rental_detail->instant_pay;
                    }
                    if($rental_detail->request_to_book == ''){
                        $request_to_book = 'Yes';
                    }else{
                        $request_to_book = $rental_detail->request_to_book;
                    }
                    if($rental_detail->space == ''){
                        $space = '';
                    }else{
                        $space = $rental_detail->space;
                    }
                    $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                    $calendar_status = false;
                    if($rental_detail->status == 'Publish' ){
                        $calendar_status = true;
                    }
                    $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                    $price ="";
                    if($rental_detail->price !=0){
                        $price = floatval($rental_detail->price);
                    }
                    $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                    $step4 = array("propertyid"=>$catID,"admin_instant_pay_staus"=>$instant_pay_staus,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$other_things_to_note,"house_rules"=>$house_rules,"interact_guest"=>$interact_guest,"neighbor_overview"=>$neighbor_overview,"neighbor_around"=>$neighbor_around,"guest_access"=>$guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space);
                    $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                    $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                    $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                    $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                    $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                    $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,'cancel_description'=>$rental_detail->cancel_description,'cancel_percentage'=>$rental_detail->cancel_percentage);
                    $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
                }
                $step_empty1=0;
                if (in_array('', $step1)) { $step_empty1++; }
                if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
                $step1 = array_merge($array1, $step1);
                $step22[] = $step2['calendar_checked'];
                $step_empty2=0;
                if (in_array('',$step22)) { $step_empty2++; }
                if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
                $step2 = array_merge($array2, $step2);
                $step_empty3=0;
                if (in_array('', $step3)) { $step_empty3++; }
                if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
                $step3 = array_merge($array3, $step3);
                $step_empty4=0;
                if (in_array('', $step4_chk)) { $step_empty4++; }
                if($step_empty4>0){ $array4 = array("step_completed"=>false); } else { $array4 = array("step_completed"=>true); }
                $step4 = array_merge($array4, $step4);
                $step_empty5=0;
                if (empty($photos)) { $step_empty5++; }
                if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
                $step5 = array_merge($array5, $step5);
                $step_empty6=0;
                if (in_array('', $step6)) { $step_empty6++; }
                if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
                $step6 = array_merge($array6, $step6);
                $step_empty7=0;
                /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
                $select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
                if (!empty($attributes) && (count($array_attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
                // if (empty($attributes)) { $step_empty7++; }
                //if (in_array('', $step7)) { $step_empty7++; }
                if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
                $step7 = array_merge($array7, $step7);
                $step_empty8=0;
                if (in_array('', $step8)) { $step_empty8++; }
                if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
                $step8 = array_merge($array8, $step8);
                $step_empty9=0;
                if (in_array('', $step9_chk)) { $step_empty9++; }
                if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
                $step9 = array_merge($array9, $step9);
                $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
                $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes" => $property_attributes,"currency" =>$currencyvalueArr));
            } else {
                $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
            }
            echo $json_encode;
        }
    }
    /* ADD PROPERTY STEP4 OVERVIEW */
    public function mobile_add_property_step4()
    {
        $user_id =$this->input->post('user_id');
        $property_id = intval($this->input->post('property_id'));
        $title = $this->input->post('property_title');
        $description = $this->input->post('property_description');
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyvalueArr = array();
        if($currency_values->num_rows() >0) {
            foreach($currency_values->result() as $cur_value) {
                $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }
        /*get instant pay status for selecting payment option*/
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        $roombedVal=array();
        $roombedVal1=array();
        $select_qry = "select * from fc_listings where id=1";
        $list_values = $this->mobile_model->ExecuteQuery($select_qry);
        if($list_values->num_rows()>0){
            foreach($list_values->result() as   $list){
                $roombedVal[] =json_decode($list->listing_values);
                $roombedVal1[] =json_decode($list->rooms_bed);
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        $select_qrys = "select * from fc_listing_types WHERE status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Charles 18-3-2017 Child Name*********/
                /***********Charles 2-3-2017 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $listing_child_type = $listing_child->type;
                            $listing_child_labelname = $listing_child->labelname;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        if ($user_id=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Please sign in before listing your rental'));
        }
        else
        {
            $property_id = intval($this->input->post('property_id'));
            $title = $this->input->post('property_title');
            $description = $this->input->post('property_description');
            $other_thingnote = $this->input->post('other_things_to_note');
            $house_rules = $this->input->post('house_rules');
            $guest_access = $this->input->post('guest_access');
            $request_to_book = $this->input->post('request_to_book');
            $instant_pay = $this->input->post('instant_pay');
            $space = $this->input->post('space');
            $interact_guest = $this->input->post('interact_guest');
            $neighbor_around = $this->input->post('neighbor_around');
            $neighbor_overview = $this->input->post('neighbor_overview');
            if($property_id !="") {
                $seourl = url_title($title, '-', TRUE);
                $this->mobile_model->update_details(PRODUCT,array('product_title'=>$title,'seourl'=>$seourl,'description'=>$description,"other_thingnote"=>$other_thingnote,"house_rules"=>$house_rules,"guest_access"=>$guest_access,"instant_pay" => $instant_pay,"request_to_book" => $request_to_book,'space'=> $space,'interact_guest'=> $interact_guest,'neighbor_around'=> $neighbor_around,'neighbor_overview'=> $neighbor_overview),array('id'=>$property_id));
            }
            $catID = $property_id;
            /* schedule starts here */
            $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$catID));
            $sometime_arr = array();
            if($scheduleCheck->num_rows() >0){
                foreach($scheduleCheck->result() as $sc){
                    $json_decode = json_decode($sc->data);
                    foreach($json_decode as $key=>$value){
                        if($value->status=="available"){
                            $status = 1;
                        }else if($value->status=="booked"){
                            $status = 2;
                        }else if($value->status=="unavailable"){
                            $status = 3;
                        }
                        $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                    }
                }
            }
            /* schedule ends here */
            /* Get the property details */
            $attributes=array();
            $where1 = array('p.id'=>$catID);
            $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.instant_pay,p.request_to_book,p.space,p.cancel_description,p.cancel_percentage');
            $this->db->from(PRODUCT.' as p');
            $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
            $this->db->where($where1);
            $rental_details = $this->db->get();
            /* Get Cancellation Policy detail starts */
            $seourl = 'cancellation-policy';
            $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
            $cancellation_policy_description  = "";
            $cancellation_policy_title        = "";
            if($pageDetails->num_rows()>0) {
                foreach($pageDetails->result() as $page){
                    $cancellation_policy_description  = $page->description;
                    $cancellation_policy_title        = $page->page_title;
                }
            }
            /* Get Cancellation Policy detail ends */
            $photos = array();
            if($rental_details->num_rows() == 1) {
                $this->db->from(PRODUCT_PHOTOS);
                $this->db->where('product_id',$catID);
                $this->db->order_by('imgPriority','asc');
                $productImages = $this->db->get();
                if($productImages->num_rows()>0) {
                    foreach($productImages->result() as $prd_Images){
                        $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                    }
                }
                foreach($rental_details->result() as $rental_detail){
                    if($rental_detail->listings !=""){
                        $attributes[] = json_decode($rental_detail->listings);
                        $array_attributes = (array) $attributes[0];
                    }
                    else {
                        if($rental_detail->accommodates!="") {
                            //fc_listing_child where parent_id=".$listing_id." and status=0"
                            $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE A.status='Active' and B.id=".$rental_detail->accommodates;
                            $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                            foreach($listing_values_v1->result() as $listnamev1) {
                                $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                            }
                            $array_attributes = $attributes[0];
                        }
                    }
                    if($rental_detail->house_rules == ''){
                        $house_rules = '';
                    }else{
                        $house_rules = $rental_detail->house_rules;
                    }
                    if($rental_detail->guest_access == ''){
                        $guest_access = '';
                    }else{
                        $guest_access = $rental_detail->guest_access;
                    }
                    if($rental_detail->interact_guest == ''){
                        $interact_guest = '';
                    }else{
                        $interact_guest = $rental_detail->interact_guest;
                    }
                    if($rental_detail->neighbor_overview == ''){
                        $neighbor_overview = '';
                    }else{
                        $neighbor_overview = $rental_detail->neighbor_overview;
                    }
                    if($rental_detail->neighbor_around == ''){
                        $neighbor_around = '';
                    }else{
                        $neighbor_around = $rental_detail->neighbor_around;
                    }
                    if($rental_detail->other_thingnote == ''){
                        $other_things_to_note = '';
                    }else{
                        $other_things_to_note = $rental_detail->other_thingnote;
                    }
                    if($rental_detail->instant_pay == ''){
                        $instant_pay = 'No';
                    }else{
                        $instant_pay = $rental_detail->instant_pay;
                    }
                    if($rental_detail->request_to_book == ''){
                        $request_to_book = 'Yes';
                    }else{
                        $request_to_book = $rental_detail->request_to_book;
                    }
                    if($rental_detail->space == ''){
                        $space = '';
                    }else{
                        $space = $rental_detail->space;
                    }
                    $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                    $calendar_status = false;
                    if($rental_detail->status == 'Publish' ){
                        $calendar_status = true;
                    }
                    $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                    $price ="";
                    if($rental_detail->price !=0){
                        $price = floatval($rental_detail->price);
                    }
                    $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                    $step4 = array("propertyid"=>$catID,"admin_instant_pay_staus"=>$instant_pay_staus,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$other_things_to_note,"house_rules"=>$house_rules,"interact_guest"=>$interact_guest,"neighbor_overview"=>$neighbor_overview,"neighbor_around"=>$neighbor_around,"guest_access"=>$guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space
                    );
                    $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                    $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                    $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                    $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                    $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                    $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,'cancel_description'=>$rental_detail->cancel_description,'cancel_percentage'=>$rental_detail->cancel_percentage);
                    $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
                }
                $step_empty1=0;
                if (in_array('', $step1)) { $step_empty1++; }
                if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
                $step1 = array_merge($array1, $step1);
                $step22[] = $step2['calendar_checked'];
                $step_empty2=0;
                if (in_array('',$step22)) { $step_empty2++; }
                if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
                $step2 = array_merge($array2, $step2);
                $step_empty3=0;
                if (in_array('', $step3)) { $step_empty3++; }
                if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
                $step3 = array_merge($array3, $step3);
                $step_empty4=0;
                if (in_array('', $step4_chk)) { $step_empty4++; }
                if($step_empty4>0){ $array4 = array("step_completed"=>false,"admin_instant_pay_staus" => $instant_pay_staus); } else { $array4 = array("step_completed"=>true,"admin_instant_pay_staus" => $instant_pay_staus); }
                $step4 = array_merge($array4, $step4);
                $step_empty5=0;
                if (empty($photos)) { $step_empty5++; }
                if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
                $step5 = array_merge($array5, $step5);
                $step_empty6=0;
                if (in_array('', $step6)) { $step_empty6++; }
                if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
                $step6 = array_merge($array6, $step6);
                $step_empty7=0;
                /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
                $select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
                if (!empty($attributes) && (count($array_attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
                //if (empty($attributes)) { $step_empty7++; }
                //if (in_array('', $step7)) { $step_empty7++; }
                if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
                $step7 = array_merge($array7, $step7);
                $step_empty8=0;
                if (in_array('', $step8)) { $step_empty8++; }
                if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
                $step8 = array_merge($array8, $step8);
                $step_empty9=0;
                if (in_array('', $step9_chk)) { $step_empty9++; }
                if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
                $step9 = array_merge($array9, $step9);
                $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
                $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes" => $property_attributes,"currency" =>$currencyvalueArr));
            } else {
                $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
            }
        }
        echo $json_encode;
    }
    /* ADD PROPERTY STEP5 PHOTOS */
    public function mobile_add_property_step5() {
        $prd_id = intval($this->input->post('property_id'));
        $user_id =$this->input->post('user_id');
        if ($user_id=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Please sign in before listing your rental'));
            echo $json_encode;
            exit;
        }
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyvalueArr = array();
        if($currency_values->num_rows() >0) {
            foreach($currency_values->result() as $cur_value) {
                $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }

        /*get instant pay status for selecting payment option*/
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        $roombedVal=array();
        $roombedVal1=array();
        $select_qry = "select * from fc_listings where id=1";
        $list_values = $this->mobile_model->ExecuteQuery($select_qry);
        if($list_values->num_rows()>0){
            foreach($list_values->result() as   $list){
                $roombedVal[] =json_decode($list->listing_values);
                $roombedVal1[] =json_decode($list->rooms_bed);
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        $select_qrys = "select * from fc_listing_types WHERE status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Charles 18-3-2017 Child Name*********/
                /***********Charles 2-3-2017 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $listing_child_type = $listing_child->type;
                            $listing_child_labelname = $listing_child->labelname;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        // print_r($_POST);exit;

        //if($_FILES['photos']['name'] != '')
        //{

        $Image_name = $_FILES['photos']['name'];
        if($_POST['device_type'] == 'IOS' && $Image_name != "")
        {
            $Image_name = $_FILES['photos']['name'];

            //if($Image_name!='')
            //if($_FILES['photos']['name'] != '')
            if ($_FILES['photos']['size'] > 0)
            {
                $config['overwrite'] = FALSE;
                $config['allowed_types'] = 'jpg|jpeg|gif|png';
                $config['upload_path'] = 'images/rental/';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                if ( $this->upload->do_upload('photos')){
                    $imgDetails = $this->upload->data();
                    $condition = array('rest_id' => $prdid, 'rental_type' => $rest_type);
                    $insertdata = array('product_id'=>$prd_id, 'product_image' => $imgDetails['file_name']);
                    $imageuploadstatus = $this->mobile_model->simple_insert('fc_rental_photos', $insertdata);
                }
                else
                {
                    $json_encode = json_encode(array("status"=>0,"message" => "Choose Image File","error"=>$this->upload->display_errors()),JSON_PRETTY_PRINT);
                    echo $json_encode;
                    exit();
                }
                //   $json_encode = json_encode(array("status"=>1,"message" => "Image Inserted"),JSON_PRETTY_PRINT);
                // echo $json_encode;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message" => "Choose Image File","error"=>"Please choose valid image ext.. jpg/png"),JSON_PRETTY_PRINT);
                echo $json_encode;
                exit();
            }
        }
        else
        {
            $arr_image = explode(',',$_POST['photos']);
            if (!empty($arr_image)) {
                $i=0;
                foreach($arr_image as $img){
                    $image_name= time().$i.".jpg";
                    $ifp = fopen("images/rental/".$image_name, "wb" );
                    fwrite( $ifp, base64_decode( $img) );
                    fclose( $ifp );
                    //mysql_query("INSERT INTO fc_rental_photos(product_image,product_id) VALUES('$image_name','$prd_id')");
                    $dataArr = array('product_image'=>$image_name,'product_id'=>$prd_id);
                    $this->mobile_model->simple_insert('fc_rental_photos',$dataArr);
                    $i++;
                }
            }
            /* $arr_image = explode(',',$_POST['photos']);
           //print_r($arr_image);exit;

             if (!empty($arr_image)) {
                 $i=0;
                 foreach($arr_image as $img){
                     $image_name= time().$i.".png";
                     $image_name= time().".png";
                     $ifp = fopen("images/rental/".$image_name, "wb" );
                     fwrite( $ifp, base64_decode( $arr_image) );
                     fclose( $ifp );

                     //mysql_query("INSERT INTO fc_rental_photos(product_image,product_id) VALUES('$image_name','$prd_id')");
                     $dataArr = array('product_image'=>$image_name,'mproduct_image'=>$image_name,'product_id'=>$prd_id);
                     $this->mobile_model->simple_insert('fc_rental_photos',$dataArr);
                     $i++;
                 }
             }*/
        }
        //}
        $catID = $prd_id;
        /* schedule starts here */
        $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$catID));
        $sometime_arr = array();
        if($scheduleCheck->num_rows() >0){
            foreach($scheduleCheck->result() as $sc){
                $json_decode = json_decode($sc->data);
                foreach($json_decode as $key=>$value){
                    if($value->status=="available"){
                        $status = 1;
                    }else if($value->status=="booked"){
                        $status = 2;
                    }else if($value->status=="unavailable"){
                        $status = 3;
                    }
                    $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                }
            }
        }
        /* schedule ends here */
        /* Get the property details */
        $attributes=array();
        $where1 = array('p.id'=>$catID);
        $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.instant_pay,p.request_to_book,p.space,p.cancel_description,p.cancel_percentage');
        $this->db->from(PRODUCT.' as p');
        $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
        $this->db->where($where1);
        $rental_details = $this->db->get();
        /* Get Cancellation Policy detail starts */
        $seourl = 'cancellation-policy';
        $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
        $cancellation_policy_description  = "";
        $cancellation_policy_title        = "";
        if($pageDetails->num_rows()>0) {
            foreach($pageDetails->result() as $page){
                $cancellation_policy_description  = $page->description;
                $cancellation_policy_title        = $page->page_title;
            }
        }
        /* Get Cancellation Policy detail ends */
        $photos = array();
        if($rental_details->num_rows() == 1) {
            $this->db->from(PRODUCT_PHOTOS);
            $this->db->where('product_id',$catID);
            $this->db->order_by('imgPriority','asc');
            $productImages = $this->db->get();
            if($productImages->num_rows()>0) {
                foreach($productImages->result() as $prd_Images){
                    $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                }
            }
            foreach($rental_details->result() as $rental_detail){
                if($rental_detail->listings !=""){
                    $attributes[] = json_decode($rental_detail->listings);
                    $array_attributes = (array) $attributes[0];
                }
                else {
                    if($rental_detail->accommodates!="") {
                        //fc_listing_child where parent_id=".$listing_id." and status=0"
                        $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE A.status='Active' and B.id=".$rental_detail->accommodates;
                        $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                        foreach($listing_values_v1->result() as $listnamev1) {
                            $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                        }
                        $array_attributes = $attributes[0];
                    }
                }
                if($rental_detail->house_rules == ''){
                    $house_rules = '';
                }else{
                    $house_rules = $rental_detail->house_rules;
                }
                if($rental_detail->guest_access == ''){
                    $guest_access = '';
                }else{
                    $guest_access = $rental_detail->guest_access;
                }
                if($rental_detail->interact_guest == ''){
                    $interact_guest = '';
                }else{
                    $interact_guest = $rental_detail->interact_guest;
                }
                if($rental_detail->neighbor_overview == ''){
                    $neighbor_overview = '';
                }else{
                    $neighbor_overview = $rental_detail->neighbor_overview;
                }
                if($rental_detail->neighbor_around == ''){
                    $neighbor_around = '';
                }else{
                    $neighbor_around = $rental_detail->neighbor_around;
                }
                if($rental_detail->other_thingnote == ''){
                    $other_things_to_note = '';
                }else{
                    $other_things_to_note = $rental_detail->other_thingnote;
                }
                if($rental_detail->instant_pay == ''){
                    $instant_pay = 'No';
                }else{
                    $instant_pay = $rental_detail->instant_pay;
                }
                if($rental_detail->request_to_book == ''){
                    $request_to_book = 'Yes';
                }else{
                    $request_to_book = $rental_detail->request_to_book;
                }
                if($rental_detail->space == ''){
                    $space = '';
                }else{
                    $space = $rental_detail->space;
                }
                $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                $calendar_status = false;
                if($rental_detail->status == 'Publish' ){
                    $calendar_status = true;
                }
                $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                $price ="";
                if($rental_detail->price !=0){
                    $price = floatval($rental_detail->price);
                }
                $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                $step4 = array("propertyid"=>$catID,"admin_instant_pay_staus"=>$instant_pay_staus,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$other_things_to_note,"house_rules"=>$house_rules,"interact_guest"=>$interact_guest,"neighbor_overview"=>$neighbor_overview,"neighbor_around"=>$neighbor_around,"guest_access"=>$guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space
                );
                $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,'cancel_description'=>$rental_detail->cancel_description,'cancel_percentage'=>$rental_detail->cancel_percentage);
                $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
            }
            $step_empty1=0;
            if (in_array('', $step1)) { $step_empty1++; }
            if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
            $step1 = array_merge($array1, $step1);
            $step22[] = $step2['calendar_checked'];
            $step_empty2=0;
            if (in_array('',$step22)) { $step_empty2++; }
            if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
            $step2 = array_merge($array2, $step2);
            $step_empty3=0;
            if (in_array('', $step3)) { $step_empty3++; }
            if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
            $step3 = array_merge($array3, $step3);
            $step_empty4=0;
            if (in_array('', $step4_chk)) { $step_empty4++; }
            if($step_empty4>0){ $array4 = array("step_completed"=>false); } else { $array4 = array("step_completed"=>true); }
            $step4 = array_merge($array4, $step4);
            $step_empty5=0;
            if (empty($photos)) { $step_empty5++; }
            if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
            $step5 = array_merge($array5, $step5);
            $step_empty6=0;
            if (in_array('', $step6)) { $step_empty6++; }
            if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
            $step6 = array_merge($array6, $step6);
            $step_empty7=0;
            /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
            $select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
            if (!empty($attributes) && (count($array_attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
            //if (empty($attributes)) { $step_empty7++; }
            //if (in_array('', $step7)) { $step_empty7++; }
            if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
            $step7 = array_merge($array7, $step7);
            $step_empty8=0;
            if (in_array('', $step8)) { $step_empty8++; }
            if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
            $step8 = array_merge($array8, $step8);
            $step_empty9=0;
            if (in_array('', $step9_chk)) { $step_empty9++; }
            if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
            $step9 = array_merge($array9, $step9);
            $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
            $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes" => $property_attributes,"currency" =>$currencyvalueArr));
        } else {
            $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
        }
        echo $json_encode;
        exit;
    }
    /* ADD PROPERTY STEP6 Amenities list */
    public function mobile_add_property_step6()
    {
        $property_id = intval($this->input->post('property_id'));
        $user_id =$this->input->post('user_id');
        $device_type =$this->input->post('device_type');
        $currency_code =$this->input->post('currency_code');
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyvalueArr = array();
        if($currency_values->num_rows() >0) {
            foreach($currency_values->result() as $cur_value) {
                $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }

        /*get instant pay status for selecting payment option*/
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        $roombedVal=array();
        $roombedVal1=array();
        $select_qry = "select * from fc_listings where id=1";
        $list_values = $this->mobile_model->ExecuteQuery($select_qry);
        if($list_values->num_rows()>0){
            foreach($list_values->result() as   $list){
                $roombedVal[] =json_decode($list->listing_values);
                $roombedVal1[] =json_decode($list->rooms_bed);
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        $select_qrys = "select * from fc_listing_types WHERE status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Charles 18-3-2017 Child Name*********/
                /***********Charles 2-3-2017 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 ORDER BY child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $listing_child_type = $listing_child->type;
                            $listing_child_labelname = $listing_child->labelname;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        if ($user_id=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Please sign in before listing your rental'));
        } else {
            $excludeArr = array('string','id');
            $dataArr = array('list_name' => $this->input->post('string'));
            $condition=array('id'=>$property_id);
            $this->mobile_model->update_details(PRODUCT,array('list_name'=>$this->input->post('string')),array('id' => $property_id));
            //$this->mobile_model->commonInsertUpdate(PRODUCT,'update',$excludeArr,$dataArr,$condition);
            $catID = $property_id;
            /* schedule starts here */
            $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$catID));
            $sometime_arr = array();
            if($scheduleCheck->num_rows() >0){
                foreach($scheduleCheck->result() as $sc){
                    $json_decode = json_decode($sc->data);
                    foreach($json_decode as $key=>$value){
                        if($value->status=="available"){
                            $status = 1;
                        }else if($value->status=="booked"){
                            $status = 2;
                        }else if($value->status=="unavailable"){
                            $status = 3;
                        }
                        $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                    }
                }
            }
            /* schedule ends here */
            /* Get the property details */
            $attributes=array();
            $where1 = array('p.id'=>$catID);
            $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.instant_pay,p.space,p.request_to_book,p.cancel_description,p.cancel_percentage');
            $this->db->from(PRODUCT.' as p');
            $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
            $this->db->where($where1);
            $rental_details = $this->db->get();
            /* Get Cancellation Policy detail starts */
            $seourl = 'cancellation-policy';
            $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
            $cancellation_policy_description  = "";
            $cancellation_policy_title        = "";
            if($pageDetails->num_rows()>0) {
                foreach($pageDetails->result() as $page){
                    $cancellation_policy_description  = $page->description;
                    $cancellation_policy_title        = $page->page_title;
                }
            }
            /* Get Cancellation Policy detail ends */
            $photos = array();
            if($rental_details->num_rows() == 1) {
                $this->db->from(PRODUCT_PHOTOS);
                $this->db->where('product_id',$catID);
                $this->db->order_by('imgPriority','asc');
                $productImages = $this->db->get();
                if($productImages->num_rows()>0) {
                    foreach($productImages->result() as $prd_Images){
                        $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                    }
                }
                foreach($rental_details->result() as $rental_detail){
                    if($rental_detail->listings !=""){
                        $attributes[] = json_decode($rental_detail->listings);
                        $array_attributes = (array) $attributes[0];
                    }
                    else {
                        if($rental_detail->accommodates!="") {
                            //fc_listing_child where parent_id=".$listing_id." and status=0"
                            $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE B.id=".$rental_detail->accommodates;
                            $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                            foreach($listing_values_v1->result() as $listnamev1) {
                                $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                            }
                            $array_attributes = $attributes[0];
                        }
                    }
                    if($rental_detail->house_rules == ''){
                        $house_rules = '';
                    }else{
                        $house_rules = $rental_detail->house_rules;
                    }
                    if($rental_detail->guest_access == ''){
                        $guest_access = '';
                    }else{
                        $guest_access = $rental_detail->guest_access;
                    }
                    if($rental_detail->instant_pay == ''){
                        $instant_pay = 'No';
                    }else{
                        $instant_pay = $rental_detail->instant_pay;
                    }
                    if($rental_detail->request_to_book == ''){
                        $request_to_book = 'Yes';
                    }else{
                        $request_to_book = $rental_detail->request_to_book;
                    }
                    if($rental_detail->space == ''){
                        $space = '';
                    }else{
                        $space = $rental_detail->space;
                    }
                    if($rental_detail->interact_guest == ''){
                        $interact_guest = '';
                    }else{
                        $interact_guest = $rental_detail->interact_guest;
                    }
                    if($rental_detail->neighbor_overview == ''){
                        $neighbor_overview = '';
                    }else{
                        $neighbor_overview = $rental_detail->neighbor_overview;
                    }
                    if($rental_detail->neighbor_around == ''){
                        $neighbor_around = '';
                    }else{
                        $neighbor_around = $rental_detail->neighbor_around;
                    }
                    if($rental_detail->other_thingnote == ''){
                        $other_things_to_note = '';
                    }else{
                        $other_things_to_note = $rental_detail->other_thingnote;
                    }
                    $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                    $calendar_status = false;
                    if($rental_detail->status == 'Publish' ){
                        $calendar_status = true;
                    }
                    $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                    $price ="";
                    if($rental_detail->price !=0){
                        $price = floatval($rental_detail->price);
                    }
                    $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                    $step4 = array("propertyid"=>$catID,"admin_instant_pay_staus"=>$instant_pay_staus,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$other_things_to_note,"house_rules"=>$house_rules,"interact_guest"=>$interact_guest,"neighbor_overview"=>$neighbor_overview,"neighbor_around"=>$neighbor_around,"guest_access"=>$guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space
                    );
                    $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                    $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                    $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                    $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                    $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                    $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,'cancel_description'=>$rental_detail->cancel_description,'cancel_percentage'=>$rental_detail->cancel_percentage);
                    $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
                }
                $step_empty1=0;
                if (in_array('', $step1)) { $step_empty1++; }
                if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
                $step1 = array_merge($array1, $step1);
                $step22[] = $step2['calendar_checked'];
                $step_empty2=0;
                if (in_array('',$step22)) { $step_empty2++; }
                if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
                $step2 = array_merge($array2, $step2);
                $step_empty3=0;
                if (in_array('', $step3)) { $step_empty3++; }
                if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
                $step3 = array_merge($array3, $step3);
                $step_empty4=0;
                if (in_array('', $step4_chk)) { $step_empty4++; }
                if($step_empty4>0){ $array4 = array("step_completed"=>false); } else { $array4 = array("step_completed"=>true); }
                $step4 = array_merge($array4, $step4);
                $step_empty5=0;
                if (empty($photos)) { $step_empty5++; }
                if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
                $step5 = array_merge($array5, $step5);
                $step_empty6=0;
                if (in_array('', $step6)) { $step_empty6++; }
                if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
                $step6 = array_merge($array6, $step6);
                $step_empty7=0;
                /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
                $select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
                if (!empty($attributes) && (count($array_attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
                //if (empty($attributes)) { $step_empty7++; }
                //if (in_array('', $step7)) { $step_empty7++; }
                if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
                $step7 = array_merge($array7, $step7);
                $step_empty8=0;
                if (in_array('', $step8)) { $step_empty8++; }
                if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
                $step8 = array_merge($array8, $step8);
                $step_empty9=0;
                if (in_array('', $step9_chk)) { $step_empty9++; }
                if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
                $step9 = array_merge($array9, $step9);
                $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
                $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes" => $property_attributes,"currency" =>$currencyvalueArr));
            } else {
                $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
            }
        }
        echo $json_encode;
    }
    /* ADD PROPERTY STEP7 Listing info */
    public function mobile_add_property_step7()
    {
        $user_id = $this->input->post('user_id');
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyvalueArr = array();
        if($currency_values->num_rows() >0) {
            foreach($currency_values->result() as $cur_value) {
                $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }

        /*get instant pay status for selecting payment option*/
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        $roombedVal=array();
        $roombedVal1=array();
        $select_qry = "select * from fc_listings where id=1";
        $list_values = $this->mobile_model->ExecuteQuery($select_qry);
        if($list_values->num_rows()>0){
            foreach($list_values->result() as   $list){
                $roombedVal[] =json_decode($list->listing_values);
                $roombedVal1[] =json_decode($list->rooms_bed);
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        $select_qrys = "select * from fc_listing_types WHERE status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Charles 18-3-2017 Child Name*********/
                /***********Charles 2-3-2017 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $listing_child_type = $listing_child->type;
                            $listing_child_labelname = $listing_child->labelname;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        if ($user_id=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Please sign in before listing your rental'));
        } else {
            $property_id = intval($this->input->post('property_id'));
            $room_type = $this->input->post('room_type');
            $property_type = $this->input->post('property_type');
            $attr_values = $this->input->post('attribute');
            $attribute = json_decode($this->input->post('attribute'),true);
            if($attr_values !="") {
                foreach($attribute as $attributeTableName => $attributeTablevalue )
                {
                    $select_qrys = "select * from fc_listing_types WHERE status='Active' and id=".$attributeTableName;
                    $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
                    foreach($listing_values->result() as $listname) {
                        //if($listname->name == "minimum_stay") {
                        if($listname->name == "Minimum_stay" || $attributeTableName == 30 ) {
                            $this->mobile_model->update_details(PRODUCT,array('minimum_stay'=>$attributeTablevalue),array('id' => $property_id));
                        }
                        //if($listname->name == "accommodates") {
                        if($listname->name == "Guest_Capacity" || $attributeTableName == 31) {
                            $this->mobile_model->update_details(PRODUCT,array('accommodates'=>$attributeTablevalue),array('id' => $property_id));
                        }
                    }
                    /* if($attributeTableName == "accommodates") {              $this->mobile_model->update_details(PRODUCT,array('accommodates'=>$attributeTablevalue),array('id' => $property_id));
          }
          */
                }
            }
            $FinalsValues= array('listings'=>$attr_values,"room_type"=>$room_type,"home_type"=>$property_type);
            $this->mobile_model->update_details(PRODUCT, $FinalsValues, array('id' => $property_id));
            $catID = $property_id;
            /* schedule starts here */
            $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$catID));
            $sometime_arr = array();
            if($scheduleCheck->num_rows() >0){
                foreach($scheduleCheck->result() as $sc){
                    $json_decode = json_decode($sc->data);
                    foreach($json_decode as $key=>$value){
                        if($value->status=="available"){
                            $status = 1;
                        }else if($value->status=="booked"){
                            $status = 2;
                        }else if($value->status=="unavailable"){
                            $status = 3;
                        }
                        $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                    }
                }
            }
            /* schedule ends here */
            /* Get the property details */
            $attributes=array();
            $where1 = array('p.id'=>$catID);
            $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.request_to_book,p.instant_pay,p.space,p.cancel_description,p.cancel_percentage');
            $this->db->from(PRODUCT.' as p');
            $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
            $this->db->where($where1);
            $rental_details = $this->db->get();
            /* Get Cancellation Policy detail starts */
            $seourl = 'cancellation-policy';
            $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
            $cancellation_policy_description  = "";
            $cancellation_policy_title        = "";
            if($pageDetails->num_rows()>0) {
                foreach($pageDetails->result() as $page){
                    $cancellation_policy_description  = $page->description;
                    $cancellation_policy_title        = $page->page_title;
                }
            }
            /* Get Cancellation Policy detail ends */
            $photos = array();
            if($rental_details->num_rows() == 1) {
                $this->db->from(PRODUCT_PHOTOS);
                $this->db->where('product_id',$catID);
                $this->db->order_by('imgPriority','asc');
                $productImages = $this->db->get();
                if($productImages->num_rows()>0) {
                    foreach($productImages->result() as $prd_Images){
                        $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                    }
                }
                foreach($rental_details->result() as $rental_detail){
                    if($rental_detail->listings !=""){
                        $attributes[] = json_decode($rental_detail->listings);
                        $array_attributes = (array) $attributes[0];
                    }
                    else {
                        if($rental_detail->accommodates!="") {
                            //fc_listing_child where parent_id=".$listing_id." and status=0"
                            $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE A.status='Active' and B.id=".$rental_detail->accommodates;
                            $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                            foreach($listing_values_v1->result() as $listnamev1) {
                                $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                            }
                            $array_attributes = $attributes[0];
                        }
                    }
                    if($rental_detail->house_rules == ''){
                        $house_rules = '';
                    }else{
                        $house_rules = $rental_detail->house_rules;
                    }
                    if($rental_detail->guest_access == ''){
                        $guest_access = '';
                    }else{
                        $guest_access = $rental_detail->guest_access;
                    }
                    if($rental_detail->interact_guest == ''){
                        $interact_guest = '';
                    }else{
                        $interact_guest = $rental_detail->interact_guest;
                    }
                    if($rental_detail->neighbor_overview == ''){
                        $neighbor_overview = '';
                    }else{
                        $neighbor_overview = $rental_detail->neighbor_overview;
                    }
                    if($rental_detail->neighbor_around == ''){
                        $neighbor_around = '';
                    }else{
                        $neighbor_around = $rental_detail->neighbor_around;
                    }
                    if($rental_detail->other_thingnote == ''){
                        $other_things_to_note = '';
                    }else{
                        $other_things_to_note = $rental_detail->other_thingnote;
                    }
                    if($rental_detail->instant_pay == ''){
                        $instant_pay = 'No';
                    }else{
                        $instant_pay = $rental_detail->instant_pay;
                    }
                    if($rental_detail->request_to_book == ''){
                        $request_to_book = 'Yes';
                    }else{
                        $request_to_book = $rental_detail->request_to_book;
                    }
                    if($rental_detail->space == ''){
                        $space = '';
                    }else{
                        $space = $rental_detail->space;
                    }
                    $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                    $calendar_status = false;
                    if($rental_detail->status == 'Publish' ){
                        $calendar_status = true;
                    }
                    $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                    $price ="";
                    if($rental_detail->price !=0){
                        $price = floatval($rental_detail->price);
                    }
                    $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                    $step4 = array("propertyid"=>$catID,"admin_instant_pay_staus"=>$instant_pay_staus,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$other_things_to_note,"house_rules"=>$house_rules,"interact_guest"=>$interact_guest,"neighbor_overview"=>$neighbor_overview,"neighbor_around"=>$neighbor_around,"guest_access"=>$guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space
                    );
                    $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                    $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                    $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                    $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                    $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                    $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,'cancel_description'=>$rental_detail->cancel_description,'cancel_percentage'=>$rental_detail->cancel_percentage);
                    $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
                }
                $step_empty1=0;
                if (in_array('', $step1)) { $step_empty1++; }
                if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
                $step1 = array_merge($array1, $step1);
                $step22[] = $step2['calendar_checked'];
                $step_empty2=0;
                if (in_array('',$step22)) { $step_empty2++; }
                if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
                $step2 = array_merge($array2, $step2);
                $step_empty3=0;
                if (in_array('', $step3)) { $step_empty3++; }
                if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
                $step3 = array_merge($array3, $step3);
                $step_empty4=0;
                if (in_array('', $step4_chk)) { $step_empty4++; }
                if($step_empty4>0){ $array4 = array("step_completed"=>false); } else { $array4 = array("step_completed"=>true); }
                $step4 = array_merge($array4, $step4);
                $step_empty5=0;
                if (empty($photos)) { $step_empty5++; }
                if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
                $step5 = array_merge($array5, $step5);
                $step_empty6=0;
                if (in_array('', $step6)) { $step_empty6++; }
                if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
                $step6 = array_merge($array6, $step6);
                $step_empty7=0;
                /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
                $select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
                //if (!empty($attributes) && (count($attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
                if (!empty($attributes) && (count($array_attributes)>0)) { $step_empty7++; }
                //if (empty($attributes)) { $step_empty7++; }
                //if (in_array('', $step7)) { $step_empty7++; }
                if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
                $step7 = array_merge($array7, $step7);
                $step_empty8=0;
                if (in_array('', $step8)) { $step_empty8++; }
                if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
                $step8 = array_merge($array8, $step8);
                $step_empty9=0;
                if (in_array('', $step9_chk)) { $step_empty9++; }
                if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
                $step9 = array_merge($array9, $step9);
                $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
                $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes" => $property_attributes,"currency" =>$currencyvalueArr));
            } else {
                $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
            }
        }
        echo $json_encode;
    }
    /* ADD PROPERTY STEP8 Address location */
    public function mobile_add_property_step8()
    {
        $user_id =$this->input->post('user_id');
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyvalueArr = array();
        if($currency_values->num_rows() >0) {
            foreach($currency_values->result() as $cur_value) {
                $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }

        /*get instant pay status for selecting payment option*/
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        $roombedVal=array();
        $roombedVal1=array();
        $select_qry = "select * from fc_listings where id=1";
        $list_values = $this->mobile_model->ExecuteQuery($select_qry);
        if($list_values->num_rows()>0){
            foreach($list_values->result() as   $list){
                $roombedVal[] =json_decode($list->listing_values);
                $roombedVal1[] =json_decode($list->rooms_bed);
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        $select_qrys = "select * from fc_listing_types WHERE status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Charles 18-3-2017 Child Name*********/
                /***********Charles 2-3-2017 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $listing_child_type = $listing_child->type;
                            $listing_child_labelname = $listing_child->labelname;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        if ($user_id=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Please sign in before listing your rental'));
        } else {
            //echo '<pre>';print_r($_POST);die;
            $prd_id = intval($this->input->post('property_id'));
            $product_id = array('productId'=>$prd_id);
            $newAddress = '';
            if($this->input->post('street') != '')
                $newAddress .= ','.$this->input->post('street');
            if($this->input->post('city') != '')
                $newAddress .= ','.$this->input->post('city');
            if($this->input->post('state') != '')
                $newAddress .= ','.$this->input->post('state');
            if($this->input->post('country') != '')
                $newAddress .= ','.$this->input->post('country');
            if($this->input->post('post_code') != '')
                $newAddress .= ','.$this->input->post('post_code');
            $address = $this->input->post('address_location');
            $address = str_replace(" ", "+", $newAddress);
            $lat = $this->input->post('lat');
            $lang = $this->input->post('lng');
            $dataArr = array('address'=>$this->input->post('address_location'),
                'country'=>$this->input->post('country'),
                'state'=>$this->input->post('state'),
                'city'=>$this->input->post('city'),
                'street'=>$this->input->post('street'),
                'zip'=>$this->input->post('post_code'),
                'lat'=> $lat,
                'lang'=> $lang
            );
            $datas = array_merge($dataArr,$product_id);
            $this->data['productDetail'] = $this->mobile_model->get_all_details(PRODUCT_ADDRESS_NEW,array('productId'=>$prd_id));
            if($this->data['productDetail']->num_rows() > 0 )
            {
                $this->mobile_model->update_details(PRODUCT_ADDRESS_NEW,$dataArr,array('productId'=>$prd_id));
            }
            else
            {
                $this->mobile_model->simple_insert(PRODUCT_ADDRESS_NEW,$datas);
            }
            $dataArr = array('address'=>$this->input->post('address_location'),
                'country'=>$this->input->post('country'),
                'state'=>$this->input->post('state'),
                'city'=>$this->input->post('city'),
                'street'=>$this->input->post('street'),
                'zip'=>$this->input->post('post_code'),
                'lat'=> $lat,
                'lang'=> $lang
            );
            $catID = $prd_id;
            /* schedule starts here */
            $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$catID));
            $sometime_arr = array();
            if($scheduleCheck->num_rows() >0){
                foreach($scheduleCheck->result() as $sc){
                    $json_decode = json_decode($sc->data);
                    foreach($json_decode as $key=>$value){
                        if($value->status=="available"){
                            $status = 1;
                        }else if($value->status=="booked"){
                            $status = 2;
                        }else if($value->status=="unavailable"){
                            $status = 3;
                        }
                        $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                    }
                }
            }
            /* schedule ends here */
            /* Get the property details */
            $attributes=array();
            $where1 = array('p.id'=>$catID);
            $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.request_to_book,p.instant_pay,p.space,p.listings,p.cancel_description,p.cancel_percentage');
            $this->db->from(PRODUCT.' as p');
            $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
            $this->db->where($where1);
            $rental_details = $this->db->get();
            /* Get Cancellation Policy detail starts */
            $seourl = 'cancellation-policy';
            $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
            $cancellation_policy_description  = "";
            $cancellation_policy_title        = "";
            if($pageDetails->num_rows()>0) {
                foreach($pageDetails->result() as $page){
                    $cancellation_policy_description  = $page->description;
                    $cancellation_policy_title        = $page->page_title;
                }
            }
            /* Get Cancellation Policy detail ends */
            $photos = array();
            if($rental_details->num_rows() == 1) {
                $this->db->from(PRODUCT_PHOTOS);
                $this->db->where('product_id',$catID);
                $this->db->order_by('imgPriority','asc');
                $productImages = $this->db->get();
                if($productImages->num_rows()>0) {
                    foreach($productImages->result() as $prd_Images){
                        $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                    }
                }
                foreach($rental_details->result() as $rental_detail){
                    if($rental_detail->listings !=""){
                        $attributes[] = json_decode($rental_detail->listings);
                        $array_attributes = (array) $attributes[0];
                    }
                    else {
                        if($rental_detail->accommodates!="") {
                            //fc_listing_child where parent_id=".$listing_id." and status=0"
                            $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE A.status='Active' and B.id=".$rental_detail->accommodates;
                            $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                            foreach($listing_values_v1->result() as $listnamev1) {
                                $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                            }
                            $array_attributes = $attributes[0];
                        }
                    }
                    if($rental_detail->house_rules == ''){
                        $house_rules = '';
                    }else{
                        $house_rules = $rental_detail->house_rules;
                    }
                    if($rental_detail->guest_access == ''){
                        $guest_access = '';
                    }else{
                        $guest_access = $rental_detail->guest_access;
                    }
                    if($rental_detail->interact_guest == ''){
                        $interact_guest = '';
                    }else{
                        $interact_guest = $rental_detail->interact_guest;
                    }
                    if($rental_detail->neighbor_overview == ''){
                        $neighbor_overview = '';
                    }else{
                        $neighbor_overview = $rental_detail->neighbor_overview;
                    }
                    if($rental_detail->neighbor_around == ''){
                        $neighbor_around = '';
                    }else{
                        $neighbor_around = $rental_detail->neighbor_around;
                    }
                    if($rental_detail->other_thingnote == ''){
                        $other_things_to_note = '';
                    }else{
                        $other_things_to_note = $rental_detail->other_thingnote;
                    }
                    if($rental_detail->instant_pay == ''){
                        $instant_pay = 'No';
                    }else{
                        $instant_pay = $rental_detail->instant_pay;
                    }
                    if($rental_detail->request_to_book == ''){
                        $request_to_book = 'Yes';
                    }else{
                        $request_to_book = $rental_detail->request_to_book;
                    }
                    if($rental_detail->space == ''){
                        $space = '';
                    }else{
                        $space = $rental_detail->space;
                    }
                    $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                    $calendar_status = false;
                    if($rental_detail->status == 'Publish' ){
                        $calendar_status = true;
                    }
                    $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                    $price ="";
                    if($rental_detail->price !=0){
                        $price = floatval($rental_detail->price);
                    }
                    $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                    $step4 = array("propertyid"=>$catID,"admin_instant_pay_staus"=>$instant_pay_staus,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$other_things_to_note,"house_rules"=>$house_rules,"interact_guest"=>$interact_guest,"neighbor_overview"=>$neighbor_overview,"neighbor_around"=>$neighbor_around,"guest_access"=>$guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space
                    );
                    $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                    $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                    $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                    $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                    $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                    $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,'cancel_description'=>$rental_detail->cancel_description,'cancel_percentage'=>$rental_detail->cancel_percentage);
                    $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
                }
                $step_empty1=0;
                if (in_array('', $step1)) { $step_empty1++; }
                if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
                $step1 = array_merge($array1, $step1);
                $step22[] = $step2['calendar_checked'];
                $step_empty2=0;
                if (in_array('',$step22)) { $step_empty2++; }
                if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
                $step2 = array_merge($array2, $step2);
                $step_empty3=0;
                if (in_array('', $step3)) { $step_empty3++; }
                if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
                $step3 = array_merge($array3, $step3);
                $step_empty4=0;
                if (in_array('', $step4_chk)) { $step_empty4++; }
                if($step_empty4>0){ $array4 = array("step_completed"=>false); } else { $array4 = array("step_completed"=>true); }
                $step4 = array_merge($array4, $step4);
                $step_empty5=0;
                if (empty($photos)) { $step_empty5++; }
                if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
                $step5 = array_merge($array5, $step5);
                $step_empty6=0;
                if (in_array('', $step6)) { $step_empty6++; }
                if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
                $step6 = array_merge($array6, $step6);
                $step_empty7=0;
                /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
                if($rental_detail->listings != ''){ $step_empty7++; }
                //$select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
                //if (!empty($attributes) && (count($array_attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
                //if (empty($attributes)) { $step_empty7++; }
                //if (in_array('', $step7)) { $step_empty7++; }
                if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
                $step7 = array_merge($array7, $step7);
                $step_empty8=0;
                if (in_array('', $step8)) { $step_empty8++; }
                if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
                $step8 = array_merge($array8, $step8);
                $step_empty9=0;
                if (in_array('', $step9_chk)) { $step_empty9++; }
                if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
                $step9 = array_merge($array9, $step9);
                $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
                $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes" => $property_attributes,"currency" =>$currencyvalueArr));
            } else {
                $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
            }
        }
        echo $json_encode;
    }
    /* ADD PROPERTY STEP9 Cancellation */
    public function mobile_add_property_step9()
    {
        $user_id =$this->input->post('user_id');
        $cancellation_policy = "";$security_deposit = "";$meta_title = "";$meta_keyword = "";$meta_description = "";
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyvalueArr = array();
        if($currency_values->num_rows() >0) {
            foreach($currency_values->result() as $cur_value) {
                $currencyvalueArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }

        /*get instant pay status for selecting payment option*/
        $admin_settings = $this->mobile_model->get_all_details (MODULES_MASTER, array('module_name' => 'payment_option'));
        $admin_settings->row()->status == '1' ? $instant_pay_staus = 'allowed' : $instant_pay_staus = 'not allowed';

        $parent_select_qry = "select id,attribute_name,status from fc_attribute where status='Active'";
        $parent_list_values = $this->mobile_model->ExecuteQuery($parent_select_qry);
        $attribute = array();
        $property = array();
        $rooms = array();
        $conditions = array('status'=>'Active','id'=>9);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Property and Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>9);
                $property_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($property_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($property_listvalue->result() as $prty) {
                        $propertyvalueArr[] = array("child_id" =>$prty->id,"child_name"=>$prty->list_value,"child_image"=>base_url()."images/attribute/".$prty->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $property[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        $conditions = array('status'=>'Active','id'=>10);
        $property_space = $this->mobile_model->get_all_details (LISTSPACE, $conditions);
        /* Room Type and so on */
        if($property_space->num_rows()>0) {
            foreach($property_space->result() as $pro) {
                $conditions1 = array('status'=>'Active','other'=>'Yes','listspace_id'=>10);
                $room_listvalue = $this->mobile_model->get_all_details (LISTSPACE_VALUES, $conditions1);
                if($room_listvalue->num_rows()>0) {
                    $propertyvalueArr = array();
                    foreach($room_listvalue->result() as $room) {
                        $propertyvalueArr[] = array("child_id" =>$room->id,"child_name"=>$room->list_value,"child_image"=>base_url()."images/attribute/".$room->image,"parent_name"=>$pro->attribute_name,"parent_id"=>$pro->id);
                    }
                    $rooms[]  = array("option_id"=>$pro->id,"option_name"=>$pro->attribute_name,"options"=>$propertyvalueArr);
                }
            }
        }
        /* Features of amenties,extras ,wifi and so on */
        if($parent_list_values->num_rows()>0) {
            foreach($parent_list_values->result() as $parent_value) {
                $select_qrys = "select fc_list_values.id,list_value,list_id,fc_attribute.id as attr_id,attribute_name,image from fc_list_values left join fc_attribute  on fc_attribute.id = fc_list_values.list_id where fc_list_values.status='Active' and list_id = ".$parent_value->id;
                $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
                if($list_values->num_rows()>0) {
                    $listvalueArr = array();
                    foreach($list_values->result() as $list_value) {
                        if($parent_value->id == $list_value->list_id) {
                            $listvalueArr[] = array("child_id" =>$list_value->id,"child_name"=>$list_value->list_value,"child_image"=>base_url()."images/attribute/".$list_value->image,"parent_name"=>$list_value->attribute_name,"parent_id"=>$list_value->attr_id);
                        }
                    }
                    $attribute[]  = array("option_id"=>$parent_value->id,"option_name"=>$parent_value->attribute_name,"options"=>$listvalueArr);
                }
            }
        }
        $roombedVal=array();
        $roombedVal1=array();
        $select_qry = "select * from fc_listings where id=1";
        $list_values = $this->mobile_model->ExecuteQuery($select_qry);
        if($list_values->num_rows()>0){
            foreach($list_values->result() as   $list){
                $roombedVal[] =json_decode($list->listing_values);
                $roombedVal1[] =json_decode($list->rooms_bed);
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        $select_qrys = "select * from fc_listing_types where status='Active'";
        $listing_values = $this->mobile_model->ExecuteQuery($select_qrys);
        $property_attributes = array();
        if($listing_values->num_rows()>0)
        {
            foreach($listing_values->result() as $listing_parent)
            {
                $listing_id = $listing_parent->id;
                $listing_name = $listing_parent->name;
                $listing_type = $listing_parent->type;
                $listing_labelname = $listing_parent->labelname;
                $listing_use_propertyattribute = (($listing_parent->delete_list_status==1)?true:false);
                /***********Charles 18-3-2017 Child Name*********/
                /***********Charles 2-3-2017 Child Name*********/
                $select_qryy = "select * from fc_listing_child where parent_id=".$listing_id." and status=0 order by child_name ASC";
                $list_valuesy = $this->mobile_model->ExecuteQuery($select_qryy);
                //print_r($list_valuesy->result()); exit;
                $property_child_attributes = array();
                if($list_valuesy->num_rows()>0){
                    if($listing_type=="option") {
                        foreach($list_valuesy->result() as $listing_child){
                            $listing_child_id = $listing_child->id;
                            $listing_child_name = $listing_child->child_name;
                            $listing_child_type = $listing_child->type;
                            $listing_child_labelname = $listing_child->labelname;
                            $property_child_attributes[] = array("attribute_child_id"=>intval($listing_child_id),"attribute_parent_name"=>$listing_name,"attribute_child_value"=>$listing_child_name);
                        }
                    }
                }
                if($listing_type=="option" && $list_valuesy->num_rows()==0) {
                }
                else
                {
                    $property_attributes[] = array("attribute_id"=>intval($listing_id),"attribute_type"=>$listing_type,"attribute_name"=>$listing_name,"attribute_label"=>$listing_labelname,"use_property_attribute"=>$listing_use_propertyattribute,"attribute_value"=>$property_child_attributes);
                }
            }
        }
        /***********Charles 18-3-2017 Parent Name*********/
        //echo "user_id=".$user_id."ccc";
        //exit;
        if ($user_id=='')
        {
            $json_encode = json_encode(array('status'=>0,'message'=>'Please sign in before listing your rental'));
        } else {
            $catID = intval($this->input->post('property_id'));
            if($catID !="") {
                $cancellation_policy = $this->input->post('cancellation_policy');
                $cancel_percentage = $this->input->post('cancel_percentage');
                $security_deposit = $this->input->post('security_deposit');
                $cancel_description = $this->input->post('cancel_description');
                $meta_title = $this->input->post('meta_title');
                $meta_keyword = $this->input->post('meta_keyword');
                $meta_description = $this->input->post('meta_description');
                $this->mobile_model->update_details(PRODUCT,
                    array('cancellation_policy'=>$cancellation_policy,'security_deposit'=>$security_deposit,'cancel_description'=>$cancel_description,'meta_title'=>$meta_title,'meta_keyword'=>$meta_keyword,'meta_description'=>$meta_description,'cancel_percentage'=>$cancel_percentage),array('id'=>$catID));
                /* Get the property details */
                /* schedule starts here */
                $scheduleCheck = $this->mobile_model->get_all_details('schedule',array('id'=>$catID));
                $sometime_arr = array();
                if($scheduleCheck->num_rows() >0){
                    foreach($scheduleCheck->result() as $sc){
                        $json_decode = json_decode($sc->data);
                        foreach($json_decode as $key=>$value){
                            if($value->status=="available"){
                                $status = 1;
                            }else if($value->status=="booked"){
                                $status = 2;
                            }else if($value->status=="unavailable"){
                                $status = 3;
                            }
                            $sometime_arr[] = array("date"=>$key,"price"=>floatval($value->price),"status"=>$status);
                        }
                    }
                }
                /* schedule ends here */
                $attributes=array();
                $where1 = array('p.id'=>$catID);
                $attributes=array();
                $where1 = array('p.id'=>$catID);
                $this->db->select('p.home_type,p.id,p.accommodates,p.room_type,p.price,p.currency,p.status,p.calendar_checked,pa.address,p.description,p.product_title,p.other_thingnote,p.house_rules,p.list_name,p.listings,pa.address,pa.country,pa.state,pa.city,pa.street,pa.zip,pa.lat,pa.lang,p.cancellation_policy,p.security_deposit,p.meta_title,p.meta_keyword,p.meta_description,p.guest_access,p.interact_guest,p.neighbor_overview,p.neighbor_around,p.request_to_book,p.instant_pay,p.space,p.listings,p.cancel_description,p.cancel_percentage');
                $this->db->from(PRODUCT.' as p');
                $this->db->join(PRODUCT_ADDRESS_NEW.' as pa',"pa.productId=p.id","LEFT");
                $this->db->where($where1);
                $rental_details = $this->db->get();
                /* Get Cancellation Policy detail starts */
                $seourl = 'cancellation-policy';
                $pageDetails = $this->mobile_model->get_all_details(CMS,array('seourl'=>$seourl,'status'=>'Publish'));
                $cancellation_policy_description  = "";
                $cancellation_policy_title        = "";
                if($pageDetails->num_rows()>0) {
                    foreach($pageDetails->result() as $page){
                        $cancellation_policy_description  = $page->description;
                        $cancellation_policy_title        = $page->page_title;
                    }
                }
                /* Get Cancellation Policy detail ends */
                $photos = array();
                if($rental_details->num_rows() == 1) {
                    $this->db->from(PRODUCT_PHOTOS);
                    $this->db->where('product_id',$catID);
                    $this->db->order_by('imgPriority','asc');
                    $productImages = $this->db->get();
                    if($productImages->num_rows()>0) {
                        foreach($productImages->result() as $prd_Images){
                            $photos[] =array("product_image_id"=>intval($prd_Images->id),"product_image"=>base_url().'images/rental/'.$prd_Images->product_image);
                        }
                    }
                    foreach($rental_details->result() as $rental_detail){
                        if($rental_detail->listings !=""){
                            $attributes[] = json_decode($rental_detail->listings);
                            $array_attributes = (array) $attributes[0];
                        }
                        else {
                            if($rental_detail->accommodates!="") {
                                //fc_listing_child where parent_id=".$listing_id." and status=0"
                                $select_qrys = "select B.* from fc_listing_types A inner join fc_listing_child B on A.id=B.parent_id WHERE A.status='Active' and B.id=".$rental_detail->accommodates;
                                $listing_values_v1 = $this->mobile_model->ExecuteQuery($select_qrys);
                                foreach($listing_values_v1->result() as $listnamev1) {
                                    $attributes[] = array($listnamev1->parent_id=>intval($listnamev1->id));
                                }
                                $array_attributes = $attributes[0];
                            }
                        }
                        if($rental_detail->house_rules == ''){
                            $house_rules = '';
                        }else{
                            $house_rules = $rental_detail->house_rules;
                        }
                        if($rental_detail->guest_access == ''){
                            $guest_access = '';
                        }else{
                            $guest_access = $rental_detail->guest_access;
                        }
                        if($rental_detail->interact_guest == ''){
                            $interact_guest = '';
                        }else{
                            $interact_guest = $rental_detail->interact_guest;
                        }
                        if($rental_detail->neighbor_overview == ''){
                            $neighbor_overview = '';
                        }else{
                            $neighbor_overview = $rental_detail->neighbor_overview;
                        }
                        if($rental_detail->neighbor_around == ''){
                            $neighbor_around = '';
                        }else{
                            $neighbor_around = $rental_detail->neighbor_around;
                        }
                        if($rental_detail->other_thingnote == ''){
                            $other_things_to_note = '';
                        }else{
                            $other_things_to_note = $rental_detail->other_thingnote;
                        }
                        if($rental_detail->instant_pay == ''){
                            $instant_pay = 'No';
                        }else{
                            $instant_pay = $rental_detail->instant_pay;
                        }
                        if($rental_detail->request_to_book == ''){
                            $request_to_book = 'Yes';
                        }else{
                            $request_to_book = $rental_detail->request_to_book;
                        }
                        if($rental_detail->space == ''){
                            $space = '';
                        }else{
                            $space = $rental_detail->space;
                        }
                        $step1 = array("propertyid"=>$catID,"home_type"=>$rental_detail->home_type,"room_type"=>$rental_detail->room_type,"accommodates"=>$rental_detail->accommodates,"address"=>$rental_detail->address,"status"=>$rental_detail->status);
                        $calendar_status = false;
                        if($rental_detail->status == 'Publish' ){
                            $calendar_status = true;
                        }
                        $step2 = array("propertyid"=>$catID,"calendar_checked"=>$rental_detail->calendar_checked,"dateto"=>"","datefrom"=>"","calendar_status"=>$calendar_status,"seasonal_calendar_price"=>$sometime_arr);
                        $price ="";
                        if($rental_detail->price !=0){
                            $price = floatval($rental_detail->price);
                        }
                        $step3 = array("propertyid"=>$catID,"currency_code"=>$rental_detail->currency,"price"=>$price,"chk"=>"price");
                        $step4 = array("propertyid"=>$catID,"admin_instant_pay_staus"=>$instant_pay_staus,"property_title"=>$rental_detail->product_title,"property_description"=>$rental_detail->description,"other_things_to_note"=>$other_things_to_note,"house_rules"=>$house_rules,"interact_guest"=>$interact_guest,"neighbor_overview"=>$neighbor_overview,"neighbor_around"=>$neighbor_around,"guest_access"=>$guest_access,"instant_pay"=>$instant_pay,"request_to_book"=>$request_to_book,"space"=>$space
                        );
                        $step4_chk = array("propertyid"=>$catID,"property_title"=>$rental_detail->product_title);
                        $step5 = array("propertyid"=>$catID,"product_image"=>$photos);
                        $step6 = array("propertyid"=>$catID,"list_name"=>$rental_detail->list_name);
                        $step7 = array("propertyid"=>$catID,"room_type"=>$rental_detail->room_type,"home_type"=>$rental_detail->home_type,"attribute"=>$attributes);
                        $step8 = array("propertyid"=>$catID,"address"=>$rental_detail->address,"country"=>$rental_detail->country,"state"=>$rental_detail->state,"city"=>$rental_detail->city,"street"=>$rental_detail->street,"zip"=>$rental_detail->zip,"lat"=>$rental_detail->lat,"long"=>$rental_detail->lang);
                        $step9 = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy,"security_deposit"=>$rental_detail->security_deposit,"meta_title"=>$rental_detail->meta_title,"meta_keyword"=>$rental_detail->meta_keyword,"meta_description"=>$rental_detail->meta_description,"property_currency"=>$rental_detail->currency,"cancellation_policy_title"=>$cancellation_policy_title,"cancellation_policy_description"=>$cancellation_policy_description,"cancel_description"=>$rental_detail->cancel_description,"cancel_percentage"=>$rental_detail->cancel_percentage);
                        $step9_chk = array("propertyid"=>$catID,"cancellation_policy"=>$rental_detail->cancellation_policy/*,"security_deposit"=>$rental_detail->security_deposit*/,"property_currency"=>$rental_detail->currency);
                    }
                    $step_empty1=0;
                    if (in_array('', $step1)) { $step_empty1++; }
                    if($step_empty1>0){ $array1 = array("step_completed"=>false); } else { $array1 = array("step_completed"=>true); }
                    $step1 = array_merge($array1, $step1);
                    $step22[] = $step2['calendar_checked'];
                    $step_empty2=0;
                    if (in_array('',$step22)) { $step_empty2++; }
                    if($step_empty2>0){ $array2 = array("step_completed"=>false); } else { $array2 = array("step_completed"=>true); }
                    $step2 = array_merge($array2, $step2);
                    $step_empty3=0;
                    if (in_array('', $step3)) { $step_empty3++; }
                    if($step_empty3>0){ $array3 = array("step_completed"=>false); } else { $array3 = array("step_completed"=>true); }
                    $step3 = array_merge($array3, $step3);
                    $step_empty4=0;
                    if (in_array('', $step4_chk)) { $step_empty4++; }
                    if($step_empty4>0){ $array4 = array("step_completed"=>false); } else { $array4 = array("step_completed"=>true); }
                    $step4 = array_merge($array4, $step4);
                    $step_empty5=0;
                    if (empty($photos)) { $step_empty5++; }
                    if($step_empty5>0){ $array5 = array("step_completed"=>false); } else { $array5 = array("step_completed"=>true); }
                    $step5 = array_merge($array5, $step5);
                    $step_empty6=0;
                    if (in_array('', $step6)) { $step_empty6++; }
                    if($step_empty6>0){ $array6 = array("step_completed"=>false); } else { $array6 = array("step_completed"=>true); }
                    $step6 = array_merge($array6, $step6);
                    $step_empty7=0;
                    /* Already accomodates filled in step first - so here after greater than show 1 so it will show the listing false (accomodates filled already) */
                    if($rental_detail->listings != ''){ $step_empty7++; }
                    //$select_qrys_cnt = $this->mobile_model->get_all_details("fc_listing_types",array('status'=>'Active'));
                    //if (!empty($attributes) && (count($array_attributes)==count($select_qrys_cnt->result()))) { $step_empty7++; }
                    // if (empty($attributes)) { $step_empty7++; }
                    //if (in_array('', $step7)) { $step_empty7++; }
                    if($step_empty7>0){ $array7 = array("step_completed"=>true); } else { $array7 = array("step_completed"=>false); }
                    $step7 = array_merge($array7, $step7);
                    $step_empty8=0;
                    if (in_array('', $step8)) { $step_empty8++; }
                    if($step_empty8>0){ $array8 = array("step_completed"=>false); } else { $array8 = array("step_completed"=>true); }
                    $step8 = array_merge($array8, $step8);
                    $step_empty9=0;
                    if (in_array('', $step9_chk)) { $step_empty9++; }
                    if($step_empty9>0){ $array9 = array("step_completed"=>false); } else { $array9 = array("step_completed"=>true); }
                    $step9 = array_merge($array9, $step9);
                    $result_arr[] = array("step1"=>$step1,"step2"=>$step2,"step3"=>$step3,"step4"=>$step4,"step5"=>$step5,"step6"=>$step6,"step7"=>$step7,"step8"=>$step8,"step9"=>$step9);
                    $json_encode = json_encode(array('status'=>1,'message'=>'Successfully saved',"propertyid"=>$catID,"result"=>$result_arr,"property" =>$property,"rooms"=>$rooms,"attribute"=>$attribute,"property_attributes" => $property_attributes,"currency" =>$currencyvalueArr));
                } else {
                    $json_encode = json_encode(array('status'=>0,'message'=>'No data found',"propertyid"=>""));
                }
            }
        }
        echo $json_encode;
    }
    /* For Calendar property add */
    public function GetDays1($sStartDate, $sEndDate){
        // Firstly, format the provided dates.
        // This function works best with YYYY-MM-DD
        // but other date formats will work thanks
        // to strtotime().
        $sStartDate = date("Y-m-d", strtotime($sStartDate));
        $sEndDate = date("Y-m-d", strtotime($sEndDate));
        // Start the variable off with the start date
        $aDays[] = $sStartDate;
        // Set a 'temp' variable, sCurrentDate, with
        // the start date - before beginning the loop
        $sCurrentDate = $sStartDate;
        // While the current date is less than the end date
        while($sCurrentDate < $sEndDate){
            // Add a day to the current date
            $sCurrentDate = date("Y-m-d", strtotime("+1 day", strtotime($sCurrentDate)));
            // Add this new day to the aDays array
            $aDays[] = $sCurrentDate;
        }
        // Once the loop has finished, return the
        // array of days.
        return $aDays;
    }
    /* GET CURRENCY VALUES */
    public function mobile_get_currency_symbol()
    {
        $currency_type=$this->input->post('currency_code');
        //echo $currency_type; exit;
        if($currency_type ==""){
            echo json_encode(array('status'=>0,'message'=>'currency code missing!'));
            exit;
        }
        $currency_symbol_query='SELECT * FROM '.CURRENCY.' where status = "Active"';
        $currency_symbol=$this->mobile_model->ExecuteQuery($currency_symbol_query);
        $currency_val = array();
        if($currency_symbol->num_rows() > 0)
        {
            foreach($currency_symbol->result() as $cur){
                $currency_rate =0;
                //if($currency_type != $cur->currency_type) {
                $currency_rate = 0;//convertCurrency_mobile($currency_type,$cur->currency_type,1);
                $currency_val[] = array('currency_symbol'=>$cur->currency_symbols,'currency_code'=>$cur->currency_type,'currency_value'=>floatval($cur->currency_rate));
                //}
            }
            echo json_encode(array('status'=>1,'message'=>'Currency Available','currency_list'=>$currency_val));
        }
        else{
            echo json_encode(array('status'=>0,'message'=>'No currency available','currency_values'=>$currency_val));
        }
    }
    /* check file extension */
    public function getExtension($str)
    {
        $i = strrpos($str,".");
        if (!$i) { return ""; }
        $l = strlen($str) - $i;
        $ext = substr($str,$i+1,$l);
        return $ext;
    }
    /* GET USER DETAILS */
    public function json_user_details()
    {
        $userid = $_POST['userid'];
        $currency_code = $_POST['currency_code'];
        $rental_type = 1;
        if($userid == "") {
            echo json_encode(array('status'=>0,'message'=>$this->parm_missing));
            exit;
        }
        $userDetails = $this->db->query('select * from '.USERS.' where `id`="'.$userid.'"');
        //echo $this->db->last_query();
        $user_details = array();
        $trust = array();
        $user_list = array();
        $overAll_unread_count = $this->mobile_model->overAll_unread_count($userid);
        if($userDetails->num_rows() >0) {
            foreach($userDetails->result() as $u) {
                if($u->image != ''){
                    $userimg = base_url().'images/users/'.$u->image;
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($u->is_verified=='Yes'){ $is_verified=true; } elseif($u->is_verified =='No'){ $is_verified=false; }else{ $is_verified=""; }
                if($u->id_verified=='Yes'){ $id_verified=true; } elseif($u->id_verified =='No'){ $id_verified=false; }else{ $id_verified=""; }
                if($u->ph_verified=='Yes'){ $ph_verified=true; } elseif($u->ph_verified =='No'){ $ph_verified=false; }else{ $ph_verified=""; }
                if($u->is_brand=='yes'){ $is_brand=true; } elseif($u->is_brand =='no'){ $is_brand=false; }else{ $is_brand=""; }
                if($u->display_lists=='Yes'){ $display_lists=true; } elseif($u->display_lists =='No'){ $display_lists=false; }else{ $display_lists=""; }
                if($u->social_recommend=='yes'){ $social_recommend=true; } elseif($u->social_recommend =='no'){ $social_recommend=false; }else{ $social_recommend=""; }
                if($u->search_by_profile=='yes'){ $search_by_profile=true; } elseif($u->search_by_profile =='no'){ $search_by_profile=false; }else{ $search_by_profile=""; }
                if($u->subscriber=='Yes'){ $subscriber=true; } elseif($u->subscriber =='No'){ $subscriber=false; }else{ $subscriber=""; }
                if($u->twitter != "") {
                    if($u->twitter =='Yes') {
                        $linkedin_connect =true;
                    } else if($u->twitter =='No') {
                        $linkedin_connect =false;
                    } else {
                        $linkedin_connect = '';
                    }
                }else{
                    $linkedin_connect = '';
                }
                if($u->google != "") {
                    if($u->google =='Yes') {
                        $google_connect =true;
                    } else if($u->google =='No') {
                        $google_connect =false;
                    } else {
                        $google_connect = '';
                    }
                }else{
                    $google_connect = '';
                }
                if($u->facebook != "") {
                    if($u->facebook =='Yes') {
                        $facebook_connect =true;
                    } else if($u->facebook =='No') {
                        $facebook_connect =false;
                    } else {
                        $facebook_connect = '';
                    }
                }else{
                    $facebook_connect = '';
                }
                $languages = $this->mobile_model->get_all_details(LANGUAGES_KNOWN,array());
                $languages_known=explode(',',$u->languages_known);
                $languages_known_text='';
                foreach($languages->result() as $language)
                {
                    if(in_array($language->language_code,$languages_known))
                    {
                        $languages_known_text .=$language->language_name.',';
                    }
                }
                /*Get count cancellation response pending count*/
                $cancellation_aboutYou_count=$this->mobile_model->cancellation_aboutYou_count($userid);
                $cancel_byYou_count= $this->mobile_model->cancel_byYou_count($userid);
                /*Get count of dispute status pending, processing, completed, rejected */
                $dispute_aboutYou_count = $this->mobile_model->get_all_details(DISPUTE,array('disputer_id'=>$userid,'status'=>'Pending','cancel_status'=>0));
                $dispute_byYou_count = $this->mobile_model->get_all_details(DISPUTE,array('user_id'=>$userid,'status'=>'Pending','cancel_status'=>0));
                $lang = substr($languages_known_text,0,-1);
                if($languages_known_text ==''){ $lang ='None Selected'; }
                if($u->school !="") { $school = $u->school; } else { $school="";}
                if($u->work !="") { $work = $u->work; } else { $work="";}
                $trust[] = array(
                    "phone_verified"=>$ph_verified,
                    "email_id_verified"=>$id_verified,
                    "country"=>intval($u->ph_country),
                    "phone"=>$u->phone_no,
                    "linkedin_connect"=>$linkedin_connect,
                    "facebook_connect"=>$facebook_connect,
                    "google_connect"=>$google_connect);
                $user_list[] = array(
                    "id"=>intval($u->id),
                    "loginUserType"=>$u->loginUserType,
                    "facebook_id"=>$u->f_id,
                    "google_id"=>$u->google_id,
                    "linkedin_id"=>$u->linkedin_id,
                    "group"=>$u->group,
                    "email"=>$u->email,
                    "status"=>$u->status,
                    "is_verified"=>$is_verified,
                    "id_verified"=>$id_verified,
                    "ph_verified"=>$ph_verified,
                    "is_brand"=>$is_brand,
                    "created"=>$u->created,
                    "last_login_date"=>$u->last_login_date,
                    "last_logout_date"=>$u->last_logout_date,
                    "firstname"=>$u->firstname,
                    "lastname"=>$u->lastname,
                    "description"=>$u->description,
                    "gender"=>$u->gender,
                    "dob_date"=>$u->dob_date,
                    "dob_month"=>$u->dob_month,
                    "dob_year"=>$u->dob_year,
                    "country"=>intval($u->country),
                    "phone_no"=>$u->phone_no,
                    "where_you_live"=>$u->s_city,
                    "request_status"=>$u->request_status,
                    "verify_code"=>$u->verify_code,
                    "feature_product"=>$u->feature_product,
                    "followers_count"=>$u->followers_count,
                    "following_count"=>$u->following_count,
                    "language"=>$u->language,
                    "visibility"=>$u->visibility,
                    "display_lists"=>$display_lists,
                    "email_notifications"=>$u->email_notifications,
                    "notifications"=>$u->notifications,
                    "updates"=>$u->updates,
                    "package_status"=>$u->package_status,
                    "expired_date"=> $u->expired_date,
                    "social_recommend"=>$social_recommend,
                    "search_by_profile"=>$search_by_profile,
                    "languages_known"=>$lang,
                    "school"=>$school,
                    "work"=>$work,
                    "accname"=>$u->accname,
                    "accno"=>$u->accno,
                    "bankname"=>$u->bankname,
                    "subscriber"=>$subscriber,
                    "login_hit"=>$u->login_hit,
                    "user_image"=>$userimg,
                    'cancellation_aboutYou_count'=>$cancellation_aboutYou_count->num_rows(),
                    'cancellation_byYou_count'=>$cancel_byYou_count->num_rows(),
                    'dispute_aboutYou_count'=>$dispute_aboutYou_count->num_rows(),
                    'dispute_byYou_count'=>$dispute_byYou_count->num_rows(),
                    'overAll_unread_count'=>$overAll_unread_count,
                );
            }
        }
        /* Country List starts here */
        $country_list = array();
        $country_query='SELECT id,name FROM '.LOCATIONS.' WHERE status="Active" order by name';
        $active_countries = $this->mobile_model->ExecuteQuery($country_query);
        if($active_countries->num_rows() >0) {
            foreach($active_countries->result() as $cntry) {
                $country_list[] = array("id"=>intval($cntry->id),"country_name"=>$cntry->name);
            }
        }
        /*  Country List ends here */
        /* Reviews starts here */
        if($rental_type == 1 || $rental_type == 2 || $rental_type == 3)
        {
            $Review_about_you = $this->mobile_model->get_productreview_aboutyou($userid,$rental_type);
            $Review_by_you = $this->mobile_model->get_productreview_byyou($userid,$rental_type);
        }
        elseif($rental_type == 5 || $rental_type == 4)
        {
            $Review_about_you = $this->mobile_model->get_vehicleview_aboutyou($userid,$rental_type);
            $Review_by_you = $this->mobile_model->get_vehiclereview_byyou($userid,$rental_type);
        }
        elseif($rental_type == 6)
        {
            $Review_about_you = $this->mobile_model->get_restreview_aboutyou($userid);
            $Review_by_you = $this->mobile_model->get_restreview_byyou($userid);
        }
        else
        {
            $Review_about_you = $this->mobile_model->get_productreview_aboutyou($userid,$rental_type);
            $Review_by_you = $this->mobile_model->get_productreview_byyou($userid,$rental_type);
        }
        $rev_abt_you = array();
        $rev_by_you = array();
        if($Review_about_you->num_rows() >0) {
            foreach($Review_about_you->result() as $rau) {
                if($rau->image != ''){
                    if($rau->loginUserType == 'google'){
                        $userimg = $rau->image;
                    } else {
                        $userimg = base_url().'images/users/'.$rau->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($rau->email !=""){ $email=$rau->email;} else { $email="";}
                if($rau->reviewer_name !=""){ $reviewer_name=$rau->reviewer_name;} else { $reviewer_name="";}
                if($rau->property_id !=""){ $property_id=$rau->property_id;} else { $property_id="";}
                if($rau->product_name !=""){ $property_name=$rau->product_name;} else { $property_name="";}
                if($rau->reviewer_id !=""){ $reviewer_id=$rau->reviewer_id;} else { $reviewer_id="";}
                if($rau->review !=""){ $review=$rau->review;} else { $review="";}
                if($rau->review_id !=""){ $review_id=$rau->review_id;} else { $review_id="";}
                $rev_abt_you[] = array(
                    "id"=>$review_id,
                    "reviewer_id"=>$reviewer_id,
                    "review_property_id"=>$property_id,
                    "review_booking_no"=>$rau->bookingno,
                    "review_property_name"=>$property_name,
                    "reviewer_name"=>$reviewer_name,
                    "reviewer_comments"=>$review,
                    "reviewer_rating"=>$rau->total_review,
                    "reviwer_image"=>$userimg,
                    "review_date"=>date("d-m-Y", strtotime($rau->dateAdded)));
            }
        }
        if($Review_by_you->num_rows() >0) {
            foreach($Review_by_you->result() as $rbu) {
                if($rbu->image != ''){
                    if($rbu->loginUserType == 'google'){
                        $userimg = $rbu->image;
                    } else {
                        $userimg = base_url().'images/users/'.$rbu->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($rbu->email !=""){ $email=$rbu->email;} else { $email="";}
                if($rbu->reviewer_name !=""){ $reviewer_name=$rbu->reviewer_name;} else { $reviewer_name="";}
                if($rbu->property_id !=""){ $property_id=$rbu->property_id;} else { $property_id="";}
                if($rbu->product_name !=""){ $property_name=$rbu->product_name;} else { $property_name="";}
                if($rbu->reviewer_id !=""){ $reviewer_id=$rbu->reviewer_id;} else { $reviewer_id="";}
                if($rbu->review !=""){ $review=$rbu->review;} else { $review="";}
                if($rbu->review_id !=""){ $review_id=$rbu->review_id;} else { $review_id="";}
                $rev_by_you[] = array(
                    "id"=>$review_id,
                    "reviewer_id"=>$reviewer_id,
                    "review_property_id"=>$property_id,
                    "review_booking_no"=>$rbu->bookingno,
                    "review_property_name"=>$property_name,
                    "reviewer_name"=>$reviewer_name,
                    "reviewer_comments"=>$review,
                    "reviewer_rating"=>$rbu->total_review,
                    "reviwer_image"=>$userimg,
                    "review_date"=>date("d-m-Y", strtotime($rbu->dateAdded)));
            }
        }
        /* Review Ends here */
        /* Dispute starts here */
        if($rental_type == 1 || $rental_type == 2 || $rental_type == 3)
        {
            $Dispute_about_you = $this->mobile_model->get_productdispute_aboutyou($userid,$rental_type);
            $Dispute_by_you = $this->mobile_model->get_productdispute_byyou($userid,$rental_type);
        }
        elseif($rental_type == 5 || $rental_type == 4)
        {
            $Dispute_about_you = $this->mobile_model->get_vehicledispute_aboutyou($userid,$rental_type);
            $Dispute_by_you = $this->mobile_model->get_vehicledispute_byyou($userid,$rental_type);
        }
        elseif($rental_type == 6)
        {
            $Dispute_about_you = $this->mobile_model->get_restdispute_aboutyou($userid);
            $Dispute_by_you = $this->mobile_model->get_restdispute_byyou($userid);
        }
        else
        {
            $Dispute_about_you = $this->mobile_model->get_productdispute_aboutyou($userid);
            $Dispute_by_you = $this->mobile_model->get_productdispute_byyou($userid);
        }
        $Dis_abt_you = array();
        $Dis_by_you = array();
        if($Dispute_about_you->num_rows() >0) {
            foreach($Dispute_about_you->result() as $dau) {
                if($dau->image != ''){
                    if($dau->loginUserType == 'google'){
                        $userimg = $dau->image;
                    } else {
                        $userimg = base_url().'images/users/'.$dau->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                /*for get dispute expired date*/
                if($dau->status == "Pending")
                {
                    if((date('Y-m-d',strtotime($dau->checkout))) < date('Y-m-d'))
                    {
                        $dispute_status = "Pending Request Expired";
                    }else{
                        $dispute_status = $dau->status;
                    }
                }else{
                    $dispute_status = $dau->status;
                }
                $Dis_abt_you[] = array(
                    "dispute_id"=>$dau->id,
                    "message"=>$dau->message,
                    "rental_name"=>$dau->product_title,
                    "host_name"=>$dau->user_name,
                    "review_email"=>$dau->email,
                    "booking_no"=>$dau->booking_no,
                    "user_image"=>$userimg,
                    "created_date"=>$dau->created_date,
                    "checkout_date"=>date('Y-m-d',strtotime($dau->checkout)),
                    "status" => $dispute_status
                );
            }
        }
        if($Dispute_by_you->num_rows() >0) {
            foreach($Dispute_by_you->result() as $dbu) {
                if($dbu->image != ''){
                    if($dbu->loginUserType == 'google'){
                        $userimg = $dbu->image;
                    } else {
                        $userimg = base_url().'images/users/'.$dbu->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($dbu->status == "Pending")
                {
                    if((date('Y-m-d',strtotime($dbu->checkout))) < date('Y-m-d'))
                    {
                        $dispute_status = "Pending Request Expired";
                    }else{
                        $dispute_status = $dbu->status;
                    }
                }else{
                    $dispute_status = $dbu->status;
                }
                $Dis_by_you[] = array(
                    "dispute_id"=>$dbu->id,
                    "message"=>$dbu->message,
                    "rental_name"=>$dbu->product_title,
                    "host_name"=>$dbu->user_name,
                    "review_email"=>$dbu->email,
                    "booking_no"=>$dbu->booking_no,
                    "user_image"=>$userimg,
                    "checkout_date"=>date('Y-m-d',strtotime($dbu->checkout)),
                    "created_date"=>$dbu->created_date,
                    "status" => $dbu->status);
            }
        }
        /* Dispute starts here */
        /*cancellation section start*/
        if($rental_type == 1 || $rental_type == 2 || $rental_type == 3)
        {
            $cancellation_about_you = $this->mobile_model->get_productcancellation_aboutyou($userid,$rental_type);
            $cancellation_by_you = $this->mobile_model->get_productcancellation_byyou($userid,$rental_type);
        }
        elseif($rental_type == 5 || $rental_type == 4)
        {
            $cancellation_about_you = $this->mobile_model->get_vehiclecancellation_aboutyou($userid,$rental_type);
            $cancellation_by_you = $this->mobile_model->get_vehiclecancellation_byyou($userid,$rental_type);
        }
        elseif($rental_type == 6)
        {
            $cancellation_about_you = $this->mobile_model->get_restcancellation_aboutyou($userid);
            $cancellation_by_you = $this->mobile_model->get_restcancellation_byyou($userid);
        }
        else
        {
            $cancellation_about_you = $this->mobile_model->get_productcancellation_aboutyou($userid,$rental_type);
            $cancellation_by_you = $this->mobile_model->get_productcancellation_byyou($userid,$rental_type);
        }
        $cancl_abt_you = array();
        $cancl_by_you = array();
        if($cancellation_about_you->num_rows() >0) {
            foreach($cancellation_about_you->result() as $dau) {
                if($dau->image != ''){
                    if($dau->loginUserType == 'google'){
                        $userimg = $dau->image;
                    } else {
                        $userimg = base_url().'images/users/'.$dau->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($dau->status == "Pending")
                {
                    if(strtotime(date('Y-m-d')) < strtotime($dau->checkin)) {
                        $status = $dau->status;
                    }
                    else{
                        $status = "Pending Request Expired";
                    }
                }else{
                    $status = $dau->status;
                }
                if($dau->user_name == "")
                {
                    $user_name = "";
                }
                $cancl_abt_you[] = array(
                    "cancel_id"=>$dau->id,
                    "property_name"=>$dau->product_title,
                    "host_name"=>(($dau->user_name != "" ) ? $dau->user_name : ""),
                    "message"=>$dau->message,
                    "review_email"=>(($dau->email != "" ) ? $dau->email : ""),
                    "booking_no"=>$dau->booking_no,
                    "user_image"=>$userimg,
                    "checkin_date"=>$dau->checkin,
                    "created_date"=>$dau->created_date,
                    "status" => $status);
            }
        }
        if($cancellation_by_you->num_rows() >0) {
            foreach($cancellation_by_you->result() as $dbu) {
                if($dbu->image != ''){
                    if($dbu->loginUserType == 'google'){
                        $userimg = $dbu->image;
                    } else {
                        $userimg = base_url().'images/users/'.$dbu->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($dbu->status == "Pending")
                {
                    if($dbu->checkin < date("Y-m-d"))//23 < 24
                    {
                        $cancel_by_status = "Pending Request Expired";
                    }else{
                        $cancel_by_status = $dbu->status;
                    }

                }else{
                    $cancel_by_status = $dbu->status;
                }
                $cancl_by_you[] = array(
                    "cancel_id"=>$dbu->id,
                    "property_name"=>$dbu->product_title,
                    "host_name"=>$dbu->user_name,
                    "message"=>$dbu->message,
                    "review_email"=>$dbu->email,
                    "booking_no"=>$dbu->booking_no,
                    "user_image"=>$userimg,
                    "checkin_date"=>$dbu->checkin,
                    "created_date"=>$dbu->created_date,
                    "status"=>$cancel_by_status);
            }
        }
        /*cancellation section start*/
        /*  Property List starts here */
        if($rental_type == 1 || $rental_type == 2 || $rental_type == 3)
        {
            $rentalDetail = $this->mobile_model->get_dashboard_list($userid,Publish,$rental_type);
            $img_pth = 'images/rental/';
        }
        elseif($rental_type == 5 || $rental_type == 4)
        {
            $rentalDetail = $this->mobile_model->get_dashboard_vehlist($userid,publish,$rental_type);
            $img_pth = 'images/vehicles/';
        }
        elseif($rental_type == 6)
        {
            $rentalDetail = $this->mobile_model->get_dashboard_restlist($userid,Publish,$rental_type);
            $img_pth = 'images/restaurant/';
        }
        else
        {
            $rentalDetail = $this->mobile_model->get_dashboard_list($userid,Publish,$rental_type);
            $img_pth = 'images/rental/';
        }
        $listingarr = array();
        if($rentalDetail->num_rows() >0) {
            foreach($rentalDetail->result() as $r) {
                if($r->product_image != ''){
                    $p_img = explode('.',$r->product_image);
                    $suffix = strrchr($r->product_image, ".");
                    $pos = strpos  ( $r->product_image  , $suffix);
                    $name = substr_replace ($r->product_image, "", $pos);
                    // echo $suffix . "<br><br>". $name;
                    $pro_img = $name.''.$suffix;
                    $proImage = base_url().$img_pth.$pro_img;
                }else{
                    $proImage = base_url().$img_pth.'dummyProductImage.jpg';
                }
                $listingarr[] = array("property_id"=>intval($r->id),"property_title"=>$r->product_title,"property_image"=>$proImage,'property_address'=>$r->address);
            }
        }
        /*  Property List ends here */
        /*Host Cancellation*/
        $host_cancel_details = array();
        $cancel_details = $this->mobile_model->get_host_calcelled_bookings($userid);
        foreach($cancel_details->result() as $host)
        {
            /*Get currency symbol*/
            $paid_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
            $currencySymbol = $paid_currency_details->row()->currency_symbols;
            $currencyCronId = $host->currency_cron_id;
            $user_currencycode = $host->user_currencycode;

            /*cancellation amount*/
            if ($user_currencycode != $currency_code)
            { $Paid = changeCurrency($user_currencycode,$currency_code,$host->paid_cancel_amount,$currencyCronId);
            } else {   $Paid = $host->paid_cancel_amount;
            }

            /*Paid Amount*/
            if ($host->paid_canel_status == 1)
            { if ($user_currencycode != $currency_code)
            { $Paid_amt = changeCurrency($user_currencycode,$currency_code,$host->paid_cancel_amount,$currencyCronId);
            }else{  $Paid_amt = $host->paid_cancel_amount; }
                $paid_amt_total = $currencySymbol . ' ' . $Paid_amt;
            }
            else
            {
                $paid_amt_total = $currencySymbol . ' ' . "0.00";
            }
            /*balance amount*/
            if ($host->paid_canel_status == 0)
            { if ($user_currencycode != $currency_code)
            { $amount = changeCurrency($user_currencycode,$currency_code,$host->paid_cancel_amount,$currencyCronId);
            } else{ $amount = $host->paid_cancel_amount; }
                $bal_amt = $currencySymbol . ' ' . $amount;
            }
            else
            { $bal_amt = $currencySymbol . '' . "0.00";}
            if($host->product_image != ''){
                $p_img = explode('.',$host->product_image);
                $suffix = strrchr($host->product_image, ".");
                $pos = strpos  ( $host->product_image  , $suffix);
                $name = substr_replace ($host->product_image, "", $pos);
                // echo $suffix . "<br><br>". $name;
                $pro_img = $name.''.$suffix;
                $proImage = base_url().'images/rental/'.$pro_img;
            }else{
                $proImage = base_url().'images/rental/dummyProductImage.jpg';
            }
            if ($host->paid_canel_status == 0)
            {
                $paid_canel_status = "Pending" ;
            }
            else
            {
                $paid_canel_status = "Paid" ;

            }

            $host_cancel_details[] = array(
                'product_title'     => $host->product_title,
                'booking_no'        => $host->booking_no,
                'paid_amount'=>$paid_amt_total ,
                'cancellation_amount'=> $currencySymbol . ' ' . $Paid,
                'balance_amount'=> $bal_amt,
                'paid_status'=> $paid_canel_status,
                'bookedDate'=> $host->bookedDate,
                'checkin'=> date('M d,Y',strtotime($host->checkin)),
                'checkout'=> date('M d,Y',strtotime($host->checkout)),
                'currencycode'=> $host->currencycode,
                'user_image'=> $proImage
            );
        }
        echo json_encode(array(
            'status'=>1,
            'message'=>'User Details Available',
            'profileinfo'=>$user_list,
            'trust_verify'=>$trust,
            'reviews_about_you'=>$rev_abt_you,
            'reviews_by_you'=>$rev_by_you,
            'dispute_about_you'=>$Dis_abt_you,
            'dispute_by_you'=>$Dis_by_you,
            'cancellation_about_you'=>$cancl_abt_you,
            'cancellation_by_you'=>$cancl_by_you,
            'host_cancellation'=>$host_cancel_details,
            "country_list"=>$country_list,
            "property_listing"=>$listingarr),JSON_PRETTY_PRINT);
    }
    public function json_user_details1()
    {
        $userid = $_POST['userid'];
        if($userid =="") {
            echo json_encode(array('status'=>0,'message'=>'Parameter missing!'));
            exit;
        }
        $userDetails = $this->db->query('select * from '.USERS.' where `id`="'.$userid.'"');
        //echo $this->db->last_query();
        $user_details = array();
        $user_list = array();
        if($userDetails->num_rows() >0) {
            foreach($userDetails->result() as $u) {
                if($u->image != ''){
                    $userimg = base_url().'images/users/'.$u->image;
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($u->is_verified=='Yes'){ $is_verified=true; } elseif($u->is_verified =='No'){ $is_verified=false; }else{ $is_verified=""; }
                if($u->id_verified=='Yes'){ $id_verified=true; } elseif($u->id_verified =='No'){ $id_verified=false; }else{ $id_verified=""; }
                if($u->ph_verified=='Yes'){ $ph_verified=true; } elseif($u->ph_verified =='No'){ $ph_verified=false; }else{ $ph_verified=""; }
                if($u->is_brand=='yes'){ $is_brand=true; } elseif($u->is_brand =='no'){ $is_brand=false; }else{ $is_brand=""; }
                if($u->display_lists=='Yes'){ $display_lists=true; } elseif($u->display_lists =='No'){ $display_lists=false; }else{ $display_lists=""; }
                if($u->social_recommend=='yes'){ $social_recommend=true; } elseif($u->social_recommend =='no'){ $social_recommend=false; }else{ $social_recommend=""; }
                if($u->search_by_profile=='yes'){ $search_by_profile=true; } elseif($u->search_by_profile =='no'){ $search_by_profile=false; }else{ $search_by_profile=""; }
                if($u->subscriber=='Yes'){ $subscriber=true; } elseif($u->subscriber =='No'){ $subscriber=false; }else{ $subscriber=""; }
                if($u->twitter != "") {
                    if($u->twitter =='Yes') {
                        $linkedin_connect =true;
                    } else if($u->twitter =='No') {
                        $linkedin_connect =false;
                    } else {
                        $linkedin_connect = '';
                    }
                }else{
                    $linkedin_connect = '';
                }
                if($u->google != "") {
                    if($u->google =='Yes') {
                        $google_connect =true;
                    } else if($u->google =='No') {
                        $google_connect =false;
                    } else {
                        $google_connect = '';
                    }
                }else{
                    $google_connect = '';
                }
                if($u->facebook != "") {
                    if($u->facebook =='Yes') {
                        $facebook_connect =true;
                    } else if($u->facebook =='No') {
                        $facebook_connect =false;
                    } else {
                        $facebook_connect = '';
                    }
                }else{
                    $facebook_connect = '';
                }
                $languages = $this->mobile_model->get_all_details(LANGUAGES_KNOWN,array());
                $languages_known=explode(',',$u->languages_known);
                $languages_known_text='';
                foreach($languages->result() as $language)
                {
                    if(in_array($language->language_code,$languages_known))
                    {
                        $languages_known_text .=$language->language_name.',';
                    }
                }
                $lang = substr($languages_known_text,0,-1);
                if($languages_known_text ==''){ $lang ='None Selected'; }
                if($u->school !="") { $school = $u->school; } else { $school="";}
                if($u->work !="") { $work = $u->work; } else { $work="";}
                $trust[] = array("phone_verified"=>$ph_verified,"email_id_verified"=>$id_verified,"country"=>intval($u->ph_country),"phone"=>$u->phone_no,"linkedin_connect"=>$linkedin_connect,"facebook_connect"=>$facebook_connect,"google_connect"=>$google_connect);
                $user_list[] = array("id"=>intval($u->id),"loginUserType"=>$u->loginUserType,"facebook_id"=>$u->f_id,"google_id"=>$u->google_id,"linkedin_id"=>$u->linkedin_id,"group"=>$u->group,"email"=>$u->email,"status"=>$u->status,"is_verified"=>$is_verified,"id_verified"=>$id_verified,"ph_verified"=>$ph_verified,"is_brand"=>$is_brand,"created"=>$u->created,"last_login_date"=>$u->last_login_date,"last_logout_date"=>$u->last_logout_date,"firstname"=>$u->firstname,"lastname"=>$u->lastname,"description"=>$u->description,"gender"=>$u->gender,"dob_date"=>$u->dob_date,"dob_month"=>$u->dob_month,"dob_year"=>$u->dob_year,"country"=>intval($u->country),"phone_no"=>$u->phone_no,"where_you_live"=>$u->s_city,"request_status"=>$u->request_status,"verify_code"=>$u->verify_code,"feature_product"=>$u->feature_product,"followers_count"=>$u->followers_count,"following_count"=>$u->following_count,"language"=>$u->language,"visibility"=>$u->visibility,"display_lists"=>$display_lists,"email_notifications"=>$u->email_notifications,
                    "notifications"=>$u->notifications,"updates"=>$u->updates,"package_status"=>$u->package_status,"expired_date"=> $u->expired_date,"social_recommend"=>$social_recommend,"search_by_profile"=>$search_by_profile,"languages_known"=>$lang,"school"=>$school,"work"=>$work,"accname"=>$u->accname,"accno"=>$u->accno,"bankname"=>$u->bankname,"subscriber"=>$subscriber,"login_hit"=>$u->login_hit,"user_image"=>$userimg);
            }
        }
        //$user_details = array("user_info"=>$user_list);
        /* Reviews starts here */
        $Review_about_you = $this->mobile_model->get_productreview_aboutyou($userid);
        $Review_by_you = $this->mobile_model->get_productreview_byyou($userid);
        $rev_abt_you = array();
        $rev_by_you = array();
        if($Review_about_you->num_rows() >0) {
            foreach($Review_about_you->result() as $rau) {
                if($rau->image != ''){
                    if($rau->loginUserType == 'google'){
                        $userimg = $rau->image;
                    } else {
                        $userimg = base_url().'images/users/'.$rau->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($rau->email !=""){ $email=$rau->email;} else { $email="";}
                if($rau->reviewer_name !=""){ $reviewer_name=$rau->reviewer_name;} else { $reviewer_name="";}
                if($rau->property_id !=""){ $property_id=$rau->property_id;} else { $property_id="";}
                if($rau->product_name !=""){ $property_name=$rau->product_name;} else { $property_name="";}
                if($rau->reviewer_id !=""){ $reviewer_id=$rau->reviewer_id;} else { $reviewer_id="";}
                if($rau->review !=""){ $review=$rau->review;} else { $review="";}
                if($rau->review_id !=""){ $review_id=$rau->review_id;} else { $review_id="";}
                $rev_abt_you[] = array("id"=>$review_id,"reviewer_id"=>$reviewer_id,"review_property_id"=>$property_id,"review_property_name"=>$property_name,"reviewer_name"=>$reviewer_name,"reviewer_comments"=>$review,"reviewer_rating"=>$rau->total_review,"reviwer_image"=>$userimg,"review_date"=>date("d-m-Y", strtotime($rau->dateAdded)));
                // $rev_abt_you[] = array("review"=>$review,"review_email"=>$email,"star_rating"=>$rau->total_review,"user_image"=>$userimg,"created_date"=>$rau->dateAdded);
                /* if($rau->email !=""){ $email=$rau->email;} else { $email="";}
        if($rau->review !=""){ $review=$rau->review;} else { $review="";}
         $rev_abt_you[] = array("review"=>$review,"review_email"=>$email,"star_rating"=>$rau->total_review,"user_image"=>$userimg,"created_date"=>$rau->dateAdded); */
            }
        }
        if($Review_by_you->num_rows() >0) {
            foreach($Review_by_you->result() as $rbu) {
                if($rbu->image != ''){
                    if($rbu->loginUserType == 'google'){
                        $userimg = $rbu->image;
                    } else {
                        $userimg = base_url().'images/users/'.$rbu->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($rbu->email !=""){ $email=$rbu->email;} else { $email="";}
                if($rbu->reviewer_name !=""){ $reviewer_name=$rbu->reviewer_name;} else { $reviewer_name="";}
                if($rbu->property_id !=""){ $property_id=$rbu->property_id;} else { $property_id="";}
                if($rbu->product_name !=""){ $property_name=$rbu->product_name;} else { $property_name="";}
                if($rbu->reviewer_id !=""){ $reviewer_id=$rbu->reviewer_id;} else { $reviewer_id="";}
                if($rbu->review !=""){ $review=$rbu->review;} else { $review="";}
                if($rbu->review_id !=""){ $review_id=$rbu->review_id;} else { $review_id="";}
                $rev_by_you[] = array("id"=>$review_id,"reviewer_id"=>$reviewer_id,"review_property_id"=>$property_id,"review_property_name"=>$property_name,"reviewer_name"=>$reviewer_name,"reviewer_comments"=>$review,"reviewer_rating"=>$rbu->total_review,"reviwer_image"=>$userimg,"review_date"=>date("d-m-Y", strtotime($rbu->dateAdded)));
                /* if($rbu->email !=""){ $email=$rbu->email;} else { $email="";}
        if($rbu->review !=""){ $review=$rbu->review;} else { $review="";}
       $rev_by_you[] = array("review"=>$review,"review_email"=>$email,"star_rating"=>$rbu->total_review,"user_image"=>$userimg,"created_date"=>$rbu->dateAdded); */
            }
        }
        //$review = array('reviews_about_you'=>$rev_abt_you,'reviews_by_you'=>$rev_by_you);
        /* Review Ends here */
        /* Dispute starts here */
        $Dispute_about_you = $this->mobile_model->get_productdispute_aboutyou($userid);
        $Dispute_by_you = $this->mobile_model->get_productdispute_byyou($userid);
        $Dis_abt_you = array();
        $Dis_by_you = array();
        if($Dispute_about_you->num_rows() >0) {
            foreach($Dispute_about_you->result() as $dau) {
                if($dau->image != ''){
                    if($dau->loginUserType == 'google'){
                        $userimg = $dau->image;
                    } else {
                        $userimg = base_url().'images/users/'.$dau->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                $Dis_abt_you[] = array("message"=>$dau->message,"review_email"=>$dau->email,"booking_no"=>$dau->booking_no,"user_image"=>$userimg,"created_date"=>$dau->created_date);
            }
        }
        if($Dispute_by_you->num_rows() >0) {
            foreach($Dispute_by_you->result() as $dbu) {
                if($dbu->image != ''){
                    if($dbu->loginUserType == 'google'){
                        $userimg = $dbu->image;
                    } else {
                        $userimg = base_url().'images/users/'.$dbu->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                $Dis_by_you[] = array("message"=>$dbu->message,"review_email"=>$dbu->email,"booking_no"=>$dbu->booking_no,"user_image"=>$userimg,"created_date"=>$dbu->created_date);
            }
        }
        //$dispute = array('dispute_about_you'=>$Dis_abt_you,'dispute_by_you'=>$Dis_by_you);
        /* Dispute starts here */
        /* Country List starts here */
        $country_list = array();
        $country_query='SELECT id,name FROM '.LOCATIONS.' WHERE status="Active" order by name';
        $active_countries = $this->mobile_model->ExecuteQuery($country_query);
        if($active_countries->num_rows() >0) {
            foreach($active_countries->result() as $cntry) {
                $country_list[] = array("id"=>intval($cntry->id),"country_name"=>$cntry->name);
            }
        }
        /*  Country List ends here */
        /*  Property List starts here */
        $rentalDetail = $this->mobile_model->get_dashboard_list ( $userid,Publish);
        $listingarr = array();
        if($rentalDetail->num_rows() >0) {
            foreach($rentalDetail->result() as $r) {
                if($r->product_image != ''){
                    $p_img = explode('.',$r->product_image);
                    $suffix = strrchr($r->product_image, ".");
                    $pos = strpos  ( $r->product_image  , $suffix);
                    $name = substr_replace ($r->product_image, "", $pos);
                    // echo $suffix . "<br><br>". $name;
                    $pro_img = $name.''.$suffix;
                    $proImage = base_url().'images/rental/'.$pro_img;
                }else{
                    $proImage = base_url().'images/rental/dummyProductImage.jpg';
                }
                $listingarr[] = array("property_id"=>intval($r->id),"property_title"=>$r->product_title,"property_image"=>$proImage,'property_address'=>$r->address);
            }
        }
        /*  Property List ends here */
        echo json_encode(array('status'=>1,'message'=>'User Details Available','profileinfo'=>$user_list,'trust_verify'=>$trust,'reviews_about_you'=>$rev_abt_you,'reviews_by_you'=>$rev_by_you,'dispute_about_you'=>$Dis_abt_you,'dispute_by_you'=>$Dis_by_you,"country_list"=>$country_list,"property_listing"=>$listingarr));
    }
    /* GET USER ACCOUNT */
    public function json_user_account()
    {
        $userid = $_POST['userid'];
        $user_currencyCode = $_POST['currency_code'];
        $user_currencySymb = $this->db->select('currency_symbols')->where('currency_type',$_POST['currency_code'])->get(CURRENCY)->row()->currency_symbols;
        if($userid =="") {
            echo json_encode(array('status'=>0,'message'=>'Parameter missing!'));
            exit;
        }
        $userDetails = $this->db->query('select * from '.USERS.' where `id`="'.$userid.'"');
        //echo $this->db->last_query();
        $user_details = array();
        $user_list = array();
        if($userDetails->num_rows() >0) {
            foreach($userDetails->result() as $u) {
                if($u->image != ''){
                    $userimg = base_url().'images/users/'.$u->image;
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
                if($u->is_verified=='Yes'){ $is_verified=true; } elseif($u->is_verified =='No'){ $is_verified=false; }else{ $is_verified=""; }
                if($u->id_verified=='Yes'){ $id_verified=true; } elseif($u->id_verified =='No'){ $id_verified=false; }else{ $id_verified=""; }
                if($u->ph_verified=='Yes'){ $ph_verified=true; } elseif($u->ph_verified =='No'){ $ph_verified=false; }else{ $ph_verified=""; }
                if($u->is_brand=='yes'){ $is_brand=true; } elseif($u->is_brand =='no'){ $is_brand=false; }else{ $is_brand=""; }
                if($u->display_lists=='Yes'){ $display_lists=true; } elseif($u->display_lists =='No'){ $display_lists=false; }else{ $display_lists=""; }
                if($u->social_recommend=='yes'){ $social_recommend=true; } elseif($u->social_recommend =='no'){ $social_recommend=false; }else{ $social_recommend=""; }
                if($u->search_by_profile=='yes'){ $search_by_profile=true; } elseif($u->search_by_profile =='no'){ $search_by_profile=false; }else{ $search_by_profile=""; }
                if($u->subscriber=='Yes'){ $subscriber=true; } elseif($u->subscriber =='No'){ $subscriber=false; }else{ $subscriber=""; }
                $user_list[] = array(
                    "id"=>intval($u->id),
                    "loginUserType"=>$u->loginUserType,
                    "facebook_id"=>$u->f_id,
                    "google_id"=>$u->google_id,
                    "linkedin_id"=>$u->linkedin_id,
                    "group"=>$u->group,
                    "email"=>$u->email,
                    "status"=>$u->status,
                    "is_verified"=>$is_verified,
                    "id_verified"=>$id_verified,
                    "ph_verified"=>$ph_verified,
                    "is_brand"=>$is_brand,
                    "created"=>$u->created,
                    "last_login_date"=>$u->last_login_date,
                    "last_logout_date"=>$u->last_logout_date,
                    "firstname"=>$u->firstname,
                    "lastname"=>$u->lastname,
                    "description"=>$u->description,
                    "gender"=>$u->gender,
                    "dob_date"=>$u->dob_date,
                    "dob_month"=>$u->dob_month,
                    "dob_year"=>$u->dob_year,
                    "country"=>intval($u->country),
                    "phone_no"=>$u->phone_no,
                    "where_you_live"=>$u->s_city,
                    "request_status"=>$u->request_status,
                    "verify_code"=>$u->verify_code,
                    "feature_product"=>$u->feature_product,
                    "followers_count"=>$u->followers_count,
                    "following_count"=>$u->following_count,
                    "language"=>$u->language,
                    "visibility"=>$u->visibility,
                    "display_lists"=>$display_lists,
                    "email_notifications"=>$u->email_notifications,
                    "notifications"=>$u->notifications,
                    "updates"=>$u->updates,
                    "package_status"=>$u->package_status,
                    "expired_date"=> $u->expired_date,
                    "social_recommend"=>$social_recommend,
                    "search_by_profile"=>$u->search_by_profile,
                    "languages_known"=>$u->languages_known,
                    "accname"=>$u->accname,
                    "accno"=>$u->accno,
                    "bankname"=>$u->bankname,
                    "paypal_email"=>$u->paypal_email,
                    "subscriber"=>$subscriber,
                    "login_hit"=>$u->login_hit,
                    "user_image"=>$userimg);
                $payout[] = array("accname"=>$u->accname,"accno"=>$u->accno,"bankname"=>$u->bankname,"paypal_email"=>$u->paypal_email);
                $notify[] = array("reservation_request"=>$u->notifications,"email_notifications"=>$u->email_notifications);
                $privacy[] = array("search_by_profile"=>$search_by_profile,"social_recommend"=>$social_recommend);
            }
        }
        /* Transaction History starts here */
        $emailQry = $this->mobile_model->get_all_details(USERS, array('id' => $userid));
        $email = $emailQry->row()->email;
        $future_transaction = $this->mobile_model->get_future_transaction($email);
        $completed_transaction = $this->mobile_model->get_completed_transaction($email);
        $fut_trans = array();
        $comp_trans = array();
        if($completed_transaction->num_rows() >0)
        {
            foreach($completed_transaction->result() as $comp)
            {
                $amountToHost = $comp->payable_amount-$comp->paid_cancel_amount;
                if($comp->currency_cron_id==0) { $currencyCronId='';} else { $currencyCronId=$comp->currency_cron_id;}
                if($comp->user_currencycode != $user_currencyCode)
                {
                    $transAmount = currency_conversion($comp->user_currencycode, $user_currencyCode,  $amountToHost/*,$currencyCronId*/);
                    $prosubTotal = currency_conversion($comp->user_currencycode,$user_currencyCode,$comp->subTotal/*,$currencyCronId*/);
                    $prosecurityDeposit = currency_conversion($comp->user_currencycode,$user_currencyCode,$comp->secDeposit/*,$currencyCronId*/);
                } else {
                    $transAmount = $amountToHost;
                    $prosubTotal = $comp->subTotal;
                    $prosecurityDeposit = $comp->secDeposit;
                }
                $comp_trans[] = array(
                    "dateadded"=>date('M d, Y',strtotime($comp->dateAdded)),
                    "transaction_method"=>"Via Bank",
                    "transaction_id"=>$comp->transaction_id,
                    "amount"=>floatval($transAmount),
                    "bookingno"=>$comp->booking_no,
                    "currency_code"=>$user_currencyCode,
                    "currency_symbol"=>$user_currencySymb,
                    "sub_total"=>$prosubTotal,
                    "security_deposit"=>(($prosecurityDeposit > 0) ? $prosecurityDeposit : "0.00")
                );
            }
        }
        if($future_transaction->num_rows() >0)
        {
            foreach($future_transaction->result() as $fut)
            {
                if($fut->currency_cron_id=='' || $fut->currency_cron_id==0)  { $currencyCronId=''; } else { $currencyCronId=$fut->currency_cron_id;}
                if($fut->user_currencycode != $user_currencyCode)
                {
                    $propPrice  = currency_conversion($fut->user_currencycode,$user_currencyCode,$fut->price);
                    $propTotAmt = currency_conversion($fut->user_currencycode,$user_currencyCode,$fut->totalAmt);
                    $propSerFee = currency_conversion($fut->user_currencycode,$user_currencyCode,$fut->guest_fee);
                    $propHostFee= currency_conversion($fut->user_currencycode,$user_currencyCode,$fut->host_fee);
                    $propPayable= currency_conversion($fut->user_currencycode,$user_currencyCode,$fut->payable_amount);
                    $prosubTotal = currency_conversion($fut->user_currencycode,$user_currencyCode,$fut->subTotal);
                    $prosecurityDeposit = currency_conversion($fut->user_currencycode,$user_currencyCode,$fut->secDeposit);
                }
                else
                {
                    $propPrice  = $fut->price;
                    $propTotAmt = $fut->totalAmt;
                    $propSerFee = $fut->guest_fee;
                    $propHostFee= $fut->host_fee;
                    $propPayable= $fut->payable_amount;
                    $prosubTotal = $fut->subTotal;
                    $prosecurityDeposit = $fut->secDeposit;
                }
                /*to view Who is the cancel by the booking*/
                if($fut->cancelled == 'Yes' )
                {
                    if($fut->dispute_by == "Host")
                    {
                        $cancel_by = "Cancelled by You";
                    }
                    else
                    {  $cancel_by = "Cancelled by Guest"; }
                }
                else
                { $cancel_by = "Not Cancelled"; }
                /*end*/
                $fut_trans[] = array(
                    "dateadded"=>date('M d, Y',strtotime($fut->dateAdded)),
                    "firstname"=>$fut->firstname,
                    "property_title"=>$fut->product_title,
                    "property_price"=>floatval($propPrice),
                    "bookingno"=>$fut->Bookingno,
                    "totalAmt"=>floatval($propTotAmt),
                    "service_fee"=>floatval($propSerFee),
                    "host_fee"=>floatval($propHostFee),
                    "payable_amount"=>floatval($propPayable),
                    "currency_code"=>$user_currencyCode,
                    "currency_symbol"=>$user_currencySymb,
                    "sub_total"=>$prosubTotal,
                    "security_deposit"=>$prosecurityDeposit,
                    "cancel_by"=>$cancel_by);
            }
        }
        //$user_transaction = array("completed_transaction"=>$comp_trans,"future_transaction"=>$fut_trans);
        /* Transaction History starts here */
        /* Country List starts here */
        $country_list = array();
        $country_query='SELECT id,name FROM '.LOCATIONS.' WHERE status="Active" order by name';
        $active_countries = $this->mobile_model->ExecuteQuery($country_query);
        if($active_countries->num_rows() >0) {
            foreach($active_countries->result() as $cntry) {
                $country_list[] = array("id"=>intval($cntry->id),"country_name"=>$cntry->name);
            }
        }
        /*  Country List ends here */
        echo json_encode(array('status'=>1,'message'=>'User Details Available','accountinfo'=>$user_list,"notifications"=>$notify,"payout_perference"=>$payout,"privacy"=>$privacy,"completed_transaction"=>$comp_trans,"future_transaction"=>$fut_trans,"country_list"=>$country_list));
    }
    /* GET INBOX CONVERSATION */
    public function json_inbox_conversation_bck()
    {
        $bookingNo = $_POST['bookingid'];
        $userId = $_POST['userid'];
        if($bookingNo =="" || $userId =="") {
            echo json_encode(array('status'=>0,'message'=>'Parameter missing!'));
            exit;
        }
        $conversationDetails = $this->user_model->get_all_details ( MED_MESSAGE, array ('bookingNo' => $bookingNo ),array(array('field'=>'id', 'type'=>'desc')));
        //echo $this->db->last_query();
        $product_details = $this->user_model->get_all_details(PRODUCT,array('id'=>$conversationDetails->row()->productId));
        if($product_details->row()->user_id == $userId){
            $this->db->where('bookingNo', $bookingNo);
            $this->db->update(MED_MESSAGE, array('msg_read' => 'Yes','host_msgread_status'=>'Yes'));
        }else{
            $this->db->where('bookingNo', $bookingNo);
            $this->db->update(MED_MESSAGE, array('msg_read' => 'Yes','user_msgread_status'=>'Yes'));
        }
        $bookingDetails = $this->user_model->get_booking_details($bookingNo);
        //echo '<pre>';print_r($this->data['bookingDetails']->result_array());die;
        $temp[] = $conversationDetails->row()->senderId;
        $temp[] = $conversationDetails->row()->receiverId;
        //$productId = $conversationDetails->row()->productId;
        if(!in_array($userId, $temp)) {
            echo json_encode(array('status'=>0,'message'=>'User not available!'));
            exit;
        }
        if($userId == $temp[0])
        {
            $sender_id = $temp[0];
            $receiver_id = $temp[1];
        }
        else
        {
            $sender_id = $temp[1];
            $receiver_id = $temp[0];
        }
        $senderDetails = $this->user_model->get_all_details ( USERS, array ('id' => $sender_id ));
        $receiverDetails = $this->user_model->get_all_details ( USERS, array ('id' => $receiver_id ));
        $username = $receiverDetails->row()->user_name;
        if ($bookingDetails->row()->secDeposit != 0) {
            $secDeposite = $bookingDetails->row()->secDeposit;
        }
        $totalAmount = $bookingDetails->row()->subTotal + $bookingDetails->row()->serviceFee + $secDeposite;
        $message_detail =array();
        foreach($conversationDetails->result() as  $conversation) {
            if($sender_id == $conversation->senderId){
                $messenger = true;
                $message = $conversation->message;
                if($senderDetails->row()->image != ''){
                    if($senderDetails->row()->loginUserType == 'google'){
                        $userimg = $senderDetails->row()->image;
                    } else {
                        $userimg = base_url().'images/users/'.$senderDetails->row()->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
            } else {
                $messenger = false;
                $message = $conversation->message;
                if($receiverDetails->row()->image != ''){
                    if($receiverDetails->row()->loginUserType == 'google'){
                        $userimg = $receiverDetails->row()->image;
                    } else {
                        $userimg = base_url().'images/users/'.$receiverDetails->row()->image;
                    }
                }else{
                    $userimg = base_url().'images/users/profile.png';
                }
            }
            $accept_decline ="";
            if($bookingDetails->row()->renter_id != $userId && $conversation->status == 'Decline'){
                $accept_decline = "Declined";
            } else if($bookingDetails->row()->renter_id == $userId && $conversation->status == 'Decline'){
                $accept_decline = "Declined";
            } else if($bookingDetails->row()->renter_id != $userId && $conversation->status == 'Accept'){
                $accept_decline = "Accepted";
            } else if($bookingDetails->row()->renter_id == $userId && $conversation->status == 'Accept'){
                $accept_decline = "Accepted";
            } else if($bookingDetails->row()->renter_id == $userId && $conversation->status == 'Pending'){
                $accept_decline = "Pending";
            }
            if($receiverDetails->row()->user_name !=""){
                $user_name = $receiverDetails->row()->user_name;
            } else { $user_name =""; }
            if($bookingDetails->row()->product_title !=""){
                $product_title = $bookingDetails->row()->product_title;
            } else { $product_title =""; }
            if($conversation->status !=""){
                $status = $conversation->status;
            } else { $status =""; }
            if($message !=""){
                $message = $message;
            } else { $message =""; }
            if($totalAmount !=""){
                $totalAmount = $totalAmount;
            } else { $totalAmount =""; }
            $message_detail[] = array("id"=>$conversation->id,"username"=>$receiverDetails->row()->user_name,"property_id"=>$conversation->productId,"property_title"=>$bookingDetails->row()->product_title,"property_currency_code"=>"USD",
                "property_currency_symbol"=>"$","NoofGuest"=>$bookingDetails->row()->NoofGuest,"coversation_status"=>$conversation->status,"coversation_point"=>$conversation->point,"dateAdded"=>date('d/m/Y', strtotime($conversation->dateAdded)),"message"=>$message,"messenger"=>$messenger,"totalAmount"=>$totalAmount,"user_image"=>$userimg,"accept_decline_status"=>$accept_decline,"bookingno"=>$conversation->bookingNo,"senderId"=>$conversation->senderId,"receiverId"=>$conversation->receiverId,"subject"=>$conversation->subject);
        }
        echo json_encode(array('status'=>1,'message'=>' Available','message_detail'=>$message_detail));
    }
    /* New Inbox api */
    public function json_inbox_conversation()
    {
        $bookingNo = $_POST['bookingid'];
        $userId = $_POST['userid'];
        if($bookingNo =="" || $userId =="") {
            echo json_encode(array('status'=>0,'message'=>'Parameter missing!'));
            exit;
        }
        $conversationDetails = $this->mobile_model->get_all_details ( MED_MESSAGE, array ('bookingNo' => $bookingNo ),array(array('field'=>'id', 'type'=>'desc')));
        $bookingDetails = $this->mobile_model->get_booking_details($bookingNo);
        /* print_r($bookingDetails->result()); die();*/
        if($bookingDetails->num_rows() >0) {
            $product_details = $this->mobile_model->get_all_details(PRODUCT,array('id'=>$conversationDetails->row()->productId));
            if($product_details->row()->user_id == $userId){
                $this->db->where('bookingNo', $bookingNo);
                $this->db->update(MED_MESSAGE, array('msg_read' => 'Yes','host_msgread_status'=>'Yes'));
            }else{
                $this->db->where('bookingNo', $bookingNo);
                $this->db->update(MED_MESSAGE, array('msg_read' => 'Yes','user_msgread_status'=>'Yes'));
            }
            if($bookingDetails->row()->host_image != ''){
                if($bookingDetails->row()->host_login_type == 'google'){
                    $host_img = $bookingDetails->row()->host_image;
                } else {
                    $host_img = base_url().'images/users/'.$bookingDetails->row()->host_image;
                }
            }else{
                $host_img = base_url().'images/users/profile.png';
            }
            if($bookingDetails->row()->requester_image != ''){
                if($bookingDetails->row()->requester_login_type == 'google'){
                    $req_img = $bookingDetails->row()->requester_image;
                } else {
                    $req_img = base_url().'images/users/'.$bookingDetails->row()->requester_image;
                }
            }else{
                $req_img = base_url().'images/users/profile.png';
            }
            $message_detail = array();
            foreach($conversationDetails->result() as  $conversation) {
                $subject = false;
                if($conversation->point ==1) {
                    $subject = true;
                }
                $is_receiver = false;
                if($conversation->user_msgread_status =='Yes') {
                    $is_receiver = true;
                }
                $is_host = false;
                if($conversation->host_msgread_status =='Yes') {
                    $is_host = true;
                }
                $parent_select_qry = "select image,loginUserType,id from fc_users where id=$conversation->senderId";
                $sender_img = $this->mobile_model->ExecuteQuery($parent_select_qry);
                if($sender_img->row()->image != ''){
                    if($sender_img->row()->loginUserType == 'google'){
                        $user_img = $sender_img->row()->image;
                    } else {
                        $user_img = base_url().'images/users/'.$sender_img->row()->image;
                    }
                }else{
                    $user_img = base_url().'images/users/profile.png';
                }
                $receiver_select_qry = "select image,loginUserType,id from fc_users where id=$conversation->receiverId";
                $receiver_img = $this->mobile_model->ExecuteQuery($receiver_select_qry);
                if($receiver_img->row()->image != ''){
                    if($receiver_img->row()->loginUserType == 'google'){
                        $rec_img = $receiver_img->row()->image;
                    } else {
                        $rec_img = base_url().'images/users/'.$receiver_img->row()->image;
                    }
                }else{
                    $rec_img = base_url().'images/users/profile.png';
                }
                $message_detail[] = array("Id"=>$conversation->id,"message"=>$conversation->message,"message_by"=>$conversation->senderId,"is_subject"=>$subject,"is_receiver_read"=> $is_receiver,"is_host_read"=> $is_host,"server_time"=>$conversation->dateAdded,"user_image"=>$user_img);
            }
            echo json_encode(array('status'=>1,'message'=>' Available',"property_id"=>$bookingDetails->row()->prd_id,"property_name"=> $bookingDetails->row()->product_title,"host_id"=>$bookingDetails->row()->renter_id,"host_name"=> $bookingDetails->row()->host_name,"host_image"=> $host_img,"requester_id"=>$bookingDetails->row()->user_id,"requester_name"=>$bookingDetails->row()->requester_name,"requester_image"=>$req_img,"booking_id"=>$bookingDetails->row()->Bookingno,"no_of_guest"=>$bookingDetails->row()->NoofGuest,"checkin"=>$bookingDetails->row()->checkin,"checkout"=>$bookingDetails->row()->checkout,"approval"=>$bookingDetails->row()->approval,"total_amount"=>floatval($bookingDetails->row()->totalAmt),"property_currency_code"=>$bookingDetails->row()->currencycode,"member_from"=>$bookingDetails->row()->created,'messages'=>$message_detail));
            //echo $this->db->last_query();
        } else {
            echo json_encode(array('status'=>0,'message'=>' Not available'));
        }
    }
    /* RESET PASSWORD */
    public function mobile_reset_password() {
        $userid = $this->input->post ( 'userid' );
        $old_password = $this->input->post ( 'old_password' );
        $new_password = $this->input->post ( 'new_password' );
        if ($userid == '' || $old_password =='' || $new_password=='' ) {
            echo json_encode(array('status'=>0,'message'=>'Parameter missing!'));
            exit;
        } else {
            $current_pass = md5 ( $this->input->post ( 'old_password' ) );
            $condition = array (
                'id' => $userid,
                'password' => $current_pass
            );
            $checkuser = $this->mobile_model->get_all_details ( USERS, $condition );
            if ($checkuser->num_rows () == 1) {
                $newPass = md5 ( $this->input->post ( 'new_password' ) );
                $newdata = array (
                    'password' => $newPass
                );
                $condition1 = array (
                    'id' => $userid
                );
                $this->mobile_model->update_details ( USERS, $newdata, $condition1 );
                echo json_encode(array('status'=>1,'message'=>'Password changed successfully'));
                exit;
            } else {
                echo json_encode(array('status'=>0,'message'=>'Current password is wrong'));
                exit;
            }
        }
    }
    /* MORE ABOUT HOST AND USER PROFILE */
    public function mobile_about_host()
    {
        $userid = $this->input->post ( 'userid' );
        if($userid ==""){
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        } else {
            $userDetails = $this->db->query('select * from '.USERS.' where `id`="'.$userid.'"');
            $languages = $this->mobile_model->get_all_details(LANGUAGES_KNOWN,array());
            $rentalDetail = $this->mobile_model->get_dashboard_list ( $userid,Publish);
            $Review_about_you = $this->mobile_model->get_productreview_aboutyou($userid);
            //$WishListCat = $this->mobile_model->get_list_details_wishlist($userid);
            if($userDetails->num_rows() >0) {
                foreach($userDetails->result() as $u) {
                    if($u->image != ''){
                        $userimg = base_url().'images/users/'.$u->image;
                    }else{
                        $userimg = base_url().'images/users/profile.png';
                    }
                    if($u->id_verified=='Yes'){ $id_verified=true; } elseif($u->id_verified =='No'){ $id_verified=false; } else { $id_verified=""; }
                    if($u->ph_verified=='Yes'){ $ph_verified=true; } elseif($u->ph_verified =='No'){ $ph_verified=false; } else { $ph_verified=""; }
                    $languages_known=explode(',',$u->languages_known);
                    $languages_known_text='';
                    foreach($languages->result() as $language)
                    {
                        if(in_array($language->language_code,$languages_known))
                        {
                            $languages_known_text .=$language->language_name.',';
                        }
                    }
                    $lang = substr($languages_known_text,0,-1);
                    if($languages_known_text ==''){ $lang ='None Selected'; }
                    $user_list[] = array("id"=>intval($u->id),"loginUserType"=>$u->loginUserType,"firstname"=>$u->firstname,"lastname"=>$u->lastname,"description"=>$u->description,"id_verified"=>$id_verified,"ph_verified"=>$ph_verified,"phone_no"=>$u->phone_no,"work"=>$u->work,"school"=>$u->school,"language"=>$lang,"user_image"=>$userimg);
                }
                $listingarr = array();
                if($rentalDetail->num_rows() >0) {
                    foreach($rentalDetail->result() as $r) {
                        if($r->product_image != ''){
                            $p_img = explode('.',$r->product_image);
                            $suffix = strrchr($r->product_image, ".");
                            $pos = strpos  ( $r->product_image  , $suffix);
                            $name = substr_replace ($r->product_image, "", $pos);
                            // echo $suffix . "<br><br>". $name;
                            $pro_img = $name.''.$suffix;
                            $proImage = base_url().'images/rental/'.$pro_img;
                        }else{
                            $proImage = base_url().'images/rental/dummyProductImage.jpg';
                        }
                        $listingarr[] = array("property_id"=>intval($r->id),"property_title"=>$r->product_title,"property_image"=>$proImage);
                    }
                }
                $rev_abt_you = array();
                if($Review_about_you->num_rows() >0) {
                    foreach($Review_about_you->result() as $rau) {
                        if($rau->image != ''){
                            if($rau->loginUserType == 'google'){
                                $userimg = $rau->image;
                            } else {
                                $userimg = base_url().'images/users/'.$rau->image;
                            }
                        }else{
                            $userimg = base_url().'images/users/profile.png';
                        }
                        if($rau->user_name !=""){ $user_name = $rau->user_name;} else { $user_name="";}
                        if($rau->email !=""){ $email=$rau->email;} else { $email="";}
                        if($rau->review !=""){ $review=$rau->review;} else { $review="";}
                        $rev_abt_you[] = array("review"=>$review,"review_email"=>$email,"user_name" =>$user_name,"star_rating"=>$rau->total_review,"user_image"=>$userimg);
                    }
                }
                /* $wisharr = array();
        if($WishListCat->num_rows() >0) {
          foreach($WishListCat->result() as $w) {
            $products=explode(',',$w->product_id);
            $productsNotEmy=array_filter($products);
            shuffle($productsNotEmy);
            $CountProduct=count($productsNotEmy);
            $bgImage = $this->mobile_model->get_all_details ( PRODUCT_PHOTOS, array ('product_id' => $productsNotEmy[0] ) );
            if($bgImage->row()->product_image != ''){
              $p_img = explode('.',$bgImage->row()->product_image);
              $pro_img = $p_img[0].'.jpg';
              $bgImg = base_url().'images/rental/'.$pro_img;
            }else{
              $bgImg = base_url().'images/rental/dummyProductImage.jpg';
            }
            $wisharr[] = array("wish_list_name"=>ucfirst($w->name),"wish_list_img"=>$bgImg);
          }
        }
        */
                $condition1 = array("id"=>$userid);
                $userDetails = $this->mobile_model->get_all_details(USERS,$condition1);
                $WishListCat = $this->mobile_model->get_list_details_wishlist($userid);
                $wishlist = array();
                if($WishListCat->num_rows() > 0){
                    foreach($WishListCat->result() as $wlist){
                        if($wlist->product_id !=''){
                            $products=explode(',',$wlist->product_id);
                            $productsNotEmy=array_filter($products);
                            $CountProduct1=count($productsNotEmy);
                            if($CountProduct1 > 0){
                                $CountProduct = $this->mobile_model->get_all_details(PRODUCT,array('id'=>end($productsNotEmy)))->num_rows();
                            }
                            $img = "";
                            if($CountProduct > 0){
                                $ProductsImg = $this->mobile_model->get_all_details(PRODUCT_PHOTOS,array('product_id'=>end($productsNotEmy)));
                                if($ProductsImg->row()->product_image!=''){
                                    $img = base_url().PRODUCTPATH.$ProductsImg->row()->product_image;
                                }else{
                                    $img = 'images/product/dummyProductImage.jpg';
                                }
                            } else {
                                $img = 'images/site/empty-wishlist.jpg';
                            }
                            $product = array();
                            if (count ( $productsNotEmy ) > 0) {
                                $product_details = $this->mobile_model->get_product_details_wishlist_one_category ( $productsNotEmy );
                                if(count($product_details)>0) {
                                    foreach($product_details->result() as $p) {
                                        $wishlist_image  = $this->mobile_model->get_wishlistphoto ( $p->id );
                                        $wish_img = array();
                                        if(count($wishlist_image)>0) {
                                            foreach($wishlist_image->result() as $product_image) {
                                                $prd_img  ="";
                                                if($product_image->product_image !=""){
                                                    if(strpos($product_image->product_image, 's3.amazonaws.com') > 1) {
                                                        $prd_img = $product_image->product_image;
                                                    } else  {
                                                        $prd_img = base_url()."images/rental/".$product_image->product_image;
                                                    }
                                                }
                                                $wish_img[] = array("property_image"=>$prd_img);
                                            }
                                        }
                                        $condition = array('currency_type'=>$p->currency);
                                        $property_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                                        $property_currency_symbol = $property_currency_details->row()->currency_symbols;
                                        if($userDetails->row()->image !=''){
                                            $user_img = base_url().'images/users/'.$userDetails->row()->image;
                                        }else{
                                            $user_img = base_url().'images/users/user-thumb.png';
                                        }
                                        $product[] = array("property_id"=>intval($p->id),"property_title"=>
                                            $p->product_title,"property_address"=>$p->address,"bedrooms"=>$p->bedrooms,"bathrooms"=>$p->bathrooms,"room_type"=>$p->room_type,"notes_id"=>intval($p->nid),"notes_desc"=>strip_tags($p->notes),"property_price"=>$p->price,"property_currency_code"=>$p->currency,"property_currency_symbol"=>$property_currency_symbol,"user_image"=>$user_img,"property_images"=>$wish_img);
                                    }
                                }
                            }
                            $wishlist[] = array("wishlist_id"=>intval($wlist->id),"wishlist_title"=>$wlist->name,"wishlist_image"=>$img,"property_details"=>$product);
                        }
                    }
                }
                echo json_encode(array('status'=>1,'message'=>'Successfully!',"profileinfo"=>$user_list,"property_listing"=>$listingarr,"reviews_about_you"=>$rev_abt_you,"wish_list"=>$wishlist));
            } else {
                echo json_encode(array("status"=>0,"message"=>"No data found!"));
            }
        }
    }
    /* CREATE NEW WISHLIST */
    public function mobile_create_wishlist()
    {
        $userid = $this->input->post ( 'userid' );
        $wishlist_title = $this->input->post ( 'wishlist_title' );
        $property_id = $this->input->post ( 'property_id' );
        if($userid =="" || $wishlist_title ==""){
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        }
        if($userid ==0){
            echo json_encode(array("status"=>0,"message"=>"Invalid value!"));
            exit;
        } else {
            $data = $this->mobile_model->add_wishlist_category ( array (
                'user_id' => $userid,
                'name' => ucfirst($wishlist_title),
                'product_id'=>$property_id
            ));
            /*  $res = 'Successfully wishlist Created';
      $json_encode = json_encode(array("status"=>1,"message"=>$res));
      echo $json_encode;
      exit;
      */
            $condition1 = array("id"=>$userid);
            $userDetails = $this->mobile_model->get_all_details(USERS,$condition1);
            $WishListCat = $this->mobile_model->get_list_details_wishlist($userid);
            // echo $this->db->last_query();die;
            $wishlist = array();
            if($WishListCat->num_rows() > 0){
                foreach($WishListCat->result() as $wlist){
                    $product = array();
                    $img = "";
                    if($wlist->product_id !=''){
                        $products=explode(',',$wlist->product_id);
                        $productsNotEmy=array_filter($products);
                        $CountProduct1=count($productsNotEmy);
                        if($CountProduct1 > 0){
                            $CountProduct = $this->mobile_model->get_all_details(PRODUCT,array('id'=>end($productsNotEmy)))->num_rows();
                        }
                        $img = "";
                        if($CountProduct > 0){
                            $ProductsImg = $this->mobile_model->get_all_details(PRODUCT_PHOTOS,array('product_id'=>end($productsNotEmy)));
                            if($ProductsImg->row()->product_image!=''){
                                $img = base_url().'images/rental/'.$ProductsImg->row()->product_image;
                            }else{
                                $img = 'images/rental/dummyProductImage.jpg';
                            }
                        } else {
                            $img = 'images/empty-wishlist.jpg';
                        }
                        if (count ( $productsNotEmy ) > 0) {
                            $product_details = $this->mobile_model->get_product_details_wishlist_one_category ( $productsNotEmy );
                            if(count($product_details)>0) {
                                $product = array();
                                foreach($product_details->result() as $p) {
                                    $wishlist_image  = $this->mobile_model->get_wishlistphoto ( $p->id );
                                    $wish_img = array();
                                    if(count($wishlist_image)>0) {
                                        foreach($wishlist_image->result() as $product_image) {
                                            $prd_img  ="";
                                            if($product_image->product_image !=""){
                                                if(strpos($product_image->product_image, 's3.amazonaws.com') > 1) {
                                                    $prd_img = $product_image->product_image;
                                                } else  {
                                                    $prd_img = base_url()."images/rental/".$product_image->product_image;
                                                }
                                            }
                                            $wish_img[] = array("property_image"=>$prd_img);
                                        }
                                    }
                                    $condition = array('currency_type'=>$p->currency);
                                    $property_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                                    $property_currency_symbol = $property_currency_details->row()->currency_symbols;
                                    if($userDetails->row()->image !=''){
                                        $user_img = base_url().'images/users/'.$userDetails->row()->image;
                                    }else{
                                        $user_img = base_url().'images/users/user-thumb.png';
                                    }
                                    $select_prd = "select user_id from fc_product where id=".$property_id;
                                    $prd_ty = $this->mobile_model->ExecuteQuery($select_prd);
                                    foreach($prd_ty->result() as $RW)
                                    {
                                        $hostId = $RW->user_id;
                                        //echo $hostId;
                                    }
                                    $user_Currency_code = $this->input->post ( 'currency_code' );
                                    $propertyCurrency = $p->currency;
                                    if($user_Currency_code!=$propertyCurrency)
                                    {
                                        $propertyPrice = currency_conversion($propertyCurrency,$user_Currency_code,$p->price);
                                        $propertyCurCod= $user_Currency_code;
                                        $propertyCurSym= $this->db->select('currency_symbols')->where('currency_type',$propertyCurCod)->get(CURRENCY)->row()->currency_symbols;
                                    }
                                    else
                                    {
                                        $propertyPrice = $p->price;
                                        $propertyCurCod= $p->currency;
                                        $propertyCurSym= $property_currency_symbol;
                                    }
                                    $product[] = array("property_id"=>intval($p->id),"property_title"=>$p->product_title,"property_address"=>$p->address,"bedrooms"=>$p->bedrooms,"bathrooms"=>$p->bathrooms,"room_type"=>$p->room_type,"notes_id"=>intval($p->nid),"notes_desc"=>strip_tags($p->notes),"property_price"=>floatval($propertyPrice),"property_currency_code"=>$propertyCurCod,"property_currency_symbol"=>$propertyCurSym,"host_id"=>$hostId,"user_image"=>$user_img,"host_id"=>$p->user_id,"property_images"=>$wish_img);
                                }
                            }
                        }
                    }
                    $wishlist[] = array("wishlist_id"=>intval($wlist->id),"wishlist_title"=>$wlist->name,"wishlist_image"=>$img,"property_details"=>$product);
                }
                $json_encode = json_encode(array("status"=>1,"message"=>"Available!","wishlist"=>$wishlist));
                echo $json_encode;
                exit;
            } else {
                $json_encode = json_encode(array("status"=>1,"message"=>"Not Available!","wishlist"=>$wishlist));
                echo $json_encode;
                exit;
            }
        }
    }
    /* ADD Property to  WISHLIST */
    public function mobile_add_wishlist_property()
    {
        $wishlist_id = $this->input->post ( 'wishlist_id' );
        $user_id = $this->input->post ( 'user_id' );
        $property_id = $this->input->post ( 'property_id' );
        $user_Currency_code = $this->input->post ( 'currency_code' );
        if($wishlist_id =="" || $user_id=="" || $user_id==0 || $wishlist_id ==0 || $property_id =="" || $property_id ==0)
        {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        }
        else
        {
            $wishlist = array();
            $select_qrys = "select fc_lists.id from fc_lists where  id = ".$wishlist_id." and user_id = ".$user_id;
            $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
            if($list_values->num_rows()>0)
            {
                $update_wishlist_details = $this->mobile_model->update_wishlist_property ($property_id,$user_id,$wishlist_id);
                $condition1 = array("id"=>$user_id);
                $userDetails = $this->mobile_model->get_all_details(USERS,$condition1);
                $WishListCat = $this->mobile_model->get_list_details_wishlist($user_id);
                // echo $this->db->last_query();die;
                $wishlist = array();
                if($WishListCat->num_rows() > 0)
                {
                    foreach($WishListCat->result() as $wlist)
                    {
                        $product = array();
                        $exp_dtls = array();
                        $img = "";
                        if($wlist->product_id !='')
                        {
                            $products=explode(',',$wlist->product_id);
                            $productsNotEmy=array_filter($products);
                            $CountProduct1=count($productsNotEmy);
                            if($CountProduct1 > 0)
                            {
                                $CountProduct = $this->mobile_model->get_all_details(PRODUCT,array('id'=>end($productsNotEmy)))->num_rows();
                            }
                            //WISH LIST IMAGE(CATEGORY)
                            $img = "";
                            if($CountProduct > 0){
                                $ProductsImg = $this->mobile_model->get_all_details(PRODUCT_PHOTOS,array('product_id'=>end($productsNotEmy)));
                                if($ProductsImg->row()->product_image!=''){
                                    $img = base_url().'images/rental/'.$ProductsImg->row()->product_image;
                                }else{
                                    $img = 'images/rental/dummyProductImage.jpg';
                                }
                            } else {
                                $img = 'images/empty-wishlist.jpg';
                            }
                            $select_prd = "select user_id from fc_product where id='".$property_id."'";
                            $prd_ty = $this->mobile_model->ExecuteQuery($select_prd);
                            foreach($prd_ty->result() as $RW)
                            {
                                $hostId = $RW->user_id;
                                //echo $hostId;
                            }
                            if (count ( $productsNotEmy ) > 0) {
                                $product_details = $this->mobile_model->get_product_details_wishlist_one_category ( $productsNotEmy );
                                if(count($product_details)>0) {
                                    $product = array();
                                    $exp_dtls = array();
                                    foreach($product_details->result() as $p) {
                                        $wishlist_image  = $this->mobile_model->get_wishlistphoto ( $p->id );
                                        $wish_img = array();
                                        if(count($wishlist_image)>0) {
                                            foreach($wishlist_image->result() as $product_image) {
                                                $prd_img  ="";
                                                if($product_image->product_image !=""){
                                                    if(strpos($product_image->product_image, 's3.amazonaws.com') > 1) {
                                                        $prd_img = $product_image->product_image;
                                                    } else  {
                                                        $prd_img = base_url()."images/rental/".$product_image->product_image;
                                                    }
                                                }
                                                $wish_img[] = array("property_image"=>$prd_img);
                                            }
                                        }
                                        $condition = array('currency_type'=>$p->currency);
                                        $property_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                                        $property_currency_symbol = $property_currency_details->row()->currency_symbols;
                                        if($userDetails->row()->image !=''){
                                            $user_img = base_url().'images/users/'.$userDetails->row()->image;
                                        }else{
                                            $user_img = base_url().'images/users/user-thumb.png';
                                        }
                                        $propertyCurrency = $p->currency;
                                        if($user_Currency_code!=$propertyCurrency)
                                        {
                                            $propertyPrice = currency_conversion($propertyCurrency,$user_Currency_code,$p->price);
                                            $propertyCurCod= $user_Currency_code;
                                            $propertyCurSym= $this->db->select('currency_symbols')->where('currency_type',$propertyCurCod)->get(CURRENCY)->row()->currency_symbols;
                                        }
                                        else
                                        {
                                            $propertyPrice = $p->price;
                                            $propertyCurCod= $p->currency;
                                            $propertyCurSym= $property_currency_symbol;
                                        }
                                        $select_prd = "select user_id from fc_product where id='".$property_id."'";
                                        $prd_ty = $this->mobile_model->ExecuteQuery($select_prd);
                                        foreach($prd_ty->result() as $RW)
                                        {
                                            $hostId = $RW->user_id;
                                            //echo $hostId;
                                        }
                                        $product[] = array("property_id"=>intval($p->id),"property_title"=>
                                            $p->product_title,"property_address"=>$p->address,"bedrooms"=>$p->bedrooms,"bathrooms"=>$p->bathrooms,"room_type"=>$p->room_type,"notes_id"=>intval($p->nid),"notes_desc"=>strip_tags($p->notes),"property_price"=>floatval($propertyPrice),"property_currency_code"=>$propertyCurCod,"property_currency_symbol"=>$propertyCurSym,"host_id"=>intval($hostId),"user_image"=>$user_img,"property_images"=>$wish_img);
                                    }
                                }
                            }
                        }
                        $exp_dtls[] = array("experience_id"=>0,"experience_title"=>"","experience_address"=>"","notes_desc"=>"","experience_price"=>0,"experience_currency_symbol"=>"","host_id"=>0,"user_image"=>"","property_images"=>"");
                        $wishlist[] = array("wishlist_id"=>intval($wlist->id),"wishlist_title"=>$wlist->name,"wishlist_image"=>$img,"property_details"=>$product,"experience_details"=>$exp_dtls);
                    }
                    $json_encode = json_encode(array("status"=>1,"message"=>"Successfully Wishlist Added!","wishlist"=>$wishlist));
                    echo $json_encode;
                    exit;
                } else {
                    $json_encode = json_encode(array("status"=>1,"message"=>"Not Available!","wishlist"=>$wishlist));
                    echo $json_encode;
                    exit;
                }
            } else {
                echo json_encode(array("status"=>0,"message"=>"No data available!","wishlist"=>$wishlist));
                exit;
            }
        }
    }
    /* REMOVE Property to  WISHLIST */
    public function mobile_remove_wishlist_property()
    {
        $wishlist_id = $this->input->post ( 'wishlist_id' );
        $user_id = $this->input->post ( 'user_id' );
        $property_id = $this->input->post ( 'property_id' );
        if($user_id=="" || $user_id==0  || $property_id =="" || $property_id ==0) {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        } else {
            $wishlist = array();
            //$select_qrys = "select fc_lists.id from fc_lists where  id = ".$wishlist_id." and user_id = ".$user_id;
            $select_qrys = "select fc_lists.id from fc_lists where  find_in_set(".$property_id.",product_id) and user_id = ".$user_id;
            $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
            if($list_values->num_rows()>0) {
                $update_wishlist_details = $this->mobile_model->remove_wishlist_property ($property_id,$user_id,$wishlist_id);
                $condition1 = array("id"=>$user_id);
                $userDetails = $this->mobile_model->get_all_details(USERS,$condition1);
                $WishListCat = $this->mobile_model->get_list_details_wishlist($user_id);
                // echo $this->db->last_query();die;
                $wishlist = array();
                if($WishListCat->num_rows() > 0){
                    foreach($WishListCat->result() as $wlist){
                        $product = array();
                        $img = "";
                        $exp_dtls = array();
                        if($wlist->product_id !=''){
                            $products=explode(',',$wlist->product_id);
                            $productsNotEmy=array_filter($products);
                            $CountProduct1=count($productsNotEmy);
                            if($CountProduct1 > 0){
                                $CountProduct = $this->mobile_model->get_all_details(PRODUCT,array('id'=>end($productsNotEmy)))->num_rows();
                            }
                            $img = "";
                            if($CountProduct > 0){
                                $ProductsImg = $this->mobile_model->get_all_details(PRODUCT_PHOTOS,array('product_id'=>end($productsNotEmy)));
                                if($ProductsImg->row()->product_image!=''){
                                    $img = base_url().PRODUCTPATH.$ProductsImg->row()->product_image;
                                }else{
                                    $img = 'images/product/dummyProductImage.jpg';
                                }
                            } else {
                                $img = 'images/site/empty-wishlist.jpg';
                            }
                            if (count ( $productsNotEmy ) > 0) {
                                $product_details = $this->mobile_model->get_product_details_wishlist_one_category ( $productsNotEmy );
                                if(count($product_details)>0) {
                                    $product = array();
                                    $exp_dtls = array();
                                    foreach($product_details->result() as $p) {
                                        $wishlist_image  = $this->mobile_model->get_wishlistphoto ( $p->id );
                                        $wish_img = array();
                                        if(count($wishlist_image)>0) {
                                            foreach($wishlist_image->result() as $product_image) {
                                                $prd_img  ="";
                                                if($product_image->product_image !=""){
                                                    if(strpos($product_image->product_image, 's3.amazonaws.com') > 1) {
                                                        $prd_img = $product_image->product_image;
                                                    } else  {
                                                        $prd_img = base_url()."images/rental/".$product_image->product_image;
                                                    }
                                                }
                                                $wish_img[] = array("property_image"=>$prd_img);
                                            }
                                        }
                                        $condition = array('currency_type'=>$p->currency);
                                        $property_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                                        $property_currency_symbol = $property_currency_details->row()->currency_symbols;
                                        if($userDetails->row()->image !=''){
                                            $user_img = base_url().'images/users/'.$userDetails->row()->image;
                                        }else{
                                            $user_img = base_url().'images/users/user-thumb.png';
                                        }
                                        $renter_Details = $this->db->query('select u.email,u.id from '.USERS.' as u join '.PRODUCT.' as p on p.user_id = u.id  where p.id ="'.$property_id.'"');
                                        if($renter_Details->num_rows() >0) {
                                            foreach($renter_Details->result() as $r) {
                                                $host_id = $r->id;
                                            }
                                        }
                                        $product[] = array("property_id"=>intval($p->id),"property_title"=>
                                            $p->product_title,"property_address"=>$p->address,"bedrooms"=>$p->bedrooms,"bathrooms"=>$p->bathrooms,"room_type"=>$p->room_type,"notes_id"=>intval($p->nid),"notes_desc"=>strip_tags($p->notes),"property_price"=>floatval($p->price),"property_currency_code"=>$p->currency,"property_currency_symbol"=>$property_currency_symbol,"host_id"=>$host_id,"user_image"=>$user_img,"property_images"=>$wish_img);
                                    }
                                }
                            }
                        }
                        $exp_dtls[] = array("experience_id"=>0,"experience_title"=>"","experience_address"=>"","notes_desc"=>"","experience_price"=>0,"experience_currency_symbol"=>"","host_id"=>0,"user_image"=>"","property_images"=>"");
                        $wishlist[] = array("wishlist_id"=>intval($wlist->id),"wishlist_title"=>$wlist->name,"wishlist_image"=>$img,"property_details"=>$product,"experience_details"=>$exp_dtls);
                    }
                    $json_encode = json_encode(array("status"=>1,"message"=>"Successfully Wishlist Removed!","wishlist"=>$wishlist));
                    echo $json_encode;
                    exit;
                } else {
                    $json_encode = json_encode(array("status"=>1,"message"=>"Not Available!","wishlist"=>$wishlist));
                    echo $json_encode;
                    exit;
                }
            } else {
                echo json_encode(array("status"=>1,"message"=>"No data available!","wishlist"=>$wishlist));
                exit;
            }
        }
    }
    /* ADD REVIEW */
    public function mobile_add_review()
    {
        $user_id = $this->input->post ( 'user_id' );
        $property_id = $this->input->post ( 'property_id' );
        $bookingno = $this->input->post ( 'bookingno' );
        $review = $this->input->post ( 'review' );
        $total_review = $this->input->post ( 'star_rating' );
        if($user_id=="" || $user_id==0  || $property_id =="" || $property_id ==0 ||  $bookingno =="" ||  $review =="") {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        } else {
            $this->db->select('*');
            $this->db->from(USERS.' as u');
            $this->db->join(PRODUCT.' as p' , 'p.user)id = u.id');
            $userDetails = $this->db->query('select u.email,u.id from '.USERS.' as u where u.id ="'.$user_id.'"');
            $check_already_reviewed = $this->db->query('select * from '.REVIEW.' as r where r.reviewer_id ="'.$user_id.'" and r.product_id = "'.$property_id.'" and r.bookingno = "'.$bookingno.'" ');
            if($check_already_reviewed->num_rows() > 0){
                echo json_encode(array("status"=>0,"message"=>"User Already Reviewed the Booking"));
                exit;
            }
            else if($userDetails->num_rows() >0) {
                foreach($userDetails->result() as $u) {
                    $user_id = $u->id;
                    $email = $u->email;
                }
            } else {
                echo json_encode(array("status"=>0,"message"=>"No data available!"));
                exit;
            }
            $renter_Details = $this->db->query('select u.email,u.id from '.USERS.' as u join '.PRODUCT.' as p on p.user_id = u.id  where p.id ="'.$property_id.'"');
            //echo $this->db->last_query();die;
            if($renter_Details->num_rows() >0) {
                foreach($renter_Details->result() as $r) {
                    $host_id = $r->id;
                }
                $dataArr = array( 'review'=>$review, 'status'=>'Inactive', 'product_id'=>$property_id, 'user_id'=>$host_id, 'reviewer_id'=>$user_id, 'email'=>$email, 'bookingno'=>$bookingno, 'total_review'=>$total_review);
                $insertquery = $this->mobile_model->add_review($dataArr);
                $review_id = $this->db->insert_id();
                echo json_encode(array("status"=>1,"message"=>"Success!","review_id"=>intval($review_id)));
                exit;
            } else {
                echo json_encode(array("status"=>0,"message"=>"No data available!"));
                exit;
            }
        }
    }
    /* ADD DISPUTE */
    public function mobile_add_dispute()
    {
        $user_id = $this->input->post ( 'user_id' );
        $property_id = $this->input->post ( 'property_id' );
        $bookingno = $this->input->post ( 'bookingno' );
        $message = $this->input->post ( 'message' );
        if($user_id=="" || $user_id==0  || $property_id =="" || $property_id ==0 ||  $bookingno =="" ||  $message =="") {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        } else {
            $get_dispute_det = $this->mobile_model->get_all_details(DISPUTE,array('booking_no'=>$bookingno));
            if($get_dispute_det->num_rows() > 0)
            {
                echo json_encode(array("status"=>0,"message"=>"Already Disputed the Booking"));
                exit;
            }
            $this->db->select('*');
            $this->db->from(USERS.' as u');
            /*$this->db->join(PRODUCT.' as p' , 'p.user)id = u.id');*/
            $this->db->join(PRODUCT.' as p' , 'p.user_id = u.id');
            $userDetails = $this->db->query('select u.email,u.id from '.USERS.' as u where u.id ="'.$user_id.'"');
            if($userDetails->num_rows() >0) {
                foreach($userDetails->result() as $u) {
                    $user_id = $u->id;
                    $email = $u->email;
                }
            } else {
                echo json_encode(array("status"=>1,"message"=>"No data available!"));
                exit;
            }
            $renter_Details = $this->db->query('select u.email,u.id from '.USERS.' as u join '.PRODUCT.' as p on p.user_id = u.id  where p.id ="'.$property_id.'"');
            //echo $this->db->last_query();die;
            if($renter_Details->num_rows() >0) {
                foreach($renter_Details->result() as $r) {
                    $disputer_id = $r->id;
                }
                $dataArr = array('prd_id'=>$property_id,
                    'message'=>$message,
                    'user_id'=>$user_id,
                    'booking_no'=>$bookingno,
                    'email'=>$email,
                    'disputer_id'=>$disputer_id
                );
                $insertquery = $this->mobile_model->add_dispute($dataArr);
                $dispute_id = $this->db->insert_id();
                echo json_encode(array("status"=>1,"message"=>"Success!","dispute_id"=>intval($dispute_id)));
                exit;
            } else {
                echo json_encode(array("status"=>1,"message"=>"No data available!"));
                exit;
            }
        }
    }
    /* Property Image Delete */
    public function mobile_propertyimage_delete()
    {
        $image_id = $this->input->post ( 'image_id' );
        if($image_id=="" || $image_id==0 ) {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        } else {
            $condition =array('id'=>$image_id);
            $image_del = $this->mobile_model->commonDelete(PRODUCT_PHOTOS,array('id' => $image_id));
            echo json_encode(array("status"=>1,"message"=>"Success!"));
            exit;
        }
    }
    /* Property your review */
    public function mobile_your_review()
    {
        $user_id = $this->input->post ( 'user_id' );
        $booking_no = $this->input->post ( 'booking_no' );
        if($user_id =="" || $booking_no =="") {
            echo json_encode(array("status"=>0,"message"=>"Parameter Missing!"));
            exit;
        } else {
            $review_all = $this->mobile_model->get_trip_review($booking_no,$user_id);
            $your_review = array();
            if($review_all->num_rows()>0){
                foreach($review_all->result() as $review) {
                    if($review->image == '') {
                        $img_url = base_url().'images/users/profile.png';
                    }  else {
                        $img_url = base_url().'images/users/'.$review->image;
                    }
                    $review_date = date('d F Y',strtotime($review->dateAdded));
                    $your_review[] = array(
                        "name"=>$review->firstname,
                        "rental_name"=>$review->product_title,
                        "booking_no"=>$review->bookingno,
                        "review"=>$review->review,
                        "review_date"=>$review_date,
                        "star_rating"=>intval($review->total_review),
                        "user_image"=>$img_url
                    );
                }
                echo json_encode(array("status"=>1,"message"=>"Success!","your_review"=>$your_review));
                exit;
            } else {
                echo json_encode(array("status"=>0,"message"=>"No data available!","your_review"=>$your_review));
                exit;
            }
        }
    }
// property your Dispute
    public function mobile_your_dispute()
    {
        $user_id = $this->input->post ( 'user_id' );
        $booking_no = $this->input->post ( 'booking_no' );
        if($user_id =="" || $booking_no =="") {
            echo json_encode(array("status"=>0,"message"=>"Parameter Missing!"));
            exit;
        } else {
            $dispute_all = $this->mobile_model->get_trip_dispute($booking_no,$user_id);
            $your_dispute = array();
            if($dispute_all->num_rows()>0){
                foreach($dispute_all->result() as $dispute) {
                    if($dispute->image == '') {
                        $img_url = base_url().'images/users/profile.png';
                    }  else {
                        $img_url = base_url().'images/users/'.$dispute->image;
                    }
                    $dispute_date = date('d F Y',strtotime($dispute->created_date));
                    $your_dispute[] = array(
                        "name"=>$dispute->firstname,
                        "booking_no"=>$dispute->booking_no,
                        "product_name"=>$dispute->product_title,
                        "product_address"=>$dispute->city.','.$dispute->state.','.$dispute->country,
                        "dispute"=>$dispute->message,
                        "dispute_date"=>$dispute_date,
                        "user_image"=>$img_url
                    );
                }
                echo json_encode(array("status"=>1,"message"=>"Success!","your_dispute"=>$your_dispute));
                exit;
            } else {
                echo json_encode(array("status"=>0,"message"=>"No data available!","your_dispute"=>$your_dispute));
                exit;
            }
        }
    }
    public function test_page()
    {
        $this->load->view('site/order/test.php');
    }
    public function test_api_post()
    {
        $test = $this->input->post ( 'test' );
        echo $test; exit;
    }
    /* TRUST AND VERIFICATION */
    public function trust_verification()
    {
        $user_id = $this->input->post('user_id');
        if($user_id =="" || $user_id ==0){
            echo json_encode(array('status'=>0,'message'=>'Parameter missing!'));
            exit;
        }
        require_once('twilio/Services/Twilio.php');
        $account_sid = $this->config->item('twilio_account_sid');
        $auth_token = $this->config->item('twilio_account_token');
        $twilio_enabledisable=$this->config->item('twilio_onoff');
        $twilio_enabledisable=1;
        //echo $auth_token;
        $random_confirmation_number = mt_rand(100000, 999999);
        // $random_confirmation_number = "12345";    // for testing purpose once testing is done delete this line
        $excludeArr=array('product_id','mobile_code','user_id');
        $dataArr=array('mobile_verification_code'=>$random_confirmation_number);
        $condition=array('id'=>$user_id);
        $data = array(
            'mobile_verification_code'=>$random_confirmation_number
        );
        $condition = array(
            'id'=>$user_id
        );
        $this->mobile_model->update_details(USERS ,$data ,$condition);
        $from=$this->config->item('twilio_phone_number');
        if($this->input->post('mobile_code') && $this->input->post('phone_no'))
        {
            $mobile_code=$this->input->post('mobile_code');
            $phone_number=$this->input->post('phone_no');
        } else {
            $user_details_query = $this->mobile_model->get_all_details(USERS,array('id'=>$user_id));
            /*if($user_details_query->row()->ph_country == "") { old one replaced below for country code*/
            if($user_details_query->row()->country == "") {
                echo json_encode(array('status'=>0,'message'=>'Country Missing!'));
                exit;
            }
            /*$user_details_query->row()->ph_country*/
            $mobile_code_query='SELECT country_mobile_code FROM '.LOCATIONS.' WHERE id='.$user_details_query->row()->country;
            $mobile_code=$this->mobile_model->ExecuteQuery($mobile_code_query);
            $phone_number=$user_details_query->row()->phone_no;
            $mobile_code=$mobile_code->row()->country_mobile_code;
            //$mobile_code='+91';
        }
        if($twilio_enabledisable==1) {
            //$to=$mobile_code.$phone_number; //echo $to;die;
            $to=$phone_number;
            try {
                $client = new Services_Twilio($account_sid, $auth_token);
                $client->account->messages->create(array(
                    'To' => $to,
                    //'To' => '+919790153222', // test number
                    'From' =>$from,
                    'Body' => "Hi This is from ".$this->config->item('meta_title')." and Your Verification Code is ".$random_confirmation_number,
                ));
                $json_encode = json_encode(array('status'=>1,'message'=>"Success",'mobile_verification_code'=>intval($random_confirmation_number)));
            } catch( Services_Twilio_RestException $e ) {
                $message=$e->getMessage(); // Or maybe log it
                //print_r($message);
                // Handle the fact that "The requested resource /PhoneNumbers/310-69-5340 was not found"
                $json_encode = json_encode(array('status'=>0,'message'=>"Not valid setting Inputs. Please contact Administrator.",'mobile_verification_code'=>intval($random_confirmation_number)));
            }
        } else {
            $json_encode = json_encode(array('status'=>0,'message'=>"Verification Not Enabled. Please Contact administrator.",'mobile_verification_code'=>intval($random_confirmation_number)));
        }
        /*$json_encode = json_encode(array('status'=>0,'message'=>"Success",'mobile_verification_code'=>intval($random_confirmation_number)));*/
        echo $json_encode;
        exit;
    }
    /* Mobile NUmber verification validator */
    public function trust_verification_validator()
    {
        $user_id = $this->input->post('user_id');
        $mobile_verification_code = $this->input->post('mobile_verification_code');
        if($user_id =="" ||  $mobile_verification_code ==""){
            echo json_encode(array('status'=>0,'message'=>'Parameter missing!'));
            exit;
        } else {
            $user_details_query = $this->mobile_model->get_all_details(USERS,array('id'=>$user_id,'mobile_verification_code'=>
                $mobile_verification_code));
            if($user_details_query->num_rows()>0) {
                $data = array(
                    'ph_verified'=>'Yes'
                );
                $condition = array(
                    'id'=>$user_id
                );
                $this->mobile_model->update_details(USERS ,$data ,$condition);
                echo json_encode(array('status'=>1,'message'=>'Success!'));
                exit;
            } else {
                echo json_encode(array('status'=>0,'message'=>'Invalid details!'));
                exit;
            }
        }
    }
    /* settings */
    public function payment_settings()
    {
        $paypal_settings=unserialize($this->config->item('payment_0'));
        $paypal_settings=unserialize($paypal_settings['settings']);
        if($paypal_settings['mode'] == 'sandbox'){
            $this->paypal_class->paypal_url = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
        }else{
            $this->paypal_class->paypal_url = 'https://www.paypal.com/cgi-bin/webscr';     // paypal url
        }
        if($paypal_settings['mode'] !="" && $paypal_settings['merchant_email']!="" && $paypal_settings['clientID']!="" && $paypal_settings['secretkey']!="") {
            $settings = array("mode"=>$paypal_settings['mode'],"paypal_merchant_email"=>$paypal_settings['merchant_email'],"clientID"=>$paypal_settings['clientID'],"secretkey"=>$paypal_settings['secretkey']);
            echo json_encode(array('status'=>1,'message'=>'Success!','settings'=>$settings));
            exit;
        } else {
            echo json_encode(array('status'=>0,'message'=>'Failure!'));
            exit;
        }
    }
    public function explore_experience()
    {
        $ctgry = $this->input->post( 'category' );
        $category = explode(",", $ctgry);
        $typ_id = $this->input->post( 'type_id' );
        $type_id = explode(",", $typ_id);
        $currencycode = $this->input->post( 'currency_code' );
        $fromdate = $_POST['checkin'];
        if($fromdate != '')
        {
            $startdate = explode('/',$fromdate);
            $datefrom = $startdate[2] . '-' . $startdate[0] . '-' . $startdate[1];
        }
        else
        {
            $datefrom = '';
        }
        $todate = $_POST['checkout'];
        if($todate != '')
        {
            $enddate = explode('/',$todate);
            $dateto = $enddate[2] . '-' . $enddate[0] . '-' . $enddate[1];
        }
        else
        {
            $dateto = '';
        }
        $get_address = $_POST['city'];
        $user_id = $_POST['user_id'];
        $search='';
        if($get_address!='')
        {
            $googleAddress = $this->data ['gogole_address'] = $get_address;
            $googleAddress = str_replace(" ", "+", $googleAddress);
            $json = file_get_contents("https://maps.google.com/maps/api/geocode/json?address=$googleAddress&sensor=false&key=$google_map_api");
            $json = json_decode($json);
            $newAddress = $json->{'results'}[0]->{'address_components'};
            $this->data ['lat'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lat'};
            $this->data ['long'] = $json->{'results'}[0]->{'geometry'}->{'location'}->{'lng'};
            foreach($newAddress as $nA){
                if($nA->{'types'}[0] == 'locality')$location = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'administrative_area_level_2')$city = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'administrative_area_level_1')$state = $nA->{'long_name'};
                if($nA->{'types'}[0] == 'country')$country = $nA->{'long_name'};
            }
            if($city == '') $city = $location;
            $minLat = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lat'};
            $minLong = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'southwest'}->{'lng'};
            $maxLat = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lat'};
            $maxLong = $json->{'results'}[0]->{'geometry'}->{'bounds'}->{'northeast'}->{'lng'};
            $whereLat = '(expAdd.lat BETWEEN "'.$minLat.'" AND "'.$maxLat.'" ) AND (expAdd.lang BETWEEN "'.$minLong.'" AND "'.$maxLong.'" ) ';
            $search = ' '.$whereLat;
        }
        if(($datefrom != '') || ($dateto != ''))
        {
            $newDateStart = date("Y-m-d", strtotime($datefrom));
            $newDateEnd = date("Y-m-d", strtotime($dateto));
            if($search!='')
                $search .=' and ';
            if($newDateStart!='' && $newDateEnd!=''){
                $search.=' d.from_date > "'.$newDateStart.'" and d.to_date <= "'.$newDateEnd.'" ';
            }else if($newDateStart!='' && $newDateEnd==''){
                $search.=' d.from_date > "'.$newDateStart.'" ';
            }else if($newDateStart=='' && $newDateEnd!=''){
                $search.=' d.to_date <= "'.$newDateEnd.'" ';
            }
        }
        $supported_Categories  = array(1,2);
        if($_POST['type_id']!='')
        {
            $date_search ='';
            $single_Day = $multi_day = 0;
            foreach ($type_id as $cat)
            {
                if($cat=='1'){
                    $multi_day = '1';
                }else if($cat =='2'){
                    $single_Day = '1';
                }
            }
            if(($single_Day==1 && $multi_day==1)||($single_Day==0 && $multi_day==0) )
            {
                $date_search = 'p.date_count>=1';
            }
            else if(($single_Day==0 && $multi_day==1))
            {
                $date_search = 'p.date_count>1';
            }
            else
            {
                $date_search = 'p.date_count=1';
            }
        }
        if($search!='')
            $search .=' and ';
        $search .= $date_search;
        if($date_search!='')
            $search .=' and ';
        if($_POST['category'])
        {
            $selected_ctgry = implode(',', $category);
            if($search=='')
                $search .= 'p.type_id in ('.$selected_ctgry.') and ';
            else
                $search .= ' '.'p.type_id in ('.$selected_ctgry.') and';
        }
        /*Query to get all the experience categories*/
        $expeience_type_query = "select fc_experience_type.id,fc_experience_type.experience_title from fc_experience_type where status='Active'";
        $exp_type_details = $this->mobile_model->ExecuteQuery($expeience_type_query);
        foreach ($exp_type_details->result() as $result)
        {
            $exp_ctgy[] = array('exp_category_id' =>intval($result->id),'exp_category_name'=>$result->experience_title,'exp_category_ischecked'=>false);
        }
        /*Query to get all the experience details*/
        $get_ordered_list_count = $this->mobile_model->get_exprience_view_details_withFilters( '  where ' . $search . ' d.from_date > "' .date('Y-m-d'). '" and p.status="1" '."and p.status='1' AND EXISTS
      ( select c.id FROM fc_experience_dates c where c.status='0' and c.experience_id=p.experience_id
      ) AND EXISTS (select count(td.id) FROM fc_experience_time_sheet td where td.status='1' and td.experience_id=p.experience_id)".' group by p.experience_id order by p.added_date desc' );
        /*Wishlist*/
        $wishlists= $this->mobile_model->get_all_details(LISTS_DETAILS, array('user_id'=>$user_id));
        if($get_ordered_list_count->num_rows() > 0)
        {
            $newArr = array();
            foreach($wishlists->result() as $wish)
            {
                $newArr = array_merge(array_filter($newArr) , explode(',', $wish->experience_id));
            }
        }
        else
        {
            $newArr = array();
        }
        foreach($newArr as $key => $value)
        {
            if(!isset($value[0][0]))
                unset($newArr[$key]);
        }
        if($get_ordered_list_count->num_rows > 0)
        {
            foreach ($get_ordered_list_count->result() as $result)
            {
                if($result->exp_type == 1)
                {
                    $exptype_name = "Immersion";
                }
                else
                {
                    $exptype_name = "Experience";
                }
                if(in_array($result->experience_id, $newArr))
                {
                    $exp_favourite = true;
                }
                else
                {
                    $exp_favourite = false;
                }
                $exp_dtls[] = array('exp_image' =>base_url().'images/experience/'.$result->product_image,'exp_id'=>intval($result->experience_id),'exp_name'=>$result->experience_title,'currency_type'=>$result->currency_symbols,'exp_price'=>floatval($result->price),'exp_type'=>$exptype_name,'exp_category'=>$result->type_title,'exp_review_count'=>$result->review_count,'exp_public_rating'=>floatval($result->review_avg),'exp_favourite'=>$exp_favourite,"currency_code"=>$currencycode);
            }
        }
        else
        {
            $exp_dtls = array();
        }
        /*Experience Types*/
        $exp_types = array();
        $firstarr = array('exp_id' => 1,'exp_type_name'=>'Immersion','exp_type_subname'=>'Happen over multiple days','exp_type_ischecked'=>'false');
        $secarr = array('exp_id' => 2,'exp_type_name'=>'Experiences','exp_type_subname'=>'Last 2 or more hours','exp_type_ischecked'=>'false');
        $exp_types[] = $firstarr;
        $exp_types[] = $secarr;
        if($get_ordered_list_count->num_rows() > 0)
        {
            echo json_encode(array('status'=>1,'message'=>'Success!','experience_details'=>$exp_dtls,'experience_categories'=>$exp_ctgy,'experience_types'=>$exp_types));
        }
        else
        {
            echo json_encode(array('status'=>0,'message'=>'No Related Experience Found!','experience_details'=>$exp_dtls,'experience_categories'=>$exp_ctgy,'experience_types'=>$exp_types));
        }
    }
    public function view_experience_details()
    {
        if($this->data['experienceExistCount']<=0)
        {
            echo json_encode(array('status'=>0,'message'=>'Experience Module is Disabled!'));
            exit;
        }
        /*$this->data['controller'] = $this; */
        $user_id =  $this->input->post( 'user_id' );
        $exper_id = $this->input->post( 'exp_id' );
        $currencycode = $this->input->post('currency_code');
        $where1 = array('p.status'=>'1','p.experience_id'=>$exper_id);
        $where_or = array('p.status'=>'1') ;
        $where2 = array('p.status'=>'1','p.experience_id'=>$exper_id);
        /**Experience Timimngs**/
        $exp_schedules = array();
        $datesList = $this->mobile_model->getAvailableDates($exper_id,date('Y-m-d'));
        if($datesList->num_rows()>0)
        {
            foreach ($datesList->result() as $dates)
            {
                $dateId = $dates->id;
                $this->data['datesSchedule'][$dateId] = $this->mobile_model->getDateSchedule($dateId);
                foreach ($this->data['datesSchedule'][$dateId]->result() as $time)
                {
                    $exp_schedules[] = array('date_id'=>$dateId,'exp_title'=>$time->title,'exp_schedule_date'=>date('M D,dS Y',strtotime($time->schedule_date)),'exp_start_time'=>date('H:i',strtotime($time->start_time)),'exp_end_time'=>date('H:i',strtotime($time->end_time)));
                }
            }
        }
        $this->data['productDetails'] = $this->mobile_model->view_experience_details_mobile($where1,$where_or,$where2);
        if($this->data['productDetails']->num_rows > 0)
        {
            foreach ($this->data['productDetails']->result() as $result)
            {
                if($result->exp_type == 1)
                {
                    $exptype_name = "Immersion";
                }
                else
                {
                    $exptype_name = "Experience";
                }
                if($result->id_verified == No)
                {
                    $id_verified = "NOT VERIFIED";
                }
                else
                {
                    $id_verified = "VERIFIED";
                }
                $condition = array('currency_type'=>$result->currency);
                $experience_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                $experience_currency_symbol = $experience_currency_details->row()->currency_symbols;
                $exp_details[] = array('exp_id'=>intval($result->experience_id),'exp_type'=>$exptype_name,'exp_title'=>$result->experience_title,'exp_tagline'=>$result->exp_tagline,'exp_price'=>floatval($result->price),'exp_host_id'=>intval($result->user_id),'exp_typeid'=>intval($result->type_id),'exp_datecount'=>$result->date_count,'exp_totalhours'=>$result->total_hours,'exp_description'=>strip_tags($result->experience_description),'notetoguest'=>$result->note_to_guest,'about_host'=>$result->about_host,'location_description'=>$result->location_description,'group_size'=>$result->group_size,'guest_requirement'=>$result->guest_requirement,'cancel_policy'=>$result->cancel_policy,'cancel_percentage'=>$result->cancel_percentage,'video_url'=>$result->video_url,'page_view_count'=>$result->page_view_count,'exp_category'=>$result->exp_title,'firstname'=>$result->firstname,'group'=>$result->group,'host_imgurl'=>base_url().'images/users/'.$result->thumbnail,'hostid_verified'=>$id_verified,'exp_address'=>floatval($result->exp_address),'exp_lat'=>floatval($result->exp_lat),'exp_lang'=>floatval($result->exp_lang),'exp_city'=>$result->exp_city,'exp_from_date'=>$result->exp_fromdate,'exp_to_date'=>$result->exp_todate,'exp_currency_symbol'=>$experience_currency_symbol,"exp_currency_code"=>$currencycode);
                $lang_list = $result->language_list;
            }
            /**Experience photos**/
            $this->data['exp_photos'] = $this->mobile_model->view_experience_photos_mobile($exper_id);
            if($this->data['exp_photos']->num_rows > 0)
            {
                foreach ($this->data['exp_photos']->result() as $photos)
                {
                    $exp_photos[] = array('exp_imagesurl'=> base_url().'images/experience/'.$photos->product_image);
                }
            }
            else
            {
                $exp_photos = array();
            }
            /**Experience Known language**/
            if($this->data['productDetails']->row()->language_list!='')
            {
                $this->data['language_list'] = $this->mobile_model->ExecuteQuery("select language_name from ".LANGUAGES_KNOWN." where language_code in (".$this->data['productDetails']->row()->language_list.") ");
                /*foreach ($this->data['language_list']->result() as $lngcd)
        {
            $known_languages[] = array('known_language'=>$lngcd->language_name);
        }*/
                foreach ($this->data['language_list']->result() as $lngcd)
                {
                    $known_langs[] = $lngcd->language_name;
                }
                $known_languages[] = array('known_language'=>implode(",", $known_langs));
            }
            /**guide provided equipments**/
            $this->data['kit_content'] = $this->mobile_model->get_all_equipment_details($exper_id);
            if($this->data['kit_content']->num_rows > 0)
            {
                foreach ($this->data['kit_content']->result() as $kit)
                {
                    $exp_kit[] = array('exp_kit_title'=>$kit->kit_title,'exp_kit_detailedtitle'=>$kit->kit_detailed_title,'exp_kit_count'=>$kit->kit_count,'exp_kit_description'=>$kit->kit_description);
                }
            }
            else
            {
                $exp_kit = array();
            }
            /**Experience Reviews**/
            $this->data['user_reviewData'] = $this->mobile_model->get_exp_review($exper_id);
            if($this->data['user_reviewData']->num_rows > 0)
            {
                foreach ($this->data['user_reviewData']->result() as $rew)
                {
                    $exp_reviews[] = array('exp_review'=>$rew->review,'exp_review_date'=>$rew->dateAdded,'single_review_count'=>floatval($rew->total_review),'u_firstname'=>$rew->firstname,'u_lastname'=>$rew->lastname,'u_profileimage'=>base_url().'images/users/'.$rew->image,'total_review_count'=>$rew->total_review_count,'review_avg'=>floatval($rew->review_avg));
                }
            }
            else
            {
                $exp_reviews = array();
            }
        }
        else
        {
            $exp_details = array();
        }
        if($this->data['productDetails']->num_rows > 0)
        {
            echo json_encode(array('status'=>1,'message'=>'Success!','experience_details'=>$exp_details,'experience_photos'=>$exp_photos,'Known_languages'=>$known_languages,'Host_Provides'=>$exp_kit,'experience_reviews'=>$exp_reviews,'experience_schedules'=>$exp_schedules),JSON_PRETTY_PRINT);
        }
        else
        {
            echo json_encode(array('status'=>0,'message'=>'No Experience Found!','experience_details'=>$exp_details));
        }
    }
    /* ADD Experience to  WISHLIST */
    public function mobile_add_wishlist_experience()
    {
        $wishlist_id = $this->input->post ( 'wishlist_id' );
        $user_id = $this->input->post ( 'user_id' );
        $experience_id = $this->input->post ( 'experience_id' );
        if($wishlist_id =="" || $user_id=="" || $user_id==0 || $wishlist_id ==0 || $experience_id =="" || $experience_id ==0)
        {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        }
        else
        {
            $wishlist = array();
            $select_qrys = "select fc_lists.id from fc_lists where  id = ".$wishlist_id." and user_id = ".$user_id;
            $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
            if($list_values->num_rows()>0)
            {
                $update_wishlist_details = $this->mobile_model->update_wishlist_experience ($experience_id,$user_id,$wishlist_id);
                $condition1 = array("id"=>$user_id);
                $userDetails = $this->mobile_model->get_all_details(USERS,$condition1);
                $WishListCat = $this->mobile_model->get_list_details_wishlist_experience($user_id);
                $wishlist = array();
                if($WishListCat->num_rows() > 0)
                {
                    foreach($WishListCat->result() as $wlist)
                    {
                        $product = array();
                        $img = base_url().'images/site/empty-wishlist.jpg';
                        $exp_dtls = array();
                        if($wlist->experience_id !='')
                        {
                            $products=explode(',', $wlist->experience_id);
                            $productsNotEmy=array_filter($products);
                            $CountProduct1=count($productsNotEmy);
                            if($CountProduct1 > 0)
                            {
                                $CountProduct = $this->mobile_model->get_all_details(EXPERIENCE,array('experience_id'=>end($productsNotEmy)))->num_rows();
                            }
                            $img = "";
                            if($CountProduct > 0)
                            {
                                $ProductsImg = $this->mobile_model->get_all_details(fc_experience_photos,array('product_id'=>end($productsNotEmy)));
                                if($ProductsImg->row()->product_image!='')
                                {
                                    $img = base_url().'/images/experience/'.$ProductsImg->row()->product_image;
                                }
                                else
                                {
                                    $img = 'images/product/dummyProductImage.jpg';
                                }
                            }
                            else
                            {
                                $img = 'images/site/empty-wishlist.jpg';
                            }
                            $select_prd = "select user_id from fc_experiences where experience_id='".$experience_id."'";
                            $prd_ty = $this->mobile_model->ExecuteQuery($select_prd);
                            foreach($prd_ty->result() as $RW)
                            {
                                $hostId = $RW->user_id;
                            }
                            if (count ( $productsNotEmy ) > 0)
                            {
                                $product_details = $this->mobile_model->get_experience_details_wishlist_one_category ( $productsNotEmy );
                                if(count($product_details)>0)
                                {
                                    $product = array();
                                    foreach($product_details->result() as $p)
                                    {
                                        $wishlist_image  = $this->mobile_model->get_wishlist_experience_photo( $p->experience_id );
                                        $wish_img = array();
                                        if(count($wishlist_image)>0)
                                        {
                                            foreach($wishlist_image->result() as $product_image)
                                            {
                                                $prd_img  ="";
                                                if($product_image->product_image !="")
                                                {
                                                    if(strpos($product_image->product_image, 's3.amazonaws.com') > 1)
                                                    {
                                                        $prd_img = $product_image->product_image;
                                                    }
                                                    else
                                                    {
                                                        $prd_img = base_url()."images/experience/".$product_image->product_image;
                                                    }
                                                }
                                                $wish_img[] = array("experience_image"=>$prd_img);
                                            }
                                        }
                                        $condition = array('currency_type'=>$p->currency);
                                        $experience_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                                        $experience_currency_symbol = $experience_currency_details->row()->currency_symbols;
                                        if($userDetails->row()->image !='')
                                        {
                                            $user_img = base_url().'images/users/'.$userDetails->row()->image;
                                        }
                                        else
                                        {
                                            $user_img = base_url().'images/users/user-thumb.png';
                                        }
                                        $select_prd = "select user_id from fc_experiences where experience_id='".$experience_id."'";
                                        $prd_ty = $this->mobile_model->ExecuteQuery($select_prd);
                                        $exp_dtls[] = array("experience_id"=>intval($p->experience_id),"experience_title"=>
                                            $p->experience_title,"experience_address"=>$p->address,"notes_desc"=>strip_tags($p->review_content),"experience_price"=>floatval($p->price),"experience_currency_symbol"=>$experience_currency_symbol,"host_id"=>intval($user_id),"user_image"=>$user_img,"expeience_images"=>$wish_img);
                                    }
                                }
                            }
                        }
                        $prdt_imgs = array();
                        $product[] = array("property_id"=>0,"property_title"=>"","property_address"=>"","bedrooms"=>"","bathrooms"=>"","room_type"=>"","notes_id"=>0,"notes_desc"=>"","property_price"=>0,"property_currency_code"=>"","property_currency_symbol"=>"","host_id"=>0,"user_image"=>"","property_images"=>$prdt_imgs);
                        $wishlist[] = array("wishlist_id"=>intval($wlist->id),"wishlist_title"=>$wlist->name,"wishlist_image"=>$img,"experience_details"=>$exp_dtls,"property_details"=>$product);
                    }
                    $json_encode = json_encode(array("status"=>1,"message"=>"Successfully Wishlist Added!","wishlist"=>$wishlist));
                    echo $json_encode;
                    exit;
                }
                else
                {
                    $json_encode = json_encode(array("status"=>1,"message"=>"Not Available!","wishlist"=>$wishlist));
                    echo $json_encode;
                    exit;
                }
            }
            else
            {
                echo json_encode(array("status"=>0,"message"=>"No data available!","wishlist"=>$wishlist));
                exit;
            }
        }
    }
    /* Remove Experience From  WISHLIST */
    public function mobile_remove_wishlist_experience()
    {
        $wishlist_id = $this->input->post ( 'wishlist_id' );
        $user_id = $this->input->post ( 'user_id' );
        $experience_id = $this->input->post ( 'experience_id' );
        if($user_id=="" || $user_id==0  || $experience_id =="" || $experience_id ==0)
        {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        }
        else
        {
            $wishlist = array();
            $select_qrys = "select fc_lists.id from fc_lists where  find_in_set(".$experience_id.",experience_id) and user_id = ".$user_id;
            $list_values = $this->mobile_model->ExecuteQuery($select_qrys);
            if($list_values->num_rows()>0)
            {
                $update_wishlist_details = $this->mobile_model->remove_wishlist_experience ($experience_id,$user_id,$wishlist_id);
                $condition1 = array("id"=>$user_id);
                $userDetails = $this->mobile_model->get_all_details(USERS,$condition1);
                $WishListCat = $this->mobile_model->get_list_details_wishlist_experience($user_id);
                $wishlist = array();
                if($WishListCat->num_rows() > 0)
                {
                    foreach($WishListCat->result() as $wlist)
                    {
                        $product = array();
                        $img = base_url().'images/site/empty-wishlist.jpg';
                        $exp_dtls = array();
                        if($wlist->experience_id !='')
                        {
                            $products=explode(',', $wlist->experience_id);
                            $productsNotEmy=array_filter($products);
                            $CountProduct1=count($productsNotEmy);
                            if($CountProduct1 > 0)
                            {
                                $CountProduct = $this->mobile_model->get_all_details(EXPERIENCE,array('experience_id'=>end($productsNotEmy)))->num_rows();
                            }
                            $img = "";
                            if($CountProduct > 0)
                            {
                                $ProductsImg = $this->mobile_model->get_all_details(fc_experience_photos,array('product_id'=>end($productsNotEmy)));
                                if($ProductsImg->row()->product_image!='')
                                {
                                    $img = base_url().'/images/experience/'.$ProductsImg->row()->product_image;
                                }
                                else
                                {
                                    $img = 'images/product/dummyProductImage.jpg';
                                }
                            }
                            else
                            {
                                $img = 'images/site/empty-wishlist.jpg';
                            }
                            $select_prd = "select user_id from fc_experiences where experience_id='".$experience_id."'";
                            $prd_ty = $this->mobile_model->ExecuteQuery($select_prd);
                            foreach($prd_ty->result() as $RW)
                            {
                                $hostId = $RW->user_id;
                            }
                            if (count ( $productsNotEmy ) > 0)
                            {
                                $product_details = $this->mobile_model->get_experience_details_wishlist_one_category ( $productsNotEmy );
                                if(count($product_details)>0)
                                {
                                    $product = array();
                                    foreach($product_details->result() as $p)
                                    {
                                        $wishlist_image  = $this->mobile_model->get_wishlist_experience_photo( $p->experience_id );
                                        $wish_img = array();
                                        if(count($wishlist_image)>0)
                                        {
                                            foreach($wishlist_image->result() as $product_image)
                                            {
                                                $prd_img  ="";
                                                if($product_image->product_image !="")
                                                {
                                                    if(strpos($product_image->product_image, 's3.amazonaws.com') > 1)
                                                    {
                                                        $prd_img = $product_image->product_image;
                                                    }
                                                    else
                                                    {
                                                        $prd_img = base_url()."images/experience/".$product_image->product_image;
                                                    }
                                                }
                                                $wish_img[] = array("experience_image"=>$prd_img);
                                            }
                                        }
                                        $condition = array('currency_type'=>$p->currency);
                                        $experience_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                                        $experience_currency_symbol = $experience_currency_details->row()->currency_symbols;
                                        if($userDetails->row()->image !='')
                                        {
                                            $user_img = base_url().'images/users/'.$userDetails->row()->image;
                                        }
                                        else
                                        {
                                            $user_img = base_url().'images/users/user-thumb.png';
                                        }
                                        $select_prd = "select user_id from fc_experiences where experience_id='".$experience_id."'";
                                        $prd_ty = $this->mobile_model->ExecuteQuery($select_prd);
                                        $exp_dtls[] = array("experience_id"=>intval($p->experience_id),"experience_title"=>
                                            $p->experience_title,"experience_address"=>$p->address,"notes_desc"=>strip_tags($p->review_content),"experience_price"=>floatval($p->price),"experience_currency_symbol"=>$experience_currency_symbol,"host_id"=>intval($user_id),"user_image"=>$user_img,"property_images"=>$wish_img);
                                    }
                                }
                            }
                        }
                        $prdt_imgs = array();
                        $product[] = array("property_id"=>0,"property_title"=>"","property_address"=>"","bedrooms"=>"","bathrooms"=>"","room_type"=>"","notes_id"=>0,"notes_desc"=>"","property_price"=>0,"property_currency_code"=>"","property_currency_symbol"=>"","host_id"=>0,"user_image"=>"","property_images"=>$prdt_imgs);
                        $wishlist[] = array("wishlist_id"=>intval($wlist->id),"wishlist_title"=>$wlist->name,"wishlist_image"=>$img,"experience_details"=>$exp_dtls,"property_details"=>$product);
                    }
                    $json_encode = json_encode(array("status"=>1,"message"=>"Successfully Wishlist Deleted!","wishlist"=>$wishlist));
                    echo $json_encode;
                    exit;
                }
                else
                {
                    $json_encode = json_encode(array("status"=>1,"message"=>"Not Available!","wishlist"=>$wishlist));
                    echo $json_encode;
                    exit;
                }
            }
            else
            {
                echo json_encode(array("status"=>0,"message"=>"No data available!","wishlist"=>$wishlist));
                exit;
            }
        }
    }
    public function mobile_wishlistview()
    {
        $user_id = $_POST['userid'];
        if($user_id =="")
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Parameter Missing!"));
            echo $json_encode;
            exit;
        }
        else
        {
            $condition1 = array("id"=>$user_id);
            $userDetails = $this->mobile_model->get_all_details(USERS,$condition1);
            $WishListCat = $this->mobile_model->get_list_details_wishlist($user_id);
            $wishlist = array();
            if($WishListCat->num_rows() > 0)
            {
                foreach($WishListCat->result() as $wlist)
                {   /*properties*/
                    $product = array();
                    $img = base_url().'images/site/empty-wishlist.jpg';
                    if($wlist->product_id !='')
                    {
                        $products=explode(',',$wlist->product_id);
                        $productsNotEmy=array_filter($products);
                        $CountProduct1=count($productsNotEmy);
                        if($CountProduct1 > 0)
                        {
                            $CountProduct = $this->mobile_model->get_all_details(PRODUCT,array('id'=>end($productsNotEmy),'status'=>'Publish'))->num_rows();
                        }
                        $img = "";
                        if($CountProduct > 0)
                        {
                            $ProductsImg = $this->mobile_model->get_all_details(PRODUCT_PHOTOS,array('product_id'=>end($productsNotEmy)));
                            if($ProductsImg->row()->product_image!='')
                            {
                                $img = base_url().'images/rental/'.$ProductsImg->row()->product_image;
                            }
                            else
                            {
                                $img = base_url().'images/rental/dummyProductImage.jpg';
                            }
                        }
                        else
                        {
                            $img = base_url().'images/empty-wishlist.jpg';
                        }
                        if (count ( $productsNotEmy ) > 0)
                        {
                            $product_details = $this->mobile_model->get_product_details_wishlist_one_category ( $productsNotEmy );
                            if(count($product_details)>0)
                            {
                                $product = array();
                                foreach($product_details->result() as $p)
                                {
                                    $wishlist_image  = $this->mobile_model->get_wishlistphoto ( $p->id );
                                    $wish_img = array();
                                    if(count($wishlist_image)>0)
                                    {
                                        foreach($wishlist_image->result() as $product_image)
                                        {
                                            $prd_img  ="";
                                            if($product_image->product_image !=""){
                                                if(strpos($product_image->product_image, 's3.amazonaws.com') > 1)
                                                {
                                                    $prd_img = $product_image->product_image;
                                                }
                                                else
                                                {
                                                    $prd_img = base_url()."images/rental/".$product_image->product_image;
                                                }
                                            }
                                            $wish_img[] = array("property_image"=>$prd_img);
                                        }
                                    }
                                    $condition = array('currency_type'=>$p->currency);
                                    $property_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                                    $property_currency_symbol = $property_currency_details->row()->currency_symbols;
                                    if($userDetails->row()->image !='')
                                    {
                                        $user_img = base_url().'images/users/'.$userDetails->row()->image;
                                    }
                                    else
                                    {
                                        $user_img = base_url().'images/users/user-thumb.png';
                                    }
                                    $select_prd = "select user_id from fc_product where id='".$p->id."'";
                                    $prd_ty = $this->mobile_model->ExecuteQuery($select_prd);
                                    foreach($prd_ty->result() as $RW)
                                    {
                                        $hostId = $RW->user_id;
                                    }
                                    $user_Currency_code = $this->input->post ( 'currency_code' );
                                    $propertyCurrency = $p->currency;
                                    if($user_Currency_code!=$propertyCurrency)
                                    {
                                        $propertyPrice = currency_conversion($propertyCurrency,$user_Currency_code,$p->price);
                                        $propertyCurCod= $user_Currency_code;
                                        $propertyCurSym= $this->db->select('currency_symbols')->where('currency_type',$propertyCurCod)->get(CURRENCY)->row()->currency_symbols;
                                    }
                                    else
                                    {
                                        $propertyPrice = $p->price;
                                        $propertyCurCod= $p->currency;
                                        $propertyCurSym= $property_currency_symbol;
                                    }
                                    $product[] = array("property_id"=>intval($p->id),"property_title"=>
                                        $p->product_title,"property_address"=>$p->address,"room_type"=>$p->room_type,"bedrooms"=>$p->bedrooms,"bathrooms"=>$p->bathrooms,"notes_id"=>intval($p->nid),"notes_desc"=>strip_tags($p->notes),"property_price"=>floatval($propertyPrice),"property_currency_code"=>$propertyCurCod,"property_currency_symbol"=>$propertyCurSym,"host_id"=>intval($hostId),"user_image"=>$user_img,"property_images"=>$wish_img);
                                }
                            }
                        }
                    }
                    /*experiences*/
                    $experience = array();
                    if($wlist->experience_id !='')
                    {
                        $experiences=explode(',', $wlist->experience_id);
                        $experienceNotEmy=array_filter($experiences);
                        $CountProduct1=count($experienceNotEmy);
                        if (count ( $experienceNotEmy ) > 0)
                        {
                            $experience_details = $this->mobile_model->get_experience_details_wishlist_one_category ( $experienceNotEmy );
                            if(count($experience_details)>0)
                            {
                                foreach($experience_details->result() as $p)
                                {
                                    $wishlist_image  = $this->mobile_model->get_wishlist_experience_photo( $p->experience_id );
                                    $wish_imgs = array();
                                    if(count($wishlist_image)>0)
                                    {
                                        foreach($wishlist_image->result() as $product_image)
                                        {
                                            $exp_img  ="";
                                            if($product_image->product_image !="")
                                            {
                                                if(strpos($product_image->product_image, 's3.amazonaws.com') > 1)
                                                {
                                                    $exp_img = $product_image->product_image;
                                                }
                                                else
                                                {
                                                    $exp_img = base_url()."images/experience/".$product_image->product_image;
                                                }
                                            }
                                            $wish_imgs[] = array("experience_image"=>$exp_img);
                                        }
                                    }
                                    $condition = array('currency_type'=>$p->currency);
                                    $experience_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                                    $experience_currency_symbol = $experience_currency_details->row()->currency_symbols;
                                    if($userDetails->row()->image !='')
                                    {
                                        $user_img = base_url().'images/users/'.$userDetails->row()->image;
                                    }
                                    else
                                    {
                                        $user_img = base_url().'images/users/user-thumb.png';
                                    }
                                    $select_exp = "select user_id from fc_experiences where experience_id='".$experience_id."'";
                                    $prd_ty = $this->mobile_model->ExecuteQuery($select_exp);
                                    $experience[] = array("experience_id"=>intval($p->experience_id),"experience_title"=>
                                        $p->experience_title,"experience_address"=>$p->address,"notes_desc"=>strip_tags($p->review_content),"experience_price"=>floatval($p->price),"experience_currency_symbol"=>$experience_currency_symbol,"host_id"=>intval($user_id),"user_image"=>$user_img,"expeience_images"=>$wish_imgs);
                                }
                            }
                        }
                    }
                    else
                    {
                        $experience = array();
                    }
                    $wishlist[] = array("wishlist_id"=>intval($wlist->id),"wishlist_title"=>$wlist->name,"wishlist_image"=>$img,"property_details"=>$product,"experience_details"=>$experience);
                }
                $json_encode = json_encode(array("status"=>1,"message"=>"Successfully Wishlist Retrieved!","wishlist"=>$wishlist));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>1,"message"=>"Not Available!","wishlist"=>$wishlist));
                echo $json_encode;
                exit;
            }
        }
    }
    public function experience_booking_enquiry()
    {
        $exp_id = $this->input->post ('exp_id');
        $user_id = $this->input->post ('user_id');
        $host_id = $this->input->post ('host_id');
        $this->data['date_details'] = $this->mobile_model->get_experience_booking_dates($exp_id);
        $condition = array('currency_type'=>$this->data['date_details']->row()->currency);
        $experience_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
        $exp_currency_symbol = $experience_currency_details->row()->currency_symbols;
        $NoofGuest = '1';
        $Booking_details = array();
        $exp_schedules = array();
        if($this->data['date_details']->num_rows()>0)
        {
            $experience_details = $this->mobile_model->get_exp_details($exp_id);
            $service_tax_query='SELECT promotion_type,commission_percentage FROM '.COMMISSION.' WHERE seo_tag="experience_booking" AND status="Active"';
            $service_tax=$this->mobile_model->ExecuteQuery($service_tax_query);
            if($service_tax->num_rows() == 0)
            {
                $this->data['taxValue'] = '0.00';
            }
            else
            {
                $this->data['commissionType'] = $service_tax->row()->promotion_type;
                $this->data['commissionValue'] = $service_tax->row()->commission_percentage;
                if($service_tax->row()->promotion_type=='flat')
                {
                    $currencyCode    = $this->data['date_details']->row()->currency;
                    $currInto_result = $this->db->where('currency_type',$currencyCode)->get(CURRENCY)->row();
                    $rate = $service_tax->row()->commission_percentage * $currInto_result->currency_rate;
                    $this->data['taxValue'] = $rate;
                }
                else
                {
                    $finalTax = ($service_tax->row()->commission_percentage)/100;
                    $this->data['taxValue'] = $finalTax;
                }
            }
            $serviceFee = $this->data['date_details']->row()->price * $this->data['taxValue'];
            $totalAmt   = $this->data['date_details']->row()->price + $serviceFee + $this->data['date_details']->row()->security_deposit;
            $admin=$this->user_model->get_all_details (ADMIN,array('admin_type'=>'super'));
            $data=$admin->row();
            $admin_currencyCode=trim($data->admin_currencyCode);
            $seller_currencyCode=$this->data['date_details']->row()->currency;
            $user_currencyCode=trim($this->session->userdata('currency_type'));
            $amount=1;
            $currencyPerUnitSeller=1;
            $unitPerCurrencyUser=1;
            $unitPerCurrencySeller=1;
            //storage amount based on seller
            if($admin_currencyCode!=$seller_currencyCode)
            {
                //admin to seller // for admin view
                $currencyPerUnitSeller=convertCurrency($admin_currencyCode,$seller_currencyCode,$amount);
            }
            //seller to admin // for admin view
            if($seller_currencyCode!=$admin_currencyCode)
            {
                $unitPerCurrencySeller=convertCurrency($seller_currencyCode,$admin_currencyCode,$amount);
            }
            //seller to user // for user view
            if($user_currencyCode!=$seller_currencyCode)
            {
                $unitPerCurrencyUser=convertCurrency($user_currencyCode,$seller_currencyCode,$amount);
            }
            $last_cron_id = $this->db->select('*')->from('fc_currency_cron')->order_by('curren_id','desc')->limit(1)->get();
            $dataArr = array (
                'checkin'       =>  date ( 'Y-m-d H:i:s', strtotime ( $this->data['date_details']->row()->from_date ) ),
                'checkout'      =>  date ( 'Y-m-d H:i:s', strtotime ( $this->data['date_details']->row()->to_date   ) ),
                'numofdates'    =>  $this->data['date_details']->row()->date_count,
                'user_id'       =>  $user_id,
                'renter_id'     =>  $this->data['date_details']->row()->user_id,
                'subTotal'      =>  $this->data['date_details']->row()->price,
                'serviceFee'    =>  $serviceFee,
                'totalAmt'      =>  $totalAmt,
                'NoofGuest'     =>  $NoofGuest,
                'prd_id'        =>  $this->data['date_details']->row()->experience_id,
                'date_id'       =>  $this->data['date_details']->row()->id,
                'currencycode'  =>  $this->data['date_details']->row()->currency,
                'secDeposit'    =>  $this->data['date_details']->row()->security_deposit,
                'booking_status'  =>  'Enquiry',
                'user_currencyCode' =>$user_currencyCode,
                'currencyPerUnitSeller' => $currencyPerUnitSeller,
                'unitPerCurrencyUser'=>$unitPerCurrencyUser,
                'exp_cancel_percentage' =>  $this->data['date_details']->row()->cancel_percentage,
                'currency_cron_id'=>$last_cron_id->row()->curren_id
            );
            $this->mobile_model->simple_insert(EXPERIENCE_ENQUIRY,  $dataArr);
            $insertid = $this->db->insert_id();
            //Booking No
            $val = 10*$insertid+8;
            $val = 1500000+$val;
            $bookingno ="XP".$val;
            $newdata = array (
                'Bookingno' => $bookingno
            );
            $condition = array (
                'id' => $insertid
            );
            $this->mobile_model->update_details (EXPERIENCE_ENQUIRY,$newdata,$condition);
            $this->session->set_userdata('experienceEnquiryId',$insertid);
            $exp_image = base_url().'images/experience/'.$experience_details->row()->experience_title;
            $Booking_details[] = array("experience_title"=>$experience_details->row()->experience_title,"exp_image"=>$exp_image,"exp_address"=>$experience_details->row()->address,"from_date"=>date ( 'Y-m-d', strtotime ( $this->data['date_details']->row()->from_date )),"to_date"=>date ( 'Y-m-d', strtotime ( $this->data['date_details']->row()->to_date   ) ),"no_of_guest"=>$NoofGuest,"exp_unit_price"=>$this->data['date_details']->row()->price,"service_fee"=>$serviceFee,"security_deposit"=>$this->data['date_details']->row()->security_deposit,"total"=>$totalAmt,"Booking_no"=>$bookingno,"experience_currency_symbol"=>$exp_currency_symbol,"enquiry_id"=>$insertid);
            /**Experience Timimngs**/
            $exp_schedules = array();
            $this->data['datesList'] = $this->mobile_model->getAvailableDates($exp_id,date('Y-m-d'));
            if($this->data['datesList']->num_rows()>0)
            {
                foreach ($this->data['datesList']->result() as $dates)
                {
                    $dateId = $dates->id;
                    $this->data['datesSchedule'][$dateId] = $this->mobile_model->getDateSchedule($dateId);
                }
                foreach ($this->data['datesSchedule'][$dateId]->result() as $time)
                {
                    $exp_schedules[] = array('exp_title'=>$time->title,'exp_schedule_date'=>date('D,dS Y',strtotime($time->schedule_date)),'exp_start_time'=>date('H:i',strtotime($time->start_time)),'exp_end_time'=>date('H:i',strtotime($time->end_time)));
                }
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Booking Details Retrieved!","Booking_details"=>$Booking_details,"Exp_Schedules"=>$exp_schedules));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Booking Details Retrieved!","Booking_details"=>$Booking_details,"Exp_Schedules"=>$exp_schedules));
            echo $json_encode;
            exit;
        }
    }
    public function experience_booking_confirm()
    {
        $Bookingno = $this->input->post('booking_no');
        $bookingDetails = $this->mobile_model->get_all_details(EXPERIENCE_ENQUIRY, array('Bookingno' => $Bookingno));
        /*print_r($bookingDetails->result()); die();*/
        if($bookingDetails->num_rows() > 0)
        {
            $message = ($this->input->post('message') != '') ? $this->input->post('message') : 'New Booking available on your experience.';
            $dataArr = array('productId' => $bookingDetails->row()->prd_id, 'bookingNo' => $bookingDetails->row()->Bookingno, 'senderId' => $bookingDetails->row()->user_id, 'receiverId' => $bookingDetails->row()->renter_id, 'subject' => 'Booking Request : ' . $bookingDetails->row()->Bookingno, 'message' => $message);
            /*print_r($dataArr); die();*/
            $this->mobile_model->simple_insert(EXPERIENCE_MED_MSG, $dataArr);
            $newdata = array('booking_status' => 'Pending');
            $condition = array('Bookingno' => $Bookingno);
            $this->mobile_model->update_details(EXPERIENCE_ENQUIRY, $newdata, $condition);
            /*print_r($bookingDetails->result()); die();*/
            $this->data['bookingmail'] = $this->mobile_model->getexpbookeduser_detail($bookingDetails->row()->id);
            $pdt_price = $this->data['bookingmail']->row()->subTotal;
            $pdt_price = $this->data['bookingmail']->row()->price;
            $security_deposit = $this->data['bookingmail']->row()->security_deposit;
            /*COMMISSION*/
            $service_tax_query = 'SELECT * FROM ' . COMMISSION . ' WHERE seo_tag="experience_booking" AND status="Active"';
            $service_tax = $this->mobile_model->ExecuteQuery($service_tax_query);
            $serviceFee = ($service_tax->row()->commission_percentage) / 100 * $pdt_price;
            /*EOF COMMISSION */
            $price = $pdt_price+$security_deposit+$serviceFee;
            $checkindate = date('d-M-Y', strtotime($this->data['bookingmail']->row()->checkin));
            $checkoutdate = date('d-M-Y', strtotime($this->data['bookingmail']->row()->checkout));
            $newsid = '49';
            $template_values = $this->user_model->get_newsletter_template_details($newsid);
            if ($template_values ['sender_name'] == '' && $template_values ['sender_email'] == '') {
                $sender_email = $this->config->item('site_contact_mail');
                $sender_name = $this->config->item('email_title');
            } else {
                $sender_name = $template_values ['sender_name'];
                $sender_email = $template_values ['sender_email'];
            }
            $hostuserId = $this->data['bookingmail']->row()->user_id;
            $hostemail = $this->db->select('email')->from('fc_users')->where('id = ', $hostuserId)->get()->row()->email;
            $email_values = array('mail_type' => 'html', 'from_mail_id' => $sender_email, 'mail_name' => $sender_name, 'to_mail_id' => $hostemail, 'subject_message' => $template_values['news_subject'], 'body_messages' => $message);
            $CurrencySymbol = $this->db->select('*')->from('fc_currency')->where('currency_type = ', $this->data['bookingmail']->row()->currency)->get()->row()->currency_symbols;
            $Booking_info = array('logo'=>$this->data['logo'],'travellername' => $this->data['bookingmail']->row()->name, 'checkindate' => $checkindate, 'checkoutdate' => $checkoutdate, 'price' => $this->data['bookingmail']->row()->price, 'totalprice' => $price, 'email_title' => $sender_name, 'currencySymbol' => $CurrencySymbol,'productname'=>$this->data['bookingmail']->row()->productname);
            $message =   $this->load->view('newsletter/ExperienceBookInfo' . $newsid . '.php', $Booking_info, TRUE);
            $this->load->library('email');
            $this->email->from($email_values['from_mail_id'], $sender_name);
            $this->email->to($email_values['to_mail_id']);
            $this->email->subject($email_values['subject_message']);
            $this->email->set_mailtype("html");
            $this->email->message($message);
            try {
                $this->email->send();
            } catch (Exception $e) {
                echo $e->getMessage();
            }
            /* Mail function end */
            /* Traveller(Guest) Mail Function Start */
            $id = $bookingDetails->row()->id;
            $this->data['bookingmail'] = $this->mobile_model->getexpbookeduser_detail($id);
            $price = $this->data['bookingmail']->row()->price;
            $checkindate = date('d-M-Y', strtotime($this->data['bookingmail']->row()->checkin));
            $checkoutdate = date('d-M-Y', strtotime($this->data['bookingmail']->row()->checkout));
            $this->data['hostdetail'] = $this->user_model->get_all_details(USERS, array('id' => $this->data['bookingmail']->row()->renter_id));
            $hostname = $this->data['hostdetail']->row()->user_name;
            $hostemail = $this->data['hostdetail']->row()->email;
            $to = $this->data['bookingmail']->row()->email;
            $price = $this->data['bookingmail']->row()->price;
            $prd_id = $this->data['bookingmail']->row()->prd_id;
            $this->data['productimage'] = $this->mobile_model->getproductimage($prd_id);
            $newsid = '20';
            $template_values = $this->user_model->get_newsletter_template_details($newsid);
            if ($template_values ['sender_name'] == '' && $template_values ['sender_email'] == '') {
                $sender_email = $this->config->item('site_contact_mail');
                $sender_name = $this->config->item('email_title');
            } else {
                $sender_name = $template_values ['sender_name'];
                $sender_email = $template_values ['sender_email'];
            }
            $email_values = array('mail_type' => 'html', 'from_mail_id' => $sender_email, 'mail_name' => $sender_name, 'to_mail_id' => $this->data['bookingmail']->row()->email, 'subject_message' => $template_values ['news_subject'], 'body_messages' => $message);
            $totalAmt = $this->data['bookingmail']->row()->totalAmt;
            $CurrencySymbol = $this->db->select('*')->from('fc_currency')->where('currency_type = ', $this->data['bookingmail']->row()->user_currencycode)->get()->row()->currency_symbols;
            $traveller_info = array('logo'=>$this->data['logo'],'prd_id' => $this->data['bookingmail']->row()->prd_id, 'travellername' => $this->data['bookingmail']->row()->name, 'productname' => $this->data['bookingmail']->row()->productname, 'prd_image' => $this->data['productimage']->row()->product_image, 'checkindate' => $checkindate, 'checkoutdate' => $checkoutdate, 'price' => $this->data['bookingmail']->row()->price, 'totalprice' => $totalAmt, 'email_title' => $sender_name, 'currencySymbol' => $CurrencySymbol,'hostname'=>$hostname);
            $message = $this->load->view('newsletter/TravellerInfo' . $newsid . '.php', $traveller_info, TRUE);
            $this->load->library('email');
            $this->email->from($email_values['from_mail_id'], $sender_name);
            $this->email->to($email_values['to_mail_id']);
            $this->email->subject($email_values['subject_message']);
            $this->email->set_mailtype("html");
            $this->email->message($message);
            try {
                $this->email->send();
            } catch (Exception $e) {
                echo $e->getMessage();
            }
            $dataArr = array('productId' => $bookingDetails->row()->prd_id, 'senderId' => $bookingDetails->row()->renter_id, 'receiverId' => $bookingDetails->row()->user_id, 'bookingNo' => $bookingDetails->row()->Bookingno, 'subject' => 'Booking Request : ' . $bookingDetails->row()->Bookingno, 'message' => 'Accepted', 'point' => '1', 'status' => 'Accept');
            $this->db->insert(EXPERIENCE_MED_MSG, $dataArr);
            $this->db->where('bookingNo', $bookingDetails->row()->Bookingno);
            $this->db->update(EXPERIENCE_MED_MSG, array('status' => 'Accept'));
            $newdata = array('approval' => 'Accept');
            $condition = array('Bookingno' => $bookingDetails->row()->Bookingno);
            $this->mobile_model->update_details(EXPERIENCE_ENQUIRY, $newdata, $condition);
            $bookingDetails = $this->mobile_model->get_all_details(EXPERIENCE_ENQUIRY, $condition);
            $enqId = $bookingDetails->row()->id;
            $json_encode = json_encode(array("status"=>1,"message"=>"Experience Booking confirmed","BookingNo"=>$bookingDetails->row()->Bookingno,"Booking_id"=>$enqId));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Booking Details Retrieved!"));
            echo $json_encode;
            exit;
        }
    }
    public function manage_experience()
    {
        $userId = $this->input->post ('user_id');
        $expid = $this->input->post ('exp_id');
        /* Experience categories */
        $this->data['experience_categories'] = $this->mobile_model->view_experienceType_details();
        /**************/
        /* Languages */
        $languages_known_query='SELECT language_name,language_code FROM '.LANGUAGES_KNOWN;
        $this->data['languages_known']=$this->mobile_model->ExecuteQuery($languages_known_query);
        $known_languages = array();
        if($this->data['languages_known']->num_rows() >0)
        {
            foreach($this->data['languages_known']->result() as $cur_value)
            {
                $known_languages[] = array("language_name"=>$cur_value->language_name,"language_code"=>$cur_value->language_code);
            }
        }
        /*************/
        /* currency */
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyArr = array();
        if($currency_values->num_rows() >0)
        {
            foreach($currency_values->result() as $cur_value)
            {
                $currencyArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }
        /************/
        if($expid!='')
        {
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0,"experience_categories"=>$this->data['experience_categories']->result(),"known_languages"=>$known_languages,"Currency"=>$currencyArr));
            echo $json_encode;
            exit;
        }
    }
    public function view_experience_languages()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        /* Languages */
        $languages_known_query='SELECT language_name,language_code FROM '.LANGUAGES_KNOWN;
        $this->data['languages_known']=$this->mobile_model->ExecuteQuery($languages_known_query);
        $known_languages = array();
        if($this->data['languages_known']->num_rows() >0)
        {
            foreach($this->data['languages_known']->result() as $cur_value)
            {
                $known_languages[] = array("language_name"=>$cur_value->language_name,"language_code"=>$cur_value->language_code);
            }
        }
        /*************/
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"known_languages"=>$known_languages,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0,"known_languages"=>$known_languages));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0,"known_languages"=>$known_languages));
            echo $json_encode;
            exit;
        }
    }
    public function view_exp_organization_details()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_experience_title()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_experience_schedule()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_experience_tagline()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_experience_images()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps =  0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps =  $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_exp_what_we_do()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_where_we_will_be()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_experience_location()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_what_you_provide()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_notes_to_guest()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_about_host()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_guest_requirement()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>""));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>""));
            echo $json_encode;
            exit;
        }
    }
    public function view_group_size()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_experience_price()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        /* currency */
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyArr = array();
        if($currency_values->num_rows() >0)
        {
            foreach($currency_values->result() as $cur_value)
            {
                $currencyArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }
        /************/
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","Currency_types"=>$currencyArr,"experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","Currency_types"=>$currencyArr,"experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function view_exp_cancellation_policy()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        if($expid!='')
        {
            $condition=array('experience_id'=>$expid);
            $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
            $data=$all_details->row();
            $completed_steps = 0;
            $step_1=array('step_completed'=>'false');
            $step_2=array('step_completed'=>'false');
            $step_3=array('step_completed'=>'false');
            $step_4=array('step_completed'=>'false');
            $step_5=array('step_completed'=>'false');
            $step_6=array('step_completed'=>'false');
            $step_7=array('step_completed'=>'false');
            $step_8=array('step_completed'=>'false');
            $step_9=array('step_completed'=>'false');
            $step_10=array('step_completed'=>'false');
            $step_11=array('step_completed'=>'false');
            $step_12=array('step_completed'=>'false');
            $step_13=array('step_completed'=>'false');
            $step_14=array('step_completed'=>'false');
            $step_15=array('step_completed'=>'false');
            $step_16=array('step_completed'=>'false');
            $step_17=array('step_completed'=>'false');
            if(!empty($data))
            {
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $step_1=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->language_list!='')
                {
                    $step_2=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $step_3=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_title!='')
                {
                    $step_4=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $step_5=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->exp_tagline!='')
                {
                    $step_6=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $step_7=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->experience_description!='')
                {
                    $step_8=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->location_description!='')
                {
                    $step_9=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
                if($loc_data->num_rows()>0)
                {
                    $step_10=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->kit_content!='')
                {
                    $step_11=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->note_to_guest!='')
                {
                    $step_12=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->about_host!='')
                {
                    $step_13=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->guest_requirement!='')
                {
                    $step_14=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->group_size!='')
                {
                    $step_15=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->price>0)
                {
                    $step_16=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                if($data->cancel_policy!='')
                {
                    $step_17=array('step_completed'=>'true');
                    $completed_steps = $completed_steps + 1;
                }
                $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
                foreach ($this->data['Exp_Detail']->result() as $value)
                {
                    $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                    $langlist = explode(',', $value->language_list);
                    $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                    $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                    $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                    $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                    $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                    $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$value->city,"state"=>$value->state,"country"=>$value->country,"zip"=>$value->zip,"address"=>$value->address);
                    $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                    $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                    $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                    $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                    $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                    $step17 = array("cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
                }
                /* Basic */
                $step1 = array_merge($step_1, $step1);
                /*********/
                /* Language */
                $knwn_languages = array();
                $this->db->select('language_code,language_name');
                $this->db->from(LANGUAGES_KNOWN);
                $this->db->where_in('language_code', $langlist);
                $languages = $this->db->get();
                foreach ($languages->result() as $lngs)
                {
                    $knwn_languages[] = array("language_code" => $lngs->language_code,"language_name" => $lngs->language_name);
                }
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$knwn_languages);
                $step2 = array_merge($step_2, $step2);
                /***********/
                /* Organization */
                $step3 = array_merge($step_3, $step3);
                /****************/
                /* Experience Title */
                $step4 = array_merge($step_4, $step4);
                /**********/
                /* Timing */
                $date_time_details=$this->mobile_model->get_date_time_details($expid);
                $step5 = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $step5 = array_merge($step_5, $step5);
                /**********/
                /* Tag Line */
                $step6 = array_merge($step_6, $step6);
                /************/
                /* Photos */
                $img_details = array();
                $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
                foreach ($this->data['imgDetail']->result() as $imgnm)
                {
                    $img_details[] = array("product_image" => $imgnm->product_image);
                }
                $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
                $step7 = array_merge($step_7, $step7);
                /**********/
                /* What you will do */
                $step8 = array_merge($step_8, $step8);
                /***********/
                /* Where you will be */
                $step9 = array_merge($step_9, $step9);
                /***********/
                /* Where we will meet */
                $step10 = array_merge($step_10, $step10);
                /***********/
                /* What you will provide */
                $kit_details = array();
                $condition = array('experience_id'=>$expid);
                $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($this->data['guide_provides']->result() as $items)
                {
                    $kit = array("kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                    array_push($kit_details,$kit);
                }
                $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
                $step11 = array_merge($step_11, $step11);
                /***********/
                /* Notes */
                $step12 = array_merge($step_12, $step12);
                /*********/
                /* About You*/
                $step13 = array_merge($step_13, $step13);
                /************/
                /* Guest Reqirement */
                $step14 = array_merge($step_14, $step14);
                /*************/
                /* Group size */
                $step15 = array_merge($step_15, $step15);
                /*************/
                /* Price */
                $step16 = array_merge($step_16, $step16);
                /**********/
                /* Cancellation Policy */
                $step17 = array_merge($step_17, $step17);
                /***********/
                $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
                $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"result"=>$result_arr));
                echo $json_encode;
                exit;
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function show_experience_details($userId,$expid)
    {
        $date_details = array();
        $schedule = array("schedules"=> $date_details);
        /* Experience categories */
        $this->data['experience_categories'] = $this->mobile_model->view_experienceType_details();
        /**************/
        /* Languages */
        $languages_known_query='SELECT language_name,language_code FROM '.LANGUAGES_KNOWN;
        $this->data['languages_known']=$this->mobile_model->ExecuteQuery($languages_known_query);
        $known_languages = array();
        if($this->data['languages_known']->num_rows() >0)
        {
            foreach($this->data['languages_known']->result() as $cur_value)
            {
                $known_languages[] = array("language_name"=>$cur_value->language_name,"language_code"=>$cur_value->language_code);
            }
        }
        /*************/
        /* currency */
        $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
        $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
        $currencyArr = array();
        if($currency_values->num_rows() >0)
        {
            foreach($currency_values->result() as $cur_value)
            {
                $currencyArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
            }
        }
        /************/
        $condition=array('experience_id'=>$expid);
        $all_details= $this->mobile_model->get_all_details(EXPERIENCE,$condition);
        $data=$all_details->row();
        $completed_steps = 0;
        $step_1=array('step_completed'=>'false');
        $step_2=array('step_completed'=>'false');
        $step_3=array('step_completed'=>'false');
        $step_4=array('step_completed'=>'false');
        $step_5=array('step_completed'=>'false');
        $step_6=array('step_completed'=>'false');
        $step_7=array('step_completed'=>'false');
        $step_8=array('step_completed'=>'false');
        $step_9=array('step_completed'=>'false');
        $step_10=array('step_completed'=>'false');
        $step_11=array('step_completed'=>'false');
        $step_12=array('step_completed'=>'false');
        $step_13=array('step_completed'=>'false');
        $step_14=array('step_completed'=>'false');
        $step_15=array('step_completed'=>'false');
        $step_16=array('step_completed'=>'false');
        $step_17=array('step_completed'=>'false');
        if(!empty($data))
        {
            if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
            {
                $step_1=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->language_list!='')
            {
                $step_2=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->organization!='' && $data->organization_des!='')
            {
                $step_3=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->experience_title!='')
            {
                $step_4=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$expid);
            $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$expid);
            if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
            {
                $step_5=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->exp_tagline!='')
            {
                $step_6=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$expid.' and product_image !=""');
            if($dat_img->num_rows()>0)
            {
                $step_7=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->experience_description!='')
            {
                $step_8=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->location_description!='')
            {
                $step_9=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$expid);
            if($loc_data->num_rows()>0)
            {
                $step_10=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->kit_content!='')
            {
                $step_11=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->note_to_guest!='')
            {
                $step_12=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->about_host!='')
            {
                $step_13=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->guest_requirement!='')
            {
                $step_14=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->group_size!='')
            {
                $step_15=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->price>0)
            {
                $step_16=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            if($data->cancel_policy!='')
            {
                $step_17=array('step_completed'=>'true');
                $completed_steps = $completed_steps + 1;
            }
            $this->data['Exp_Detail'] = $this->mobile_model->view_experience_details("where p.experience_id=$expid and p.user_id=$userId");
            foreach ($this->data['Exp_Detail']->result() as $value)
            {
                $step1 = array("exp_id"=>$expid,"exp_type"=>$value->exp_type,"exp_category"=>$value->type_id,"date_count"=>intval($value->date_count),"total_hours"=>intval($value->total_hours));
                $step2 = array("exp_id"=>$expid,"selected_languages"=>$value->language_list);
                $step3 = array("exp_id"=>$expid,"organization"=>$value->organization,"organization_des"=>$value->organization_des);
                $step4 = array("exp_id"=>$expid,"experience_title"=>$value->experience_title);
                if($value->total_hours == " "){ $total_hours = 0; }else{ $total_hours = $value->total_hours; }
                $step5 = array("exp_id"=>$expid, "exp_type"=>$value->exp_type,"date_count"=>intval($value->date_count),"total_hours"=>intval($total_hours));
                $step6 = array("exp_id"=>$expid,"exp_tagline"=>$value->exp_tagline);
                $step8 = array("exp_id"=>$expid,"experience_description"=>$value->experience_description);
                $step9 = array("exp_id"=>$expid,"location_description"=>$value->location_description);
                $city = $value->city;
                $state = $value->state;
                $country = $value->country;
                $zip = $value->zip;
                $address = $value->address;
                if(empty($city)){ $city = ""; }
                if(empty($state)){ $state = ""; }
                if(empty($country)){ $country = ""; }
                if(empty($zip)){ $zip = ""; }
                if(empty($address)){ $address = ""; }
                $step10 = array("exp_id"=>$expid,"latitude"=>floatval($value->latitude),"longitude"=>floatval($value->longitude),"city"=>$city,"state"=>$state,"country"=>$country,"zip"=>$zip,"address"=>$address);
                $step12 = array("exp_id"=>$expid,"note_to_guest"=>$value->note_to_guest);
                $step13 = array("exp_id"=>$expid,"about_host"=>$value->about_host);
                $step14 = array("exp_id"=>$expid,"guest_requirement"=>$value->guest_requirement);
                $step15 = array("exp_id"=>$expid,"group_size"=>$value->group_size);
                $step16 = array("exp_id"=>$expid,"price"=>floatval($value->price),"currency_code"=>$value->currency);
                $step17 = array("exp_id"=>$expid,"cancel_policy"=>$value->cancel_policy,"cancel_percentage"=>$value->cancel_percentage,"cancel_policy_description"=>$value->cancel_policy_des,"security_deposit"=>$value->security_deposit,"currency_code"=>$value->currency,"meta_title"=>$value->meta_title,"meta_keyword"=>$value->meta_keyword,"meta_description"=>$value->meta_description);
            }
            /* Basic */
            $step1 = array_merge($step_1, $step1);
            /*********/
            /* Language */
            $step2 = array_merge($step_2, $step2);
            /***********/
            /* Organization */
            $step3 = array_merge($step_3, $step3);
            /****************/
            /* Experience Title */
            $step4 = array_merge($step_4, $step4);
            /**********/
            /* Timing */
            $date_details = array();
            $date_time_details=$this->mobile_model->get_date_time_details($expid);
            $d = $date_time_details->row();
            if($d->total_hours == " "){ $total_hrs = 0; }else{ $total_hrs = $d->total_hours; }
            foreach ($date_time_details->result() as $dat)
            {
                $remaining_count = $dat->date_count - $dat->time_count;
                if($dat->status == 0){ $status = true; }else{ $status = false; }
                $date_details[] = array("date_id" => $dat->date_id,"from_date" => $dat->from_date,"to_date" => $dat->to_date,"date_status" => $status,"total_days" => intval($dat->date_count),"remaining_days" => intval($remaining_count),"total_hours" => intval($total_hours),"visibility_count" => intval($dat->time_count));
                $schedule = array("schedules"=> $date_details);
            }
            $step5 = array_merge($step_5, $step5, $schedule);
            /**********/
            /* Tag Line */
            $step6 = array_merge($step_6, $step6);
            /************/
            /* Photos */
            $img_details = array();
            $this->data['imgDetail'] = $this->mobile_model->get_images($expid);
            foreach ($this->data['imgDetail']->result() as $imgnm)
            {
                $img_details[] = array("image_id"=>$imgnm->id,"product_image" => base_url().'images/experience/'.$imgnm->product_image);
            }
            $step7 = array("exp_id"=>$expid, "exp_images"=> $img_details);
            $step7 = array_merge($step_7, $step7);
            /**********/
            /* What you will do */
            $step8 = array_merge($step_8, $step8);
            /***********/
            /* Where you will be */
            $step9 = array_merge($step_9, $step9);
            /***********/
            /* Where we will meet */
            $step10 = array_merge($step_10, $step10);
            /***********/
            /* What you will provide */
            $kit_details = array();
            $condition = array('experience_id'=>$expid);
            $this->data['guide_provides'] = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
            foreach ($this->data['guide_provides']->result() as $items)
            {
                $kit = array("kit_id" => $items->id,"kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
                array_push($kit_details,$kit);
            }
            $step11 = array("exp_id"=>$expid, "kit_details"=>$kit_details);
            $step11 = array_merge($step_11, $step11);
            /***********/
            /* Notes */
            $step12 = array_merge($step_12, $step12);
            /*********/
            /* About You*/
            $step13 = array_merge($step_13, $step13);
            /************/
            /* Guest Reqirement */
            $step14 = array_merge($step_14, $step14);
            /*************/
            /* Group size */
            $step15 = array_merge($step_15, $step15);
            /*************/
            /* Price */
            $step16 = array_merge($step_16, $step16);
            /**********/
            /* Cancellation Policy */
            $step17 = array_merge($step_17, $step17);
            /***********/
            $result_arr[] = array("Basics"=>$step1,"Languages"=>$step2,"Organization"=>$step3,"Experience_Title"=>$step4,"Timing"=>$step5,"Tagline"=>$step6,"Photos"=>$step7,"What_you_will_do"=>$step8,"where_you_will_be"=>$step9,"where_we_will_meet"=>$step10,"what_you_will_provide"=>$step11,"notes"=>$step12,"about_you"=>$step13,"guest_reqirement"=>$step14,"group_size"=>$step15,"price"=>$step16,"cancellation_policy"=>$step17);
            $json_encode = json_encode(array("status"=>1,"message"=>"Experience Details Retrieved!","experience_id"=>$expid,"completed_steps"=>$completed_steps,"experience_categories"=>$this->data['experience_categories']->result(),"known_languages"=>$known_languages,"Currency"=>$currencyArr,"result"=>$result_arr));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0,"experience_categories"=>$this->data['experience_categories']->result(),"known_languages"=>$known_languages,"Currency"=>$currencyArr));
            echo $json_encode;
            exit;
        }
    }
    public function add_new_experience()
    {
        $dat_count        = $this->input->post('total_count_date');
        $time_count       = $this->input->post('total_count_time');
        $experience_type  = $this->input->post('experience_type');
        $type_id          = $this->input->post('category_id');
        $userId           = $this->input->post('user_id');
        $expid            = $this->input->post ('exp_id');
        if($userId=='')
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Please sign in before listing your experience!"));
            echo $json_encode;
            exit;
        }
        else
        {
            if($expid != "")
            {
                $this->show_experience_details($userId,$expid);
                exit();
            }
            else
            {
                $condition = array('id'=>$userId,'status'=>'Active');
                $this->data['checkUser'] = $this->mobile_model->get_all_details(USERS,$condition);
                if($this->data['checkUser']->num_rows() == 1)
                {
                    // 1 immersion  2 exp
                    if($experience_type=='2'){
                        $date_count=1;
                        $total_hours=$time_count;
                    }else{
                        $date_count=$dat_count;
                        $total_hours='';
                    }
                    $data = array(
                        'type_id'     =>  $type_id,
                        'exp_type'          =>  $experience_type,
                        'date_count'    =>  $date_count,
                        'total_hours'   =>  $total_hours,
                        'user_id'     =>  $userId,
                        'status'      =>  '0'
                    );
                    $this->mobile_model->simple_insert(EXPERIENCE,$data);
                    $expid=$this->mobile_model->get_last_insert_id();
                    $this->mobile_model->update_details(USERS,array('is_experienced'=>'1','group'=>'Seller'),array('id'=>$userId));
                    $this->data['experience_categories'] = $this->mobile_model->view_experienceType_details();
                    /* Languages */
                    $languages_known_query='SELECT language_name,language_code FROM '.LANGUAGES_KNOWN;
                    $this->data['languages_known']=$this->mobile_model->ExecuteQuery($languages_known_query);
                    $known_languages = array();
                    if($this->data['languages_known']->num_rows() >0)
                    {
                        foreach($this->data['languages_known']->result() as $cur_value)
                        {
                            $known_languages[] = array("language_name"=>$cur_value->language_name,"language_code"=>$cur_value->language_code);
                        }
                    }
                    /*************/
                    /* currency */
                    $select_qry = "select id,currency_symbols,currency_type,currency_rate from fc_currency where status='Active' and currency_symbols !='' and currency_type !=''";
                    $currency_values = $this->mobile_model->ExecuteQuery($select_qry);
                    $currencyArr = array();
                    if($currency_values->num_rows() >0)
                    {
                        foreach($currency_values->result() as $cur_value)
                        {
                            $currencyArr[] = array("id" =>$cur_value->id,"country_symbols"=>$cur_value->currency_symbols,"currency_type"=>$cur_value->currency_type);
                        }
                    }
                    /************/
                    if($expid!='')
                    {
                        $this->show_experience_details($userId,$expid);
                        exit();
                    }
                    else
                    {
                        $json_encode = json_encode(array("status"=>0,"message"=>"No Details Retrieved!","experience_id"=>"","completed_steps"=>0,"experience_categories"=>$this->data['experience_categories']->result(),"known_languages"=>$known_languages,"Currency"=>$currencyArr));
                        echo $json_encode;
                        exit;
                    }
                }
                else
                {
                    $json_encode = json_encode(array("status"=>0,"message"=>"Please sign in before listing your experience!"));
                    echo $json_encode;
                    exit;
                }
            }
        }
    }
    public function add_experience_language()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        $inputArr['language_list'] = $this->input->post('languages_known');
        if($expid!='' && $inputArr['language_list']!=="")
        {
            $condition = array('experience_id'=>$expid);
            $this->mobile_model->update_details(EXPERIENCE,array('language_list'=>$inputArr['language_list']),$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Parameters missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_organization_dtls()
    {
        $userId   = $this->input->post ('user_id');
        $expid    = $this->input->post ('exp_id');
        $organization=$this->input->post('organization');
        $organization_des=$this->input->post('organization_des');
        if($expid !='' && $organization !='' && $organization_des !='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array(
                'organization'=>$organization,
                'organization_des'=>$organization_des
            );
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_experience_title()
    {
        $userId         = $this->input->post ('user_id');
        $expid          = $this->input->post ('exp_id');
        $experience_title = $this->input->post('experience_title');
        if($expid!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array('experience_title'=>$experience_title);
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_experience_schedule()
    {
        $frm_date   = $this->input->post('from_date');
        $from_date  = date("Y-m-d", strtotime($frm_date));
        $to_dt      = $this->input->post('to_date');
        $to_date    = date("Y-m-d", strtotime($to_dt));
        $expid      = $this->input->post('exp_id');
        $userId     = $this->input->post ('user_id');
        $price      = 0.00;
        $currency   = $this->input->post('currency');
        if($expid!='')
        {
            $experience_details = $this->mobile_model->get_all_details(EXPERIENCE,array('experience_id' => $expid));
            if($experience_details->num_rows()>0)
            {
                $price    = $experience_details->row()->price;
                $currency   = $experience_details->row()->currency;
            }
            $checkDatesExist = $this->mobile_model->ExecuteQuery("select id from ".EXPERIENCE_DATES." where  ((from_date BETWEEN '".$from_date."' and '".$to_date."') or (to_date BETWEEN '".$from_date."' and '".$to_date."')) and experience_id='".$expid."'");
            if($checkDatesExist->num_rows() > 0)
            {
                $date_time_details = $this->mobile_model->get_date_time_details($expid);
                $schedule_details = array("exp_id"=>$expid, "schedules"=> $date_time_details->result());
                $json_encode = json_encode(array("status"=>0,"message"=>"Schedule already exist!","schedule_details"=>$schedule_details));
                echo $json_encode;
                exit;
            }
            else
            {
                $dataArr = array(
                    'experience_id' => $expid,
                    'from_date'     => $from_date,
                    'to_date'       => $to_date,
                    'price'         => $price,
                    'currency'      => $currency,
                    'created_at'    => date('Y-m-d H:i:s'),
                    'status'        => '0'
                );
                $this->db->insert(EXPERIENCE_DATES,$dataArr);
                $this->show_experience_details($userId,$expid);
                exit();
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>""));
            echo $json_encode;
            exit;
        }
    }
    public function delete_experience_schedule()
    {
        $id=$this->input->post('date_id');
        $expid=$this->input->post('exp_id');
        $userId = $this->input->post ('user_id');
        if($id != "" && $expid != "")
        {
            $this->db->where('id', $id);
            $this->db->delete(EXPERIENCE_DATES);
            $this->db->where('exp_dates_id', $id);
            $this->db->delete(EXPERIENCE_TIMING);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"parameter missing!"));
            echo $json_encode;
            exit;
        }
    }
    public function add_experience_timesheet()
    {
        $start_time     = $this->input->post('start_time');
        $schedule_date  = date("Y-m-d", strtotime($this->input->post('schedule_date')) );
        $end_time       = $this->input->post('end_time');
        $title          = $this->input->post('title');
        $description    = $this->input->post('description');
        $expid          = $this->input->post('exp_id');
        $exp_dates_id   = $this->input->post('date_id');
        $selected_times = array();
        $selected_times = $this->mobile_model->get_time_sheet($expid,$exp_dates_id);
        if($expid!='')
        {
            $datArr=array('experience_id'=>$expid,'start_time'=>$start_time,'end_time'=>$end_time,'schedule_date'=>$schedule_date,'title'=>$title,'description'=>$description,'exp_dates_id'=>$exp_dates_id);
            $res=$this->db->insert(EXPERIENCE_TIMING,$datArr);
            $condition=array('exp_dates_id'=>$exp_dates_id);
            $res_data=$this->mobile_model->get_all_details(EXPERIENCE_TIMING,$condition);
            $data=$res_data->result();
            $timesheet = array();
            $date_time_details=$this->mobile_model->get_time_count_details($expid,$exp_dates_id);
            $d = $date_time_details->row();
            if($d->total_hours == " "){ $total_hrs = 0; }else{ $total_hrs = $d->total_hours; }
            $remaining_count = $d->date_count - $d->time_count;
            foreach($data as $time)
            {
                if($time->status == 1){ $status = true; }else{ $status = false; }
                $timesheet[]=array("date_id"=>$exp_dates_id,"time_id"=>$time->id,"schedule_date"=>$time->schedule_date,"start_time"=>date('h:i A',strtotime($time->start_time)),"end_time"=>date('h:i A',strtotime($time->end_time)),"title"=>$time->title,"time_status"=>$status);
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Timing Successfully added","date_id"=>$exp_dates_id,"from_date"=>$d->from_date,"to_date"=>$d->to_date,"total_days" => intval($d->date_count),"total_days" => intval($d->date_count),"remaining_days" => intval($remaining_count),"total_hours" => intval($total_hours),"Time_details"=>$timesheet,"selected_times"=>$selected_times->result()));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>""));
            echo $json_encode;
            exit;
        }
    }
    public function view_experience_timesheet()
    {
        $exp_dates_id=$this->input->post('date_id');
        $expid          = $this->input->post('exp_id');
        $condition=array('exp_dates_id'=>$exp_dates_id);
        $res_data=$this->mobile_model->get_all_details(EXPERIENCE_TIMING,$condition);
        $data=$res_data->result();
        $timesheet = array();
        $selected_times = array();
        $date_time_details=$this->mobile_model->get_time_count_details($expid,$exp_dates_id);
        $selected_times = $this->mobile_model->get_time_sheet($expid,$exp_dates_id);
        $d = $date_time_details->row();
        if($d->total_hours == ""){ $total_hrs = 0; }else{ $total_hrs = $d->total_hours; }
        $remaining_count = $d->date_count - $d->time_count;
        if(count($data)>0)
        {
            foreach($data as $time)
            {
                if($time->status == 1){ $status = true; }else{ $status = false; }
                $timesheet[]=array("date_id"=>$exp_dates_id,"time_id"=>$time->id,"schedule_date"=>$time->schedule_date,"start_time"=>date('h:i A',strtotime($time->start_time)),"end_time"=>date('h:i A',strtotime($time->end_time)),"title"=>$time->title,"time_status"=>$status);
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Time details retrieved!","date_id"=>$exp_dates_id,"from_date"=>$d->from_date,"to_date"=>$d->to_date,"total_days" => intval($d->date_count),"remaining_days" => intval($remaining_count),"total_hours" => intval($total_hrs),"Time_details"=>$timesheet,"selected_times"=>$selected_times->result()));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>1,"message"=>"No schedule found","date_id"=>$exp_dates_id,"from_date"=>$d->from_date,"to_date"=>$d->to_date,"total_days" => intval($d->date_count),"remaining_days" => intval($remaining_count),"total_hours" => intval($total_hrs),"Time_details"=>$timesheet,"selected_times"=>$selected_times->result()));
            echo $json_encode;
            exit;
        }
    }
    public function edit_experience_timesheet()
    {
        $id=$this->input->post('time_id');
        $condition=array('id'=>$id);
        $res_data=$this->mobile_model->get_all_details(EXPERIENCE_TIMING,$condition);
        $data=$res_data->row();
        $dtls = $res_data->result();
        $expid = $data->experience_id;
        $exp_dates_id = $data->exp_dates_id;
        $date_time_details=$this->mobile_model->get_time_count_details($expid,$exp_dates_id);
        $d = $date_time_details->row();
        if($d->total_hours == ""){ $total_hrs = 0; }else{ $total_hrs = $d->total_hours; }
        $remaining_count = $d->date_count - $d->time_count;
        $timesheet = array();
        if(count($data)>0)
        {
            foreach($dtls as $time)
            {
                $timesheet[]=array("time_id"=>$time->id,"date_id"=>$time->exp_dates_id,"schedule_date"=>$time->schedule_date,"start_time"=>$time->start_time,"end_time"=>$time->end_time,"title"=>$time->title,"description"=>$time->description);
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Time details retrieved!","total_days" => intval($d->date_count),"remaining_days" => intval($remaining_count),"total_hours" => intval($total_hrs),"Time_details"=>$timesheet));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No schedule found..!","total_days" => intval($d->date_count),"remaining_days" => intval($remaining_count),"total_hours" => intval($total_hrs),"Time_details"=>$timesheet));
            echo $json_encode;
            exit;
        }
    }
    public function update_experience_timesheet()
    {
        $start_time=$this->input->post('start_time');
        $end_time=$this->input->post('end_time');
        $title=$this->input->post('title');
        $description=$this->input->post('description');
        $id=$this->input->post('time_id');
        $schedule_date=date("Y-m-d", strtotime($this->input->post('schedule_date')));
        $experience_id=$this->input->post('exp_id');
        $timesheet = array();
        $disp_timesheet = array();
        if($start_time == '' ||  $end_time == '' || $title == '' || $description == '' || $schedule_date == '' || $id == '' || $experience_id == '')
        {
            $timesheet = array();
            $json_encode = json_encode(array("status"=>0,"message"=>"Parameter missing!","Time_details"=>$timesheet));
            echo $json_encode;
            exit;
        }
        else
        {
            $condn  = array('id' =>  $id);
            $dataArr=array('status'=>'1','start_time'=>$start_time,'end_time'=>$end_time,'title'=>$title,'description'=>$description,'schedule_date'=>$schedule_date);
            $res=$this->mobile_model->update_details(EXPERIENCE_TIMING,$dataArr,$condn);
            $json_encode = json_encode(array("status"=>1,"message"=>"Time Status Changed"));
            echo $json_encode;
            exit;
        }
    }
    public function delete_experience_timesheet()
    {
        $id=$this->input->post('time_id');
        $experience_id=$this->input->post('exp_id');
        $disp_timesheet = array();
        $condn  = array('id' =>  $id);
        $res_data=$this->mobile_model->get_all_details(EXPERIENCE_TIMING,$condn);
        $info=$res_data->row();
        $timesheet = array();
        $selected_times = array();
        if(isset($info))
        {
            $exp_dates_id = $info->exp_dates_id;
            $this->db->where('id', $id);
            $this->db->delete(EXPERIENCE_TIMING);
            $condn  = array('exp_dates_id'=>$exp_dates_id);
            $rest_data=$this->mobile_model->get_all_details(EXPERIENCE_TIMING,$condn);
            $data=$rest_data->result();
            $date_time_details=$this->mobile_model->get_time_count_details($experience_id,$exp_dates_id);
            $selected_times = $this->mobile_model->get_time_sheet($experience_id,$exp_dates_id);
            $d = $date_time_details->row();
            if($d->total_hours == " "){ $total_hrs = 0; }else{ $total_hrs = $d->total_hours; }
            $remaining_count = $d->date_count - $d->time_count;
            foreach($data as $time)
            {
                if($time->status == 1){ $status = true; }else{ $status = false; }
                $timesheet[]=array("date_id"=>$exp_dates_id,"time_id"=>$time->id,"schedule_date"=>$time->schedule_date,"start_time"=>date('h:i A',strtotime($time->start_time)),"end_time"=>date('h:i A',strtotime($time->end_time)),"title"=>$time->title,"time_status"=>$status);
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Experience timing deleted!","date_id"=>$exp_dates_id,"from_date"=>$d->from_date,"to_date"=>$d->to_date,"total_days" => intval($d->date_count),"remaining_days" => intval($remaining_count),"total_hours" => intval($total_hours),"Time_details"=>$timesheet,"selected_times"=>$selected_times->result()));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Time details retrieved!","Time_details"=>$timesheet,"selected_times"=>$selected_times));
            echo $json_encode;
            exit;
        }
    }
    public function change_exp_timesheet_status()
    {
        $id=$this->input->post('time_id');
        $status=$this->input->post('status');
        $experience_id=$this->input->post('exp_id');
        $condn    = array('id' =>  $id);
        $res_data = $this->mobile_model->get_all_details(EXPERIENCE_TIMING,$condn);
        $info=$res_data->row();
        $selected_times = array();
        if(isset($info))
        {
            $data = array('status'=>$status);
            $res=$this->mobile_model->update_details(EXPERIENCE_TIMING,$data,$condn);
            $exp_dates_id = $info->exp_dates_id;
            $selected_times = $this->mobile_model->get_time_sheet($experience_id,$exp_dates_id);
            $date_time_details=$this->mobile_model->get_time_count_details($experience_id,$exp_dates_id);
            $d = $date_time_details->row();
            if($d->total_hours == " "){ $total_hrs = 0; }else{ $total_hrs = $d->total_hours; }
            $remaining_count = $d->date_count - $d->time_count;
            $condition=array('exp_dates_id'=>$exp_dates_id);
            $res_data=$this->mobile_model->get_all_details(EXPERIENCE_TIMING,$condition);
            foreach($res_data->result() as $time)
            {
                if($time->status == 1){ $status = true; }else{ $status = false; }
                $timesheet[]=array("date_id"=>$exp_dates_id,"time_id"=>$time->id,"schedule_date"=>$time->schedule_date,"start_time"=>date('h:i A',strtotime($time->start_time)),"end_time"=>date('h:i A',strtotime($time->end_time)),"title"=>$time->title,"time_status"=>$status);
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Schedule status updated!","date_id"=>$exp_dates_id,"from_date"=>$d->from_date,"to_date"=>$d->to_date,"total_days" => intval($d->date_count),"remaining_days" => intval($remaining_count),"total_hours" => intval($total_hours),"Time_details"=>$timesheet,"selected_times"=>$selected_times->result()));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Time details retrieved!","selected_times"=>$selected_times));
            echo $json_encode;
            exit;
        }
    }
    public function change_exp_date_status()
    {
        $id=$this->input->post('date_id');
        $status=$this->input->post('status');
        $expid=$this->input->post('exp_id');
        $userId = $this->input->post ('user_id');
        $disp_timesheet = array();
        $condn    = array('id' =>  $id);
        $res_data = $this->mobile_model->get_all_details(EXPERIENCE_DATES,$condn);
        $data     = $res_data->result();
        if(count($data)>0)
        {
            $data = array('status'=>$status);
            $res=$this->mobile_model->update_details(EXPERIENCE_DATES,$data,$condn);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"No Time details retrieved!","Time_details"=>$disp_timesheet));
            echo $json_encode;
            exit;
        }
    }
    public function add_experience_tagline()
    {
        $expid       = $this->input->post('exp_id');
        $userId      = $this->input->post ('user_id');
        $exp_tagline = $this->input->post('exp_tagline');
        if($expid!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array('exp_tagline'=>$exp_tagline);
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_experience_photos()
    {
        $expid      = $this->input->post('exp_id');
        $userId     = $this->input->post('user_id');
        if($_POST['photos'] != '')
        {
            $arr_image = explode(',',$_POST['photos']);
            if (!empty($arr_image))
            {
                $i=0;
                foreach($arr_image as $img)
                {
                    $image_name= time().$i.".jpg";
                    $ifp = fopen("images/experience/".$image_name, "wb" );
                    fwrite( $ifp, base64_decode( $img ) );
                    fclose( $ifp );
                    $this->db->query("INSERT INTO fc_experience_photos(product_image,product_id) VALUES ('$image_name','$expid')");
                    $i++;
                }
                $this->show_experience_details($userId,$expid);
                exit();
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"Parameter missing!"));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            echo $json_encode;
            exit;
        }
    }
    public function delete_experience_photos()
    {
        $phtid   = $this->input->post('image_id');
        $expid   = $this->input->post('exp_id');
        $userId  = $this->input->post ('user_id');
        $date_details = array();
        $schedule = array("schedules"=> $date_details);
        if($phtid != "")
        {
            $condition =array('id'=>$phtid);
            $photo_details = $this->db->select('*')->from(EXPERIENCE_PHOTOS)->where('id',$phtid)->get();
            foreach($photo_details->result() as $image_name)
            {
                $gambar= $image_name->product_image;
                unlink("images/experience/".$gambar);
                unlink("images/experience/mobile/".$gambar);
                unlink("images/experience/small/".$gambar);
                unlink("images/experience/resize/".$gambar);
            }
            $this->mobile_model->commonDelete(EXPERIENCE_PHOTOS,array('id' => $phtid));
            if($expid!='')
            {
                $this->show_experience_details($userId,$expid);
                exit();
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            echo $json_encode;
            exit;
        }
    }
    public function add_what_you_will_do()
    {
        $expid       = $this->input->post('exp_id');
        $userId      = $this->input->post ('user_id');
        $what_we_do  = $this->input->post('what_we_do');
        if($expid!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array('experience_description'=>$what_we_do);
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_where_you_will_be()
    {
        $expid                = $this->input->post('exp_id');
        $userId               = $this->input->post ('user_id');
        $location_description = $this->input->post('location_description');
        if($expid!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array('location_description'=>$location_description);
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_location_details()
    {
        $expid      = $this->input->post ('exp_id');
        $userId     = $this->input->post ('user_id');
        $product_id = array('experience_id'=>$expid);
        if($expid!='')
        {
            $dataArr = array('address'=>$this->input->post('address_location'),
                'country'=>$this->input->post('country'),
                'state'=>$this->input->post('state'),
                'city'=>$this->input->post('city'),
                'street'=>$this->input->post('address_location'),
                'zip'=>$this->input->post('post_code'),
                'lat'=> $this->input->post('latitude'),
                'lang'=> $this->input->post('longitude')
            );
            $data = array_merge($dataArr,$product_id);
            $this->data['productDetail'] = $this->mobile_model->get_all_details(EXPERIENCE_ADDR,array('experience_id'=>$expid));
            if($this->data['productDetail']->num_rows() > 0 )
            {
                $this->mobile_model->update_details(EXPERIENCE_ADDR,$dataArr,array('experience_id'=>$expid));
            }
            else
            {
                $this->mobile_model->simple_insert(EXPERIENCE_ADDR,$data);
            }
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_kit_details()
    {
        $expid          = $this->input->post ('exp_id');
        $userId         = $this->input->post ('user_id');
        $kit_title      = $this->input->post('kit_title');
        $kit_detailed_title = $this->input->post('kit_detailed');
        $kit_count      = $this->input->post('kit_count');
        $kit_description  = str_replace("'", "`", $this->input->post('kit_description'));
        if($expid!='')
        {
            $checkDatesExist = $this->mobile_model->ExecuteQuery("select id from ".EXPERIENCE_GUIDE_PROVIDES." where kit_title= '".$kit_title."' and experience_id='".$expid."' and status='1' ");
            if($checkDatesExist->num_rows() > 0)
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"Kit already exist!"));
                echo $json_encode;
                exit;
            }
            else
            {
                $dataArr = array(
                    'experience_id'     => $expid,
                    'kit_title'       => $kit_title,
                    'kit_detailed_title'  => $kit_detailed_title,
                    'kit_description'     => $kit_description,
                    'kit_count'       => $kit_count,
                    'created_at'      => date('Y-m-d H:i:s'),
                    'status'        => '1'
                );
                $this->db->insert(EXPERIENCE_GUIDE_PROVIDES,$dataArr);
                //update in experience table kit_content
                $condition = array('experience_id'=>$expid);
                $guide_provides = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
                foreach ($guide_provides->result() as $row)
                {
                    $kit[] = $row->id;
                }
                $kit = implode(',', $kit);
                $dataArr = array('kit_content' => $kit );
                $this->mobile_model->update_details(EXPERIENCE,$dataArr,$condition);
                $this->show_experience_details($userId,$expid);
                exit();
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function edit_kit_details()
    {
        $kit_id = $this->input->post ('kit_id');
        $kit_details = array();
        if($kit_id != "")
        {
            $condition=array('id'=>$kit_id);
            $guide_provides = $this->mobile_model->get_all_details(EXPERIENCE_GUIDE_PROVIDES,$condition);
            foreach ($guide_provides->result() as $items) {
                $kit_details = array("experience_id"=>$items->experience_id,"kit_title" => $items->kit_title,"kit_details" => $items->kit_detailed_title,"kit_count" => $items->kit_count,"kit_description" => $items->kit_description);
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Kit details retrieved","kit_id"=>$kit_id,"kit_details"=>$kit_details));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Kit id missing!"));
            echo $json_encode;
            exit;
        }
    }
    public function update_kit_details()
    {
        $kit_id             = $this->input->post('kit_id');
        $kit_title          = $this->input->post('main_title');
        $kit_detailed_title = $this->input->post('detailed_title');
        $kit_count          = $this->input->post('kit_count');
        $kit_description    = str_replace("'", "`", $this->input->post('kit_description'));
        $experience_id      = $this->input->post('exp_id');
        if($kit_id != "" && $kit_title != "" && $kit_detailed_title != "" && $kit_count != "" && $kit_description != "" && $experience_id != "")
        {
            $condition = array('id' => $kit_id );
            $dataArr = array(
                'experience_id'     => $experience_id,
                'kit_title'       => $kit_title,
                'kit_detailed_title'  => $kit_detailed_title,
                'kit_description'     => $kit_description,
                'kit_count'       => $kit_count,
                'created_at'      => date('Y-m-d H:i:s'),
                'status'        => '1'
            );
            $this->mobile_model->update_details(EXPERIENCE_GUIDE_PROVIDES,$dataArr,$condition);
            $json_encode = json_encode(array("status"=>1,"message"=>"Kit details Updated!","experience_id"=>$experience_id));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            echo $json_encode;
            exit;
        }
    }
    public function delete_kit_details()
    {
        $kit_id  = $this->input->post('kit_id');
        $expid   = $this->input->post ('exp_id');
        $userId  = $this->input->post ('user_id');
        if($kit_id != "")
        {
            $this->db->where('id',$kit_id)->delete(EXPERIENCE_GUIDE_PROVIDES);
            if($expid!='')
            {
                $this->show_experience_details($userId,$expid);
                exit();
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
                echo $json_encode;
                exit;
            }
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            echo $json_encode;
            exit;
        }
    }
    public function add_notes_to_guest()
    {
        $expid        = $this->input->post ('exp_id');
        $userId       = $this->input->post ('user_id');
        $note_to_guest  = $this->input->post ('note_to_guest');
        if($expid!='' && $note_to_guest!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array('note_to_guest'=>$note_to_guest);
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Parameter missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_host_details()
    {
        $expid        = $this->input->post ('exp_id');
        $userId       = $this->input->post ('user_id');
        $about_host     = $this->input->post ('about_host');
        if($expid!='' && $about_host!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array('about_host'=>$about_host);
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_guest_requirements()
    {
        $expid           = $this->input->post ('exp_id');
        $userId          = $this->input->post ('user_id');
        $guest_requirement = $this->input->post('guest_requirement');
        if($expid!='' && $guest_requirement!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array('guest_requirement'=>$guest_requirement);
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_group_size()
    {
        $expid           = $this->input->post ('exp_id');
        $userId          = $this->input->post ('user_id');
        $group_size        = $this->input->post('group_size');
        if($expid!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array('group_size'=>$group_size);
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_price()
    {
        $expid      = $this->input->post ('exp_id');
        $userId     = $this->input->post ('user_id');
        $price    = $this->input->post ('price');
        $currency   = $this->input->post ('currency');
        if($expid!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $condition2 = array('experience_id'=>$expid);
            $data = array('price'=>$price,'currency'=>$currency);
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->mobile_model->update_details(EXPERIENCE_DATES,$data,$condition2);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Experience id missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function add_experience_cancel_policy()
    {
        $expid           = $this->input->post ('exp_id');
        $userId          = $this->input->post ('user_id');
        $cancel_policy     = $this->input->post('cancel_policy');
        $cancel_policy_des = $this->input->post('cancel_policy_des');
        $security_deposit  = $this->input->post('sec_deposit');
        $meta_title      = $this->input->post('meta_title');
        $meta_keyword    = $this->input->post('meta_keyword');
        $meta_description  = $this->input->post('meta_description');
        if($cancel_policy == 'No Return')
        {
            $cancel_percentage = 0;
        }
        else
        {
            $cancel_percentage = $this->input->post('cancel_percentage');
        }
        if($expid!='')
        {
            $condition = array('experience_id'=>$expid,'user_id'=>$userId);
            $data = array(
                'cancel_policy'     =>$cancel_policy,
                'cancel_policy_des' =>$cancel_policy_des,
                'cancel_percentage' =>$cancel_percentage,
                'security_deposit'  =>$security_deposit,
                'meta_title'        =>$meta_title,
                'meta_keyword'      =>$meta_keyword,
                'meta_description'  =>$meta_description
            );
            $this->mobile_model->update_details(EXPERIENCE,$data,$condition);
            $this->show_experience_details($userId,$expid);
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Parameter missing!","experience_id"=>"","completed_steps"=>0));
            echo $json_encode;
            exit;
        }
    }
    public function get_experience_history($data,$currency_code)
    {
        $exp_details = array();
        $dt = date('Y-m-d H:i:s'); /*print_r($data);die();*/
        foreach ($data as $row)
        {
            $evntdate = "";
            $BookedOn = "";
            $addr = "";
            $expimage = "";
            $count = 0;
            $reviewsts = "";
            $CancelAllowed = "";
            $isCancelled = "";
            $PaymentStatus = "";
            $PayableStatus = false;
            $exp_dt = $row->checkout;
            $totalAmount = "";
            $tax = "";
            $paymentstatus = $this->mobile_model->get_all_details(EXPERIENCE_BOOKING_PAYMENT, array('Enquiryid' => $row->cid));
            $chkval = $paymentstatus->num_rows();
            $status = $paymentstatus->row()->status;
            /*Host approval*/
            if ($row->approval == "Decline")
            {
                $HostApproval = "Decline";
            }
            elseif ($row->approval == 'Accept' && ($chkval == 0 || $status == 'Pending'))
            {
                $HostApproval = "Approved";
            }
            elseif ($row->approval != "Decline" && $chkval == 0)
            {
                $HostApproval = "Pending Confirmation";
            }
            else if ($row->approval != "Decline")
            {
                $HostApproval = "Approved";
            }
            /*********/
            $pr_details = $this->mobile_model->get_all_details(USERS, array('id' => $row->user_id));
            $totalAmount = $row->subTotal + $row->serviceFee + $row->secDeposit;
            $USDAmount = changeCurrency($row->user_currencycode,'USD',$totalAmount,$row->currency_cron_id);
            $tax = $row->serviceFee;
            if ($row->user_currencycode != $currency_code)
            {
                $totalAmount = changeCurrency($row->user_currencycode,$currency_code,$totalAmount,$row->currency_cron_id);
                /*$totalAmount = number_format($price, 2); */
                $tax = changeCurrency($row->user_currencycode,$currency_code,$tax,$row->currency_cron_id);
                /*$tax = number_format($tax, 2);*/
            }
            /*Payment status*/
            if ($status == "Paid")
            {
                $PaymentStatus = 'Booked';
            }
            else
            {
                $date_id = $row->date_id;
                $check_in = date('Y-m-d', (strtotime($row->checkin)));
                $Query = "SELECT IFNULL(count(eq.date_id),0) as date_booked_count from " . EXPERIENCE_ENQUIRY . " as eq where eq.date_id=" . $date_id . " and eq.booking_status='" . Booked . "'";
                $BookedSlots = $this->mobile_model->ExecuteQuery($Query);
                $AvailableSlots = $row->group_size - $BookedSlots->row()->date_booked_count;
                $today = date('Y-m-d', strtotime(date('Y-m-d')));
                $BeforOneDay = date('Y-m-d', (strtotime('+1 day', strtotime($today))));
                if ($AvailableSlots != '0' && $BeforOneDay <= $check_in)
                {
                    $PaymentStatus = 'Pay';
                    $PayableStatus = true;
                    $reviewsts = false;
                    $CancelAllowed = false;
                    $isCancelled = false;
                }
                else if ($AvailableSlots != '0' && $check_in <= $today)
                {
                    $PaymentStatus = 'Expired';
                }
                else if ($AvailableSlots == '0' && $BeforOneDay <= $check_in)
                {
                    $PaymentStatus = 'Expired';
                }
                else
                {
                    $PaymentStatus = 'Expired';
                }
            }
            /******/
            if($PaymentStatus != Pay)
            {
                /*Review*/
                $reviewData = $this->mobile_model->get_exp_trip_review($row->bookingno, $row->GestId);
                if ($reviewData->num_rows() == 0)
                {
                    $reviewsts = false;
                }
                else
                {
                    $reviewsts = true;
                }
                /****/
                /*cancellation*/
                $time_val = date('Y-m-d');
                $check_in = date("Y-m-d", strtotime($row->checkin));
                $dis_details = $this->mobile_model->get_all_details(EXPERIENCE_DISPUTE, array('user_id' => $row->GestId, 'prd_id' => $row->product_id, 'booking_no' => $row->bookingno));
                $admin = $this->mobile_model->getAdminSettings(ADMIN_SETTINGS);
                $dipute_day = $admin->row()->dispute_days;
                $after_day = strtotime("+" . $dipute_day . "days", strtotime($check_in));
                $out_date = date('Y-m-d', $after_day);
                if ($dis_details->num_rows() == 0)
                {
                    $CancelAllowed = true; /*echo "string"; die();*/
                    $isCancelled = false;
                    $hideCancelDay = $this->config->item('cancel_hide_days_experience');
                    $totlessDays = $hideCancelDay;
                    $minus_checkin = strtotime("-" . $totlessDays . "days", strtotime($check_in));
                    $checkinBeforeDay = date('Y-m-d', $minus_checkin);
                    if ($time_val >= $checkinBeforeDay && $time_val <= $check_in)
                    {
                        $CancelAllowed = false;
                    }
                }
                else
                {
                    if ($dis_details->row()->cancel_status == 1)
                    {
                        $CancelAllowed = true;
                        $isCancelled = true;
                    }
                }
                /*************/
            }
            if ($exp_dt <= $dt){  $expired = true; $CancelAllowed = false; }else{ $expired = false; }
            /*Host status*/
            if ($pr_details->row()->host_status == 1)
            {
                $HostStatus = 'host is not available';
            }
            else if ($pr_details->row()->status == 'Inactive')
            {
                $HostStatus = 'host is not available';
            }
            else if ($pr_details->row()->host_status == 1 || $pr_details->row()->status == 'Inactive')
            {
                $HostStatus = 'host is not available';
            }
            elseif ($pr_details->row()->host_status == 0 && $pr_details->row()->status == 'Active')
            {
                $HostStatus = 'host is available';
            }
            else
            {
                $HostStatus = '';
            }
            /*********/
            $BookedOn = date('M d, Y', strtotime($row->dateAdded));
            $imgSrc = 'dummyProductImage.jpg';
            if ($row->product_image != "" && file_exists('./images/experience/' . $row->product_image))
            {
                $imgSrc = $row->product_image;
            }
            $expimage = base_url() . 'images/experience/' . $imgSrc;
            $evntdate = date('M d, Y', strtotime($row->checkin)) . " - " . date('M d, Y', strtotime($row->checkout));
            if ($row->city_name != '') $addr = $addr . $row->city_name;
            if ($row->city_name != '' && $row->state_name != '') $addr = $addr . ', ';
            if ($row->state_name != '') $addr = $addr . $row->state_name;
            if ($row->country_name != '' && $row->state_name != '') $addr = $addr . ', ';
            if ($row->country_name != '') $addr = $addr . $row->country_name . '.';
            $schedule_details = array();
            if ($row->date_id != '')
            {
                $date_id = $row->date_id;
                $TimesAre = $this->db->where('exp_dates_id', $date_id)->get(EXPERIENCE_TIMING);
                $count = $TimesAre->num_rows();
                foreach ($TimesAre->result() as $sched)
                {
                    $schtime = date('H:i', strtotime($sched->start_time)) . ' - ' . date('H:i', strtotime($sched->end_time));
                    $schedule_details[] = array("ScheduleTitle"=>$sched->title,"ScheduleDate"=>date('M d, Y', strtotime($sched->schedule_date)),"ScheduleTime"=>$schtime);
                }
            }
            $condition = array('currency_type'=>$row->user_currencycode);
            $paid_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
            $paid_currency_symbol = $paid_currency_details->row()->currency_symbols;
            $condition2 = array('currency_type'=>$row->currency);
            $exp_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition2 );
            $exp_currency_symbol = $exp_currency_details->row()->currency_symbols;
            if($row->currency_cron_id == "" || $row->currency_cron_id == null)
            {
                $currency_cron_id_val = "";
            }
            else
            {
                $currency_cron_id_val = $row->currency_cron_id;
            }
            $exp_details[] = array("user_id"=>$row->GestId,"user_email"=>$row->email,"Booking_id"=>$row->booking_id,"expired"=>$expired,"ExpId"=>$row->product_id,"BookedOn"=>$BookedOn,"expName"=>$row->product_title,"expImage"=>$expimage,"exp_price"=>$row->price,"exp_currency_symbol"=>$exp_currency_symbol,"HostName"=>$row->firstname,"HostId"=>$row->renter_id,"EventDate"=>$evntdate,"Address"=>$addr,"BookingNo"=>$row->bookingno,"Total_Amount"=>floatval($totalAmount),"Total_Amount_In_USD"=>floatval($USDAmount),"Tax"=>floatval($tax),"CurrencyCode"=>$row->user_currencycode,"CurrencySymbol"=>$paid_currency_symbol,"currency_cron_id"=>$currency_cron_id_val,"BookingStatus"=>$PaymentStatus,"PayableStatus"=>$PayableStatus,"HostApproval"=>$HostApproval,"HostStatus"=>$HostStatus,"isReviewed"=>$reviewsts,"CancelAllowed"=>$CancelAllowed,"isCancelled"=>$isCancelled,"CancelPercentage"=>$row->cancel_percentage,"TimeCount"=>$count,"ExpSchedules"=>$schedule_details);
        }
        return $exp_details;
    }
    public function get_experience_prev_history($data)
    {
        $exp_details = array();
        $dt = date('Y-m-d H:i:s'); /*print_r($data);die();*/
        foreach ($data as $row)
        {
            $evntdate = "";
            $BookedOn = "";
            $addr = "";
            $expimage = "";
            $count = 0;
            $reviewsts = "";
            $CancelAllowed = "";
            $isCancelled = "";
            $PaymentStatus = "";
            $PayableStatus = false;
            $exp_dt = $row->checkout;
            $paymentstatus = $this->mobile_model->get_all_details(EXPERIENCE_BOOKING_PAYMENT, array('Enquiryid' => $row->cid));
            $chkval = $paymentstatus->num_rows();
            $status = $paymentstatus->row()->status;
            /*Host approval*/
            if ($row->approval == "Decline")
            {
                $HostApproval = "Decline";
            }
            elseif ($row->approval == 'Accept' && ($chkval == 0 || $status == 'Pending'))
            {
                $HostApproval = "Approved";
            }
            elseif ($row->approval != "Decline" && $chkval == 0)
            {
                $HostApproval = "Pending Confirmation";
            }
            else if ($row->approval != "Decline")
            {
                $HostApproval = "Approved";
            }
            /*********/
            $pr_details = $this->mobile_model->get_all_details(USERS, array('id' => $row->user_id));
            $totalAmount = $row->subTotal + $row->serviceFee + $row->secDeposit;
            $USDAmount = changeCurrency($row->user_currencycode,'USD',$totalAmount,$row->currency_cron_id);
            $adminfee = $row->serviceFee;
            if ($row->user_currencycode != $this->session->userdata('currency_type'))
            {
                $price = changeCurrency($row->user_currencycode,$this->session->userdata('currency_type'),$totalAmount,$row->currency_cron_id);
                $totalAmount = number_format($price, 2);
                $tax = changeCurrency($row->user_currencycode,$this->session->userdata('currency_type'),$adminfee,$row->currency_cron_id);
                $tax = number_format($tax, 2);
            }
            /*Payment status*/
            if ($status == "Paid")
            {
                $PaymentStatus = 'Booked';
            }
            else
            {
                $date_id = $row->date_id;
                $check_in = date('Y-m-d', (strtotime($row->checkin)));
                $Query = "SELECT IFNULL(count(eq.date_id),0) as date_booked_count from " . EXPERIENCE_ENQUIRY . " as eq where eq.date_id=" . $date_id . " and eq.booking_status='" . Booked . "'";
                $BookedSlots = $this->mobile_model->ExecuteQuery($Query);
                $AvailableSlots = $row->group_size - $BookedSlots->row()->date_booked_count;
                $today = date('Y-m-d', strtotime(date('Y-m-d')));
                $BeforOneDay = date('Y-m-d', (strtotime('+1 day', strtotime($today))));
                if ($AvailableSlots != '0' && $BeforOneDay <= $check_in)
                {
                    $PaymentStatus = 'Pay';
                    $PayableStatus = true;
                    $reviewsts = false;
                    $CancelAllowed = false;
                    $isCancelled = false;
                }
                else if ($AvailableSlots != '0' && $check_in <= $today)
                {
                    $PaymentStatus = 'Expired';
                }
                else if ($AvailableSlots == '0' && $BeforOneDay <= $check_in)
                {
                    $PaymentStatus = 'Expired';
                }
                else
                {
                    $PaymentStatus = 'Expired';
                }
            }
            /******/
            if($PaymentStatus != Pay)
            {
                /*Review*/
                $reviewData = $this->mobile_model->get_exp_trip_review($row->bookingno, $row->GestId);
                if ($reviewData->num_rows() == 0)
                {
                    $reviewsts = false;
                }
                else
                {
                    $reviewsts = true;
                }
                /****/
                /*cancellation*/
                $time_val = date('Y-m-d');
                $check_in = date("Y-m-d", strtotime($row->checkin));
                $dis_details = $this->mobile_model->get_all_details(EXPERIENCE_DISPUTE, array('user_id' => $row->GestId, 'prd_id' => $row->product_id, 'booking_no' => $row->bookingno));
                $admin = $this->mobile_model->getAdminSettings(ADMIN_SETTINGS);
                $dipute_day = $admin->row()->dispute_days;
                $after_day = strtotime("+" . $dipute_day . "days", strtotime($check_in));
                $out_date = date('Y-m-d', $after_day);
                if ($dis_details->num_rows() == 0)
                {
                    $CancelAllowed = true;
                    $isCancelled = false;
                    $hideCancelDay = $this->config->item('cancel_hide_days_experience');
                    $totlessDays = $hideCancelDay + 1;
                    $minus_checkin = strtotime("-" . $totlessDays . "days", strtotime($check_in));
                    $checkinBeforeDay = date('Y-m-d', $minus_checkin);
                    if ($time_val <= $checkinBeforeDay)
                    {
                        if (($time_val) < $out_date)
                        {
                            if (($time_val) < $check_in)
                            {
                                $CancelAllowed = false;
                            }
                            else
                            {
                                $CancelAllowed = true;
                            }
                        }
                        else
                        {
                        }
                    }
                }
                else
                {
                    if ($dis_details->row()->cancel_status == 1)
                    {
                        $CancelAllowed = true;
                        $isCancelled = true;
                    }
                }
                /*************/
            }
            if ($exp_dt <= $dt){  $expired = true; }else{ $expired = false; }
            /*Host status*/
            if ($pr_details->row()->host_status == 1)
            {
                $HostStatus = 'host is not available';
            }
            else if ($pr_details->row()->status == 'Inactive')
            {
                $HostStatus = 'host is not available';
            }
            else if ($pr_details->row()->host_status == 1 || $pr_details->row()->status == 'Inactive')
            {
                $HostStatus = 'host is not available';
            }
            elseif ($pr_details->row()->host_status == 0 && $pr_details->row()->status == 'Active')
            {
                $HostStatus = 'host is available';
            }
            else
            {
                $HostStatus = '';
            }
            /*********/
            $BookedOn = date('M d, Y', strtotime($row->dateAdded));
            $imgSrc = 'dummyProductImage.jpg';
            if ($row->product_image != "" && file_exists('./images/experience/' . $row->product_image))
            {
                $imgSrc = $row->product_image;
            }
            $expimage = base_url() . 'images/experience/' . $imgSrc;
            $evntdate = date('M d, Y', strtotime($row->checkin)) . " - " . date('M d, Y', strtotime($row->checkout));
            if ($row->city_name != '') $addr = $addr . $row->city_name;
            if ($row->city_name != '' && $row->state_name != '') $addr = $addr . ', ';
            if ($row->state_name != '') $addr = $addr . $row->state_name;
            if ($row->country_name != '' && $row->state_name != '') $addr = $addr . ', ';
            if ($row->country_name != '') $addr = $addr . $row->country_name . '.';
            $schedule_details = array();
            if ($row->date_id != '')
            {
                $date_id = $row->date_id;
                $TimesAre = $this->db->where('exp_dates_id', $date_id)->get(EXPERIENCE_TIMING);
                $count = $TimesAre->num_rows();
                foreach ($TimesAre->result() as $sched)
                {
                    $schtime = date('H:i', strtotime($sched->start_time)) . ' - ' . date('H:i', strtotime($sched->end_time));
                    $schedule_details[] = array("ScheduleTitle"=>$sched->title,"ScheduleDate"=>date('M d, Y', strtotime($sched->schedule_date)),"ScheduleTime"=>$schtime);
                }
            }
            $condition = array('currency_type'=>$row->user_currencycode);
            $paid_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
            $paid_currency_symbol = $paid_currency_details->row()->currency_symbols;
            $condition2 = array('currency_type'=>$row->currency);
            $exp_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition2 );
            $exp_currency_symbol = $exp_currency_details->row()->currency_symbols;
            if($row->currency_cron_id == "" || $row->currency_cron_id == null)
            {
                $currency_cron_id_val = "";
            }
            else
            {
                $currency_cron_id_val = $row->currency_cron_id;
            }
            $exp_details[] = array("user_id"=>$row->GestId,"user_email"=>$row->email,"Booking_id"=>$row->booking_id,"expired"=>$expired,"ExpId"=>$row->product_id,"BookedOn"=>$BookedOn,"expName"=>$row->product_title,"expImage"=>$expimage,"exp_price"=>$row->price,"exp_currency_symbol"=>$exp_currency_symbol,"HostName"=>$row->firstname,"HostId"=>$row->renter_id,"EventDate"=>$evntdate,"Address"=>$addr,"BookingNo"=>$row->bookingno,"Total_Amount"=>floatval($totalAmount),"Total_Amount_In_USD"=>floatval($USDAmount),"Tax"=>floatval($tax),"CurrencyCode"=>$row->user_currencycode,"CurrencySymbol"=>$paid_currency_symbol,"currency_cron_id"=>$currency_cron_id_val,"BookingStatus"=>$PaymentStatus,"PayableStatus"=>$PayableStatus,"HostApproval"=>$HostApproval,"HostStatus"=>$HostStatus,"isReviewed"=>$reviewsts,"CancelAllowed"=>$CancelAllowed,"isCancelled"=>$isCancelled,"CancelPercentage"=>$row->cancel_percentage,"TimeCount"=>$count,"ExpSchedules"=>$schedule_details);
        }
        return $exp_details;
    }
    public function experience_history()
    {
        $userId = $this->input->post('user_id');
        $currency_code = $this->input->post('currency_code');
        $present_experience = array();
        $past_experience = array();
        $today = date('Y-m-d', strtotime(date('Y-m-d')));
        if($userId!='')
        {
            /*Present experience booking details*/
            $bookedRental = $this->mobile_model->booked_rental_trip($userId); /*print_r($bookedRental->result()); die();*/
            if (!empty($bookedRental->result()))
            {
                $data = $bookedRental->result();
                $present_experience = $this->get_experience_history($data,$currency_code); /*print_r($present_experience); die();*/
            }
            /**********/
            /*Past experience booking details*/
            $pastbookedexp = $this->mobile_model->booked_rental_trip_prev($userId);
            if (!empty($pastbookedexp->result()))
            {
                $data = $pastbookedexp->result();
                $past_experience = $this->get_experience_prev_history($data,$currency_code);
            }
            /**********/
            $json_encode = json_encode(array("status"=>1,"message"=>"Details retrieved!","present_experience"=>$present_experience,"past_experience"=>$past_experience));
            echo $json_encode;
            exit;
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Please login"));
            echo $json_encode;
            exit;
        }
    }
    /* ADD EXPERIENCE REVIEW */
    public function mobile_add_exp_review()
    {
        $user_id = $this->input->post ( 'host_id' );
        $userId = $reviewer_id = $this->input->post ( 'user_id' );
        $property_id = $this->input->post ( 'exp_id' );
        $bookingno = $this->input->post ( 'bookingno' );
        $review = $this->input->post ( 'review' );
        $total_review = $this->input->post ( 'total_review' );
        $currency_code = $this->input->post ( 'currency_code' );
        $present_experience = array();
        $past_experience = array();
        if($reviewer_id=="" || $reviewer_id==0  || $property_id =="" || $property_id ==0 ||  $bookingno =="" ||  $review =="")
        {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        }
        else
        {
            $this->db->select('*');
            $this->db->from(USERS.' as u');
            $this->db->join(PRODUCT.' as p' , 'p.user)id = u.id');
            $userDetails = $this->db->query('select u.email,u.id from '.USERS.' as u where u.id ="'.$reviewer_id.'"');
            if($userDetails->num_rows() >0)
            {
                foreach($userDetails->result() as $u)
                {
                    $email = $u->email;
                }
            }
            else
            {
                echo json_encode(array("status"=>1,"message"=>"No user data available!"));
                exit;
            }
            $dataArr = array( 'review'=>$review, 'status'=>'Inactive', 'product_id'=>$property_id, 'user_id'=>$user_id, 'reviewer_id'=>$reviewer_id, 'email'=>$email, 'bookingno'=>$bookingno, 'total_review'=>$total_review);
            $insertquery = $this->mobile_model->add_exp_review($dataArr);
            $review_id = $this->db->insert_id();
            if($review_id != "")
            {
                /*Present experience booking details*/
                $bookedRental = $this->mobile_model->booked_rental_trip($userId); /*print_r($bookedRental->result()); die();*/
                if (!empty($bookedRental->result()))
                {
                    $data = $bookedRental->result();
                    $present_experience = $this->get_experience_history($data,$currency_code);
                }
                /**********/
                /*Past experience booking details*/
                $pastbookedexp = $this->mobile_model->booked_rental_trip_prev($userId);
                if (!empty($pastbookedexp->result()))
                {
                    $data = $pastbookedexp->result();
                    $past_experience = $this->get_experience_prev_history($data,$currency_code);
                }
                /**********/
                echo json_encode(array("status"=>1,"message"=>"Review added","present_experience"=>$present_experience,"past_experience"=>$past_experience));
                exit;
            }
            else
            {
                echo json_encode(array("status"=>0,"message"=>"Review not added"));
                exit;
            }
        }
    }
    public function view_your_exp_review()
    {
        $reviewer_id = $this->input->post('user_id');
        $bookingNo = $this->input->post('bookingNo');
        if($reviewer_id =="" || $bookingNo == "")
        {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        }
        else
        {
            $reviewData = $this->mobile_model->get_expreview($bookingNo, $reviewer_id);
            if($reviewData->num_rows()>0)
            {
                foreach($reviewData->result() as $review)
                {
                    if($review->image == '')
                    {
                        $img_url = base_url().'images/site/profile.png';
                    }
                    else
                    {
                        $img_url = base_url().'images/users/'.$review->image;
                    }
                    $review_date = date('d-m-Y',strtotime($review->dateAdded));
                    $your_review[] = array("name"=>$review->firstname,"review"=>$review->review,"review_date"=>$review_date,"star_rating"=>intval($review->total_review),"user_image"=>$img_url,"bookingno"=>$review->bookingno,"email"=>$review->email);
                }
                echo json_encode(array("status"=>1,"message"=>"Review retrieved","your_review"=>$your_review));
                exit;
            }
            else
            {
                echo json_encode(array("status"=>0,"message"=>"No review retrieved"));
                exit;
            }
        }
    }
    public function mobile_add_exp_cancellation()
    {
        $prd_id = $this->input->post('prd_id');
        $bookingNo = $this->input->post('bookingNo');
        $disputer_id = $this->input->post('disputer_id');
        $user_id = $this->input->post('user_id');
        $cancellation_percentage = $this->input->post('cancellation_percentage');
        $message = $this->input->post('message');
        $currency_code = $this->input->post('currency_code');
        $present_experience = array();
        $past_experience = array();
        $userDetails = $this->db->query('select u.email from '.USERS.' as u where u.id ="'.$user_id.'"');
        if($userDetails->num_rows() >0)
        {
            foreach($userDetails->result() as $u)
            {
                $email = $u->email;
            }
        }
        else
        {
            echo json_encode(array("status"=>0,"message"=>"No user data available!"));
            exit;
        }
        $excludeArr = array('trip_url', 'dispute_message', 'bookingNo','cancellation_percentage', 'currency_code', 'device_type');
        $dataArr = array('prd_id' => $prd_id, 'message' => $message, 'user_id' => $user_id, 'booking_no' => $bookingNo, 'email' => $email, 'disputer_id' => $disputer_id,'cancellation_percentage' => $cancellation_percentage, 'cancel_status' => 1);
        $this->mobile_model->commonInsertUpdate(EXPERIENCE_DISPUTE, 'insert', $excludeArr, $dataArr, $condition);
        $UpdateArr = array('cancelled' => 'Yes');
        $Condition = array('prd_id' => $prd_id, 'user_id' => $user_id, 'Bookingno' => $bookingNo);
        $this->mobile_model->update_details(EXPERIENCE_ENQUIRY, $UpdateArr, $Condition);
        /*MAIL TO HOST */
        $newsid = '56';
        $template_values = $this->mobile_model->get_newsletter_template_details($newsid);
        if ($template_values['sender_name'] == '' && $template_values['sender_email'] == '') {
            $sender_email = $this->data['siteContactMail'];
            $sender_name = $this->data['siteTitle'];
        } else {
            $sender_name = $template_values['sender_name'];
            $sender_email = $template_values['sender_email'];
        }
        $condition = array('id' => $disputer_id);
        $hostDetails = $this->mobile_model->get_all_details(USERS, $condition);
        $uid = $hostDetails->row()->id;
        $hostname = $hostDetails->row()->user_name;
        $host_email = $hostDetails->row()->email;
        $condition = array('id' => $user_id);
        $custDetails = $this->mobile_model->get_all_details(USERS, $condition);
        $cust_name = $custDetails->row()->user_name;
        $condition = array('experience_id' => $prd_id);
        $prdDetails = $this->mobile_model->get_all_details(EXPERIENCE, $condition);
        $prd_title = $prdDetails->row()->experience_title;
        $reason = $message;
        $email_values = array('from_mail_id' => $sender_email, 'to_mail_id' => $host_email, 'subject_message' => $template_values ['news_subject'], 'body_messages' => $message);
        $reg = array('logo' => $this->data['logo'],'host_name' => $hostname, 'cust_name' => $cust_name, 'prd_title' => $prd_title, 'reason' => $reason, 'booking_no' => $bookingNo);
        $message = $this->load->view('newsletter/ToHostCancelExpBooking' . $newsid . '.php', $reg, TRUE);
        $this->load->library('email', $config);
        $this->email->from($email_values['from_mail_id'], $sender_name);
        $this->email->to($email_values['to_mail_id']);
        $this->email->subject($email_values['subject_message']);
        $this->email->set_mailtype("html");
        $this->email->message($message);
        try {
            $this->email->send();
            $hostmail_sts = array("status"=>1,"message"=>"mail send to host");
        } catch (Exception $e) {
            $e = $e->getMessage();
            $hostmail_sts = array("status"=>0,"message"=>"mail not send","error"=>$e);
        }
        /*****/
        $getEnquiryDet = $this->mobile_model->get_all_details(EXPERIENCE_ENQUIRY, array('Bookingno' => $bookingNo));
        $TheSubTot = $getEnquiryDet->row()->subTotal;
        $SecDeposit = $getEnquiryDet->row()->secDeposit;
        $CancelPercentage = $getEnquiryDet->row()->exp_cancel_percentage;
        $CancelAmount = $TheSubTot / 100 * $CancelPercentage;
        $cancel_amount_guest=$TheSubTot-$CancelAmount;
        if ($CancelPercentage!="100")
        {
            $CancelAmountWithSecDeposit=$cancel_amount_guest+$SecDeposit;
        }else{
            $CancelAmountWithSecDeposit=$SecDeposit;
        }
        $UpdateCommissionArr = array('paid_cancel_amount' => $CancelAmountWithSecDeposit);
        $ConditionCommission = array('booking_no' => $bookingNo);
        $this->mobile_model->update_details(EXP_COMMISSION_TRACKING, $UpdateCommissionArr, $ConditionCommission);
        /*Present experience booking details*/
        $bookedRental = $this->mobile_model->booked_rental_trip($user_id); /*print_r($bookedRental->result()); die();*/
        if (!empty($bookedRental->result()))
        {
            $data = $bookedRental->result();
            $present_experience = $this->get_experience_history($data,$currency_code);
        }
        /**********/
        /*Past experience booking details*/
        $pastbookedexp = $this->mobile_model->booked_rental_trip_prev($user_id);
        if (!empty($pastbookedexp->result()))
        {
            $data = $pastbookedexp->result();
            $past_experience = $this->get_experience_prev_history($data,$currency_code);
        }
        /**********/
        echo json_encode(array("status"=>1,"message"=>"Booking cancelled","present_experience"=>$present_experience,"past_experience"=>$past_experience));
        exit;
    }
    public function view_your_exp_cancellation()
    {
        $user_id = $this->input->post('user_id');
        $booking_no = $this->input->post('bookingNo');
        if($user_id =="" || $booking_no == "")
        {
            echo json_encode(array("status"=>0,"message"=>"Parameter missing!"));
            exit;
        }
        else
        {
            $disputeData = $this->mobile_model->get_expdispute($booking_no, $user_id); /*print_r($disputeData); die();*/
            if(count($disputeData) > 0)
            {
                if($disputeData->product_image == '')
                {
                    $img_url = base_url().'images/experience/dummyProductImage.jpg';
                }
                else
                {
                    $img_url = base_url().'images/experience/'.$disputeData->product_image;
                }
                $dispute_date = date('d-m-Y',strtotime($disputeData->created_date));
                $your_dispute[] = array("experience_title"=>$disputeData->experience_title,"message"=>$disputeData->message,"dispute_date"=>$dispute_date,"exp_address"=>$disputeData->address,"experience_image"=>$img_url);
                echo json_encode(array("status"=>1,"message"=>"Dispute retrieved","your_dispute"=>$your_dispute));
                exit;
            }
            else
            {
                echo json_encode(array("status"=>0,"message"=>"No dispute retrieved"));
                exit;
            }
        }
    }
    public function send_exp_message()
    {
        $productId = $this->input->post('rental_id');
        $bookingNo = $this->input->post('bookingno');
        $receiverId = $this->input->post('receiver_id');
        $senderId = $this->input->post('sender_id');
        $message = $this->input->post('message');
        $now = time();
        if($productId == "" || $bookingNo == "" || $receiverId == "" || $senderId == "" || $message == "")
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Missing parameter!"));
            echo $json_encode;
            exit;
        }
        else
        {
            $excludeArr = array('redirect', 'discussion', 'currency_code', 'device_type');
            $dataArr = array('productId' => $this->input->post('rental_id'), 'bookingNo' => $this->input->post('bookingno'), 'senderId' => $this->input->post('sender_id'), 'receiverId' => $this->input->post('receiver_id'), 'subject' => 'Booking Request : ' . $this->input->post('bookingno'), 'message' => $this->input->post('message'));
            $this->mobile_model->simple_insert(EXPERIENCE_MED_MSG, $dataArr);
            $dataArr = array('convId' => $now);
            $condition = array();
            $this->mobile_model->commonInsertUpdate(EXPERIENCE_DISCUSSION, 'insert', $excludeArr, $dataArr, $condition);
            $json_encode = json_encode(array("status"=>1,"message"=>"Message send"));
            echo $json_encode;
            exit;
        }
    }
    public function experience_listview()
    {
        $userId = $this->input->post ('user_id');
        $currency_code = $this->input->post('currency_code');
        if($userId == "")
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"Missing parameter!"));
            echo $json_encode;
            exit;
        }
        $last_cron_id = $this->db->select('*')->from('fc_currency_cron')->order_by('curren_id','desc')->limit(1)->get();
        $experiencearr = array();
        $my_reservation = array();
        /* experience list */
        $hosting_commission_status='SELECT * FROM '.COMMISSION.' WHERE seo_tag="experience_listing"';
        $commision_sts = $this->mobile_model->ExecuteQuery($hosting_commission_status);
        $get_exp_list = $this->mobile_model->get_dashboard_experience_lists ( $userId );
        if(!empty($get_exp_list))
        {
            foreach($get_exp_list->result() as $data)
            {
                $expr_title = $data->experience_title;
                $exp_price = $data->price;
                $expr_currency =  $data->currency;
                if($expr_currency!=$currency_code && $exp_price!='0.00')
                {
                    $expr_price = currency_conversion($expr_currency,$currency_code,$exp_price,$last_cron_id->row()->curren_id);
                }
                else
                {
                    $expr_price = $exp_price;
                }
                $expr_user  = $data->user_name;
                $expr_id    =$data->experience_id;
                $expr_adDate= $data->added_date;
                $expr_host = $data->id;
                $expr_hostname = $data->user_name;
                $host_email = $data->email;
                $total_steps = 17;
                if($data->exp_type!='' && ($data->total_hours!='' || $data->date_count!='') && $data->type_id!='')
                {
                    $total_steps--;
                }
                if($data->language_list!='')
                {
                    $total_steps--;
                }
                if($data->organization!='' && $data->organization_des!='')
                {
                    $total_steps--;
                }
                if($data->experience_title!='')
                {
                    $total_steps--;
                }
                $dat_date=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_DATES,' where experience_id='.$data->experience_id);
                $shedule_timing=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_TIMING,' where experience_id='.$data->experience_id);
                if($dat_date->num_rows()>0 && $shedule_timing->num_rows()>0)
                {
                    $total_steps--;
                }
                if($data->exp_tagline!='')
                {
                    $total_steps--;
                }
                $dat_img=$this->mobile_model->get_selected_fields_records('id',EXPERIENCE_PHOTOS,' where product_id='.$data->experience_id.' and product_image !=""');
                if($dat_img->num_rows()>0)
                {
                    $total_steps--;
                }
                if($data->experience_description!='')
                {
                    $total_steps--;
                }
                if($data->location_description!='')
                {
                    $total_steps--;
                }
                $loc_data= $this->mobile_model->get_selected_fields_records('id',EXPERIENCE_ADDR,' where experience_id='.$data->experience_id);
                if($loc_data->num_rows()>0)
                {
                    $total_steps--;
                }
                if($data->kit_content!='')
                {
                    $total_steps--;
                }
                if($data->note_to_guest!='')
                {
                    $total_steps--;
                }
                if($data->about_host!='')
                {
                    $total_steps--;
                }
                if($data->guest_requirement!='')
                {
                    $total_steps--;
                }
                if($data->group_size!='')
                {
                    $total_steps--;
                }
                if($data->price>0)
                {
                    $total_steps--;
                }
                if($data->cancel_policy!='')
                {
                    $total_steps--;
                }
                $payable = false;
                if($total_steps != 0 )
                {
                    $status = $total_steps.' steps to list';
                }
                else
                {
                    if($data->status == 1 && $total_steps == 0)
                    {
                        $status = 'Listed';
                    }
                    elseif($data->status == 0 && $total_steps == 0 && $commision_sts->row()->status == 'Inactive')
                    {
                        $status = 'Pending';
                    }
                    elseif($data->status == 0 && $total_steps == 0 && $commision_sts->row()->status == 'Active' && $data->payment_status == 'paid')
                    {
                        $status = 'Pending';
                    }
                    elseif($data->status == 0 && $total_steps == 0 && $commision_sts->row()->status == 'Active')
                    {
                        $status = 'Pay';
                        $payable = true;
                    }
                }
                if($data->product_image != '')
                {
                    $proImage = base_url().'images/experience/'.$data->product_image;
                }
                else
                {
                    $proImage = base_url().'images/experience/dummyProductImage.jpg';
                }
                $experience_currency_sybl = "";
                if($expr_currency != "")
                {
                    $condition = array('currency_type'=>$expr_currency);
                    $experience_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                    $experience_currency_sybl = $experience_currency_details->row()->currency_symbols;
                }
                $admin=$this->user_model->get_all_details (ADMIN,array('admin_type'=>'super'));
                $data=$admin->row();
                $admin_currencyCode=trim($data->admin_currencyCode);
                if ($expr_currency != $admin_currencyCode)
                {
                    $globalpdt_price = currency_conversion($exp_currency_code, $admin_currencyCode, $exp_price, $last_cron_id->row()->curren_id);
                }
                else
                {
                    $globalpdt_price = $exp_price;
                }
                /*admin commission in USD*/
                if($commision_sts->row()->promotion_type=='percentage')
                {
                    $hosting_fee = ($commision_sts->row()->commission_percentage) / 100 * $globalpdt_price;
                }else{
                    $hosting_fee = $commision_sts->row()->commission_percentage;
                }
                /**********/
                /*admin commission in APP CURRENCY*/
                $App_admin_comm = currency_conversion($admin_currencyCode, $currency_code, $hosting_fee, $last_cron_id->row()->curren_id);
                /********/
                $experiencearr[] = array('remaining_steps'=>$total_steps,'experience_image'=>$proImage,'experience_title'=>$expr_title,'experience_price'=>$expr_price,'experience_status'=>$status,'hostname'=>$expr_hostname,'host_email'=>$host_email,'experience_id'=>intval($expr_id),'created_date'=>$expr_adDate,'commission_type'=>$commision_sts->row()->promotion_type,'commission'=>$commision_sts->row()->commission_percentage,'Admin_Amount_In_USD'=>number_format($hosting_fee, 2),'App_Currency_Admin_Amount'=>number_format($App_admin_comm, 2),'experience_currency_code'=>$expr_currency,'experience_currency_symbol'=>$experience_currency_sybl,'payable'=>$payable,'host_id'=>intval($expr_host));
            }
        }
        /*************/
        /* reservation list */
        $get_reservation_list = $this->mobile_model->get_reservation_list ($userId);
        foreach ($get_reservation_list->result() as $trip)
        {
            $paymentstatus = $this->mobile_model->get_all_details(fc_experience_booking_payment,array('Enquiryid'=>$trip->EnqId));
            $chkval = $paymentstatus->num_rows();
            if($chkval==1)
            {
                $payment_status = "Paid";
            }
            else
            {
                $payment_status = "Pending";
            }
            if($trip->approval=='Pending')
            {
                $approval_status = "Approval Pending";
            }
            else
            {
                if($trip->approval == 'Accept')
                {
                    $approval_status = "Accepted";
                }
                else
                {
                    $approval_status = "Declined";
                }
            }
            if($trip->image != ''){
                if($trip->loginUserType == 'google'){
                    $userImage = $trip->image;
                }elseif($trip->image == '' ){
                    $userImage = base_url().'images/site/profile.png';
                } else {
                    $userImage = base_url().'images/users/'.$trip->image;
                }
            }else{
                $userImage = base_url().'images/site/profile.png';
            }
            if($trip->checkin!='0000-00-00 00:00:00' && $res->checkout!='0000-00-00 00:00:00'){
                $book_date = date('M d',strtotime($trip->checkin))." - ".date('M d, Y',strtotime($trip->checkout));
            }
            $total = $trip->subTotal + $trip->secDeposit +$trip->serviceFee;
            $condition = array('exp_dates_id'=>$trip->date_id);
            $exp_time = $this->mobile_model->get_all_details ( EXPERIENCE_TIMING, $condition );
            $start_time = $exp_time->row()->start_time;
            $end_time = $exp_time->row()->end_time;
            $date_title = $exp_time->row()->title;
            $scheduled_date =  $exp_time->row()->schedule_date;
            $condition = array('currency_type'=>$trip->user_currencycode);
            $paid_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
            $paid_currency_symbol = $paid_currency_details->row()->currency_symbols;
            if($currency_code!=$trip->currency)
            {
                $expPrice=convertCurrency($trip->currency,$currency_code,$trip->price);
            }
            else
            {
                $expPrice=$trip->price;
            }
            $my_reservation[] = array("id"=>$trip->EnqId,"experience_title"=>$trip->experience_title,"experience_price"=>floatval($expPrice),"booking_dates"=>$book_date,"checkin"=>$trip->checkin,"checkout"=>$trip->checkout,"numofdates"=>$trip->noofdates,"experience_address"=>$trip->address,"country"=>$trip->country_name,"state"=>$trip->state_name,"city"=>$trip->city_name,"post_code"=>$trip->post_code,"experience_id"=>$trip->experience_id,"service_fee"=>floatval($trip->serviceFee),"sub_total"=>floatval($trip->subTotal),"security_deposit"=>floatval($trip->secDeposit),"NoofGuest"=>$trip->NoofGuest,"cancellation_policy"=>$trip->cancel_policy,"total"=>floatval($total),"payment_status"=>$payment_status,"approval_status"=>$approval_status,"paid_currency_code"=>$trip->user_currencycode,"paid_currency_symbol"=>$paid_currency_symbol,"user_name"=>$trip->firstname,"bookingno"=>$trip->Bookingno,"user_image"=>$userImage,"date_title"=>$date_title,"scheduled_date"=>date('M d, Y',strtotime($scheduled_date)),"start_time"=>$start_time,"end_time"=>$end_time);
        }
        /*****************/
        if($get_exp_list->num_rows() == 0 && $get_reservation_list->num_rows() ==0)
        {
            $json_encode = json_encode(array("status"=>1,"message"=>"No Experience Listing available","experience_listing"=>$experiencearr,"my_reservation"=>$my_reservation));
        }
        else
        {
            $json_encode = json_encode(array("status"=>1,"message"=>"Listing available","experience_listing"=>$experiencearr,"my_reservation"=>$my_reservation));
        }
        echo $json_encode;
    }
    /*guest experience payment using stripe*/
    public function experience_guest_pay_stripe()
    {
        $loginUserId = $this->input->post('user_id');
        $product_id = $this->input->post('exp_id');
        $currencycode = $this->input->post('exp_currencycode');
        $enquiryid = $this->input->post('enquiry_id');
        $user_currencycode = $this->input->post('user_currencycode');
        $date_id = $this->input->post('date_id');
        $indtotal = $this->input->post('exp_price');
        $currency_cron_id = $this->input->post('currency_cron_id');
        $cardNumber = $this->input->post('cardNumber');
        $CCExpMonth = $this->input->post('CCExpMonth');
        $CCExpYear = $this->input->post('CCExpYear');
        $creditCardIdentifier = $this->input->post('creditCardIdentifier');
        $lastFeatureInsertId = mt_rand();
        $condition =array('id' => $loginUserId);
        $userDetails = $this->mobile_model->get_all_details(USERS,$condition);
        $StripDetVal=unserialize(StripeDetails);
        $StripeVals=unserialize($StripDetVal['settings']);
        require_once('./stripe/lib/Stripe.php');
        $secret_key = $StripeVals['secret_key'];
        $publishable_key = $StripeVals['publishable_key'];
        $stripe = array("secret_key" => $secret_key,"publishable_key" => $publishable_key);
        \Stripe\Stripe::setApiKey($stripe['secret_key']);
        $stripeToken = \Stripe\Token::create(
            array(
                "card" => array(
                    "name" => $userDetails->row()->firstname,
                    "number" => $this->input->post('cardNumber'),
                    "exp_month" => $this->input->post('CCExpMonth'),
                    "exp_year" => $this->input->post('CCExpYear'),
                    "cvc" => $this->input->post('creditCardIdentifier')
                )
            )
        );
        $token = $stripeToken['id'];
        $amounts = round(currency_conversion($user_currencycode, 'USD', $this->input->post('total_price'), $currency_cron_id));
        try
        {
            $customer = \Stripe\Customer::create(array("card" => $token, "description" => "Product Purhcase for " . $this->config->item('email_title'), "email" => $this->input->post('email')));
            \Stripe\Charge::create(array("amount" => ($amounts*100), "currency" => 'USD', "customer" => $customer->id));
            $product = $this->mobile_model->get_all_details(EXPERIENCE, array('experience_id' => $product_id));
            $seller = $this->mobile_model->get_all_details(USERS, array('id' => $product->row()->user_id));
            $totalAmount = $this->input->post('total_price');
            if ($lastFeatureInsertId != '')
            {
                $delete = 'delete from ' . EXPERIENCE_BOOKING_PAYMENT . ' where dealCodeNumber = "' . $lastFeatureInsertId . '" and user_id = "' . $loginUserId . '" ';
                $this->mobile_model->ExecuteQuery($delete, 'delete');
                $dealCodeNumber = $lastFeatureInsertId;
            } else {
                $dealCodeNumber = mt_rand();
            }
            $insertIds = array();
            $now = date("Y-m-d H:i:s");
            $paymentArr = array('product_id' => $product_id, 'sell_id' => $product->row()->user_id, 'price' => $totalAmount,
                'indtotal'   => $indtotal, 'sumtotal' => $totalAmount,
                'user_id'    => $loginUserId,
                'created'    => $now, 'dealCodeNumber' => $dealCodeNumber, 'status' => 'Pending', 'shipping_status' => 'Pending', 'total' => $totalAmount,'status' => 'Paid','shipping_status' => 'Pending',
                'EnquiryId'  => $enquiryid, 'inserttime' => NOW(), 'currency_code' => $user_currencycode);
            $this->mobile_model->simple_insert(EXPERIENCE_BOOKING_PAYMENT, $paymentArr);
            $insertIds[] = $this->db->insert_id();
            /*$paymtdata = array('randomNo' => $dealCodeNumber, 'randomIds' => $insertIds, 'EnquiryId' => $enquiryid);
      $this->session->set_userdata($paymtdata);*/
            $this->mobile_model->edit_expbooking(array('booking_status' => 'Booked'), array('id' => $enquiryid));
            /*$lastFeatureInsertId = $this->session->userdata('randomNo');*/
            /*commission tracking*/
            $paidAmount = $couponUsedAmount = $walletUsedAmount = '0.00';
            $UserNo = $loginUserId;
            $DealCodeNo = $lastFeatureInsertId;
            $update_pay_type = $token;
            $transId = $token;
            $Pray_Email = '';
            $EnquiryUpdate = $this->mobile_model->get_all_details(EXPERIENCE_BOOKING_PAYMENT, array('dealCodeNumber' => $DealCodeNo));
            $eprd_id = $EnquiryUpdate->row()->product_id;
            $eInq_id = $EnquiryUpdate->row()->EnquiryId;
            $totalAmt = $EnquiryUpdate->row()->total;
            $booking_cur = $EnquiryUpdate->row()->currency_code;
            $condition1 = array('user_id' => $UserNo, 'prd_id' => $eprd_id, 'id' => $eInq_id);
            $dataArr1 = array('booking_status' => 'Booked');
            $this->mobile_model->update_details(EXPERIENCE_ENQUIRY, $dataArr1, $condition1);
            $condition = array('status' => 'Active', 'seo_tag' => 'experience_listing');
            $service_tax_host = $this->mobile_model->get_all_details(COMMISSION, $condition);
            $this->data['host_tax_type'] = $service_tax_host->row()->promotion_type;
            $orderDetails = $this->mobile_model->get_all_details(EXPERIENCE_ENQUIRY, array('id' => $eInq_id));
            $userDetails = $this->mobile_model->get_all_details(USERS, array('id' => $orderDetails->row()->renter_id));
            $guest_fee = $orderDetails->row()->serviceFee;
            $netAmount = $orderDetails->row()->totalAmt - $orderDetails->row()->serviceFee;
            if ($this->data['host_tax_type'] == 'flat'){ $host_fee = 0; } else { $host_fee = 0; }
            $payable_amount = $netAmount - $host_fee;
            $data1 = array('host_email' => $userDetails->row()->email, 'booking_no' => $orderDetails->row()->Bookingno, 'total_amount' => $orderDetails->row()->totalAmt, 'guest_fee' => $guest_fee, 'host_fee' => $host_fee, 'payable_amount' => $payable_amount, 'exp_cancel_percentage' => $orderDetails->row()->exp_cancel_percentage, 'subtotal' => $orderDetails->row()->subTotal, 'booking_walletUse' => $walletUsedAmount);
            $chkQry = $this->mobile_model->get_all_details(EXP_COMMISSION_TRACKING, array('booking_no' => $orderDetails->row()->Bookingno));
            if ($chkQry->num_rows() == 0)
            {
                $this->mobile_model->simple_insert(EXP_COMMISSION_TRACKING, $data1);
            }
            else
            {
                $this->mobile_model->update_details(EXP_COMMISSION_TRACKING, $data1, array('booking_no' => $orderDetails->row()->Bookingno));
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Success! Payment Successfully","currencycode" =>$user_currencycode,"total_price" =>floatval($orderDetails->row()->totalAmt),"booking_no"=>$orderDetails->row()->Bookingno));
            echo $json_encode;
            exit();
        } catch (Exception $e) {
            $error = $e->getMessage();
            $this->session->set_userdata('payment_error', $error);
            $json_encode = json_encode(array("status"=>0,"message"=>"failure","error"=>$error));
            echo $json_encode;
            exit;
        }
    }
    /*guest experience payment using creditcard*/
    public function experience_guest_pay_creditcard()
    {
        $loginUserId = $this->input->post('user_id');
        $product_id = $this->input->post('exp_id');
        $cvv = md5($this->input->post('creditCardIdentifier'));
        $dataArr = array('cvv' => $cvv);
        $currency_code = $this->input->post('currencycode');
        $user_currencycode = $this->input->post('user_currencycode');
        $lastFeatureInsertId = mt_rand();
        $condition = array('id' => $loginUserId);
        $userDetails = $this->mobile_model->get_all_details(USERS, $condition);
        if ($this->input->post('creditvalue') == 'authorize')
        {
            $Auth_Details = unserialize(API_LOGINID);
            $Auth_Setting_Details = unserialize($Auth_Details['settings']);
            error_reporting(-1);
            define("AUTHORIZENET_API_LOGIN_ID", $Auth_Setting_Details['merchantcode']);
            define("AUTHORIZENET_TRANSACTION_KEY", $Auth_Setting_Details['merchantkey']);
            define("API_MODE", $Auth_Setting_Details['mode']);
            if (API_MODE == 'sandbox') {
                define("AUTHORIZENET_SANDBOX", true);
            } else {
                define("AUTHORIZENET_SANDBOX", false);
            }
            define("TEST_REQUEST", "FALSE");
            require_once './authorize/autoload.php';
            $transaction = new AuthorizeNetAIM;
            $transaction->setSandbox(AUTHORIZENET_SANDBOX);
            $payable_amount = currency_conversion($this->input->post('user_currencycode'), 'USD', $this->input->post('total_price'),$this->input->post('currency_cron_id'));
            $transaction->setFields(array('amount' => $payable_amount, 'card_num' => $this->input->post('cardNumber'), 'exp_date' => $this->input->post('CCExpMonth') . '/' . $this->input->post('CCExpYear'), 'first_name' => $userDetails->row()->firstname, 'last_name' => $userDetails->row()->lastname, 'address' => $userDetails->row()->address, 'city' => $userDetails->row()->city, 'state' => $userDetails->row()->state, 'country' => $userDetails->row()->country, 'phone' => $userDetails->row()->phone_no, 'email' => $userDetails->row()->email, 'card_code' => $this->input->post('creditCardIdentifier'),));
            $response = $transaction->authorizeAndCapture();
            if ($response->approved != '')
            {
                $product = $this->mobile_model->get_all_details(EXPERIENCE, array('experience_id' => $product_id));
                $seller = $this->mobile_model->get_all_details(USERS, array('id' => $product->row()->user_id));
                $totalAmnt = $this->input->post('total_price');
                $enquiryid = $this->input->post('enquiry_id');
                $indtotal = $this->input->post('exp_price');
                if ($lastFeatureInsertId != '') {
                    $delete = 'delete from ' . EXPERIENCE_BOOKING_PAYMENT . ' where dealCodeNumber = "' . $lastFeatureInsertId . '" and user_id = "' . $loginUserId . '" ';
                    $this->mobile_model->ExecuteQuery($delete, 'delete');
                    $dealCodeNumber = $lastFeatureInsertId;
                } else {
                    $dealCodeNumber = mt_rand();
                }
                $insertIds = array();
                $now = date("Y-m-d H:i:s");
                $paymentArr = array('product_id' => $product_id, 'sell_id' => $product->row()->user_id, 'price' => $totalAmnt, 'indtotal' => $indtotal, 'sumtotal' => $totalAmnt, 'user_id' => $loginUserId, 'created' => $now, 'dealCodeNumber' => $dealCodeNumber, 'status' => 'Paid', 'shipping_status' => 'Pending', 'total' => $totalAmnt, 'EnquiryId' => $enquiryid, 'inserttime' => $now, 'currency_code' => $user_currencycode);
                $this->mobile_model->simple_insert(EXPERIENCE_BOOKING_PAYMENT, $paymentArr);
                $insertIds[] = $this->db->insert_id();
                $paymtdata = array('randomNo' => $dealCodeNumber, 'randomIds' => $insertIds);
                $this->session->set_userdata($paymtdata, $currency_code);
                $dataArr = array('booking_status' => 'Booked');
                $condition = array('id' => $enquiryid);
                $this->mobile_model->edit_expbooking( $dataArr, $condition);
                $lastFeatureInsertId = $this->session->userdata('randomNo');
                /*commission tracking*/
                $paidAmount = $couponUsedAmount = $walletUsedAmount = '0.00';
                $UserNo = $loginUserId;
                $DealCodeNo = $lastFeatureInsertId;
                $update_pay_type = $response->transaction_id;
                $transId = $response->transaction_id;
                $Pray_Email = '';
                $EnquiryUpdate = $this->mobile_model->get_all_details(EXPERIENCE_BOOKING_PAYMENT, array('dealCodeNumber' => $DealCodeNo));
                $eprd_id = $EnquiryUpdate->row()->product_id;
                $eInq_id = $EnquiryUpdate->row()->EnquiryId;
                $totalAmt = $EnquiryUpdate->row()->total;
                $booking_cur = $EnquiryUpdate->row()->currency_code;
                $condition1 = array('user_id' => $UserNo, 'prd_id' => $eprd_id, 'id' => $eInq_id);
                $dataArr1 = array('booking_status' => 'Booked');
                $this->mobile_model->update_details(EXPERIENCE_ENQUIRY, $dataArr1, $condition1);
                /*$condition = array('status' => 'Active', 'seo_tag' => 'experience_listing');
        $service_tax_host = $this->mobile_model->get_all_details(COMMISSION, $condition);
        $this->data['host_tax_type'] = $service_tax_host->row()->promotion_type;*/ /*commission is inactive*/
                $orderDetails = $this->mobile_model->get_all_details(EXPERIENCE_ENQUIRY, array('id' => $eInq_id));
                $userDetails = $this->mobile_model->get_all_details(USERS, array('id' => $orderDetails->row()->renter_id));
                $guest_fee = $orderDetails->row()->serviceFee;
                $netAmount = $orderDetails->row()->totalAmt - $orderDetails->row()->serviceFee;
                /*if ($this->data['host_tax_type'] == 'flat'){ $host_fee = 0; } else { $host_fee = 0; }*/
                $host_fee = 0;
                $payable_amount = $netAmount - $host_fee;
                $data1 = array('host_email' => $userDetails->row()->email, 'booking_no' => $orderDetails->row()->Bookingno, 'total_amount' => $orderDetails->row()->totalAmt, 'guest_fee' => $guest_fee, 'host_fee' => $host_fee, 'payable_amount' => $payable_amount, 'exp_cancel_percentage' => $orderDetails->row()->exp_cancel_percentage, 'subtotal' => $orderDetails->row()->subTotal, 'booking_walletUse' => $walletUsedAmount);
                $chkQry = $this->mobile_model->get_all_details(EXP_COMMISSION_TRACKING, array('booking_no' => $orderDetails->row()->Bookingno));
                if ($chkQry->num_rows() == 0)
                {
                    $this->mobile_model->simple_insert(EXP_COMMISSION_TRACKING, $data1);
                }
                else
                {
                    $this->mobile_model->update_details(EXP_COMMISSION_TRACKING, $data1, array('booking_no' => $orderDetails->row()->Bookingno));
                }
                $json_encode = json_encode(array("status"=>1,"message"=>"Success! Payment Successfully","currencycode" =>$user_currencycode,"total_price" =>floatval($orderDetails->row()->totalAmt),"booking_no"=>$orderDetails->row()->Bookingno));
                echo $json_encode;
                exit();
            }
            else
            {
                $json_encode = json_encode(array("status"=>0,"message"=>"failure","error"=>$response->response_reason_text));
                echo $json_encode;
                exit;
            }
        }
    }
    public function experience_guest_pay_paypal()
    {
        $transId = $this->input->post('txn_id');
        $enquiryid = $this->input->post('enquiry_id');
        $product_id = $this->input->post('exp_id');
        $product = $this->mobile_model->get_all_details(EXPERIENCE, array('experience_id' => $product_id));
        $totalAmount = $this->input->post('total_price');
        $user_currencycode = $this->input->post('user_currencycode');
        $host_id = $this->input->post('host_id');
        $loginUserId = $UserNo = $this->input->post('user_id');
        $Pray_Email = $this->input->post('payer_email');
        $user_currency_code = $this->input->post('currency_code');
        $indtotal = $product->row()->price;
        $tax = 0;
        $lastFeatureInsertId = mt_rand();
        if ($transId != '')
        {
            if ($lastFeatureInsertId != '') {
                $delete = 'delete from ' . EXPERIENCE_BOOKING_PAYMENT . ' where dealCodeNumber = "' . $lastFeatureInsertId . '" and user_id = "' . $loginUserId . '" and status != "Paid"  ';
                $this->mobile_model->ExecuteQuery($delete, 'delete');
                $dealCodeNumber = $lastFeatureInsertId;
            } else {
                $dealCodeNumber = mt_rand();
            }
            $insertIds = array();
            $now = date("Y-m-d H:i:s");
            $paymentArr = array('product_id' => $product_id, 'price' => $totalAmount,'indtotal' => $indtotal,'tax' => $tax, 'sumtotal' => $totalAmount, 'user_id'    => $loginUserId, 'sell_id' => $host_id, 'created' => $now, 'dealCodeNumber' => $dealCodeNumber, 'status' => 'Paid', 'shipping_status' => 'Pending', 'total'      => $totalAmount, 'EnquiryId' => $enquiryid, 'inserttime' => NOW(), 'payment_type' => 'Paypal', 'currency_code' => $user_currencycode);
            $this->mobile_model->simple_insert(EXPERIENCE_BOOKING_PAYMENT, $paymentArr);
            $insertIds[] = $this->db->insert_id();
            /* $paymtdata = array('randomNo' => $dealCodeNumber, 'randomIds' => $insertIds);
     $this->session->set_userdata($paymtdata);*/
            $EnquiryUpdate = $this->mobile_model->get_all_details(EXPERIENCE_BOOKING_PAYMENT, array('dealCodeNumber' => $dealCodeNumber));
            $eprd_id = $EnquiryUpdate->row()->product_id;
            $eInq_id = $EnquiryUpdate->row()->EnquiryId;
            $totalAmt = $EnquiryUpdate->row()->total;
            $booking_cur = $EnquiryUpdate->row()->currency_code;
            $paidAmount = $couponUsedAmount = $walletUsedAmount = '0.00';
            $condition1 = array('user_id' => $UserNo, 'prd_id' => $eprd_id, 'id' => $eInq_id);
            $dataArr1 = array('booking_status' => 'Booked');
            $this->mobile_model->update_details(EXPERIENCE_ENQUIRY, $dataArr1, $condition1);
            $orderDetails = $this->mobile_model->get_all_details(EXPERIENCE_ENQUIRY, array('id' => $eInq_id));
            $userDetails = $this->mobile_model->get_all_details(USERS, array('id' => $orderDetails->row()->renter_id));
            $guest_fee = $orderDetails->row()->serviceFee;
            $netAmount = $orderDetails->row()->totalAmt - $orderDetails->row()->serviceFee;
            if ($this->data['host_tax_type'] == 'flat'){ $host_fee = 0; } else { $host_fee = 0; }
            $payable_amount = $netAmount - $host_fee;
            $data1 = array('host_email' => $userDetails->row()->email, 'booking_no' => $orderDetails->row()->Bookingno, 'total_amount' => $orderDetails->row()->totalAmt, 'guest_fee' => $guest_fee, 'host_fee' => $host_fee, 'payable_amount' => $payable_amount, 'exp_cancel_percentage' => $orderDetails->row()->exp_cancel_percentage, 'subtotal' => $orderDetails->row()->subTotal, 'booking_walletUse' => $walletUsedAmount);
            $chkQry = $this->mobile_model->get_all_details(EXP_COMMISSION_TRACKING, array('booking_no' => $orderDetails->row()->Bookingno));
            if ($chkQry->num_rows() == 0)
            {
                $this->mobile_model->simple_insert(EXP_COMMISSION_TRACKING, $data1);
            }
            else
            {
                $this->mobile_model->update_details(EXP_COMMISSION_TRACKING, $data1, array('booking_no' => $orderDetails->row()->Bookingno));
            }
            $json_encode = json_encode(array("status"=>1,"message"=>"Success! Payment Successfully","currencycode" =>$user_currencycode,"total_price" =>floatval($orderDetails->row()->totalAmt),"booking_no"=>$orderDetails->row()->Bookingno));
            echo $json_encode;
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"failure"));
            echo $json_encode;
            exit;
        }
    }
    public function getDatesFromRange($start, $end)
    {
        $dates = array($start);
        while(end($dates) < $end){
            $dates[] = date('Y-m-d', strtotime(end($dates).' +1 day'));
        }
        return $dates;
    }
    public function experience_host_pay_stripe()
    {
        $product_id = $this->input->post('exp_id');
        $host_id = $this->input->post('host_id');
        $condition =array('id' => $host_id);
        $userDetails = $this->mobile_model->get_all_details(USERS,$condition);
        $host_payment = $this->mobile_model->get_all_details(EXPERIENCE_LISTING_PAYMENT, array('product_id' => $product_id, 'host_id' => $host_id));
        if ($host_payment->num_rows() > 0)
        {
            $delete_failed_payment = 'DELETE FROM ' . EXPERIENCE_LISTING_PAYMENT . ' WHERE product_id=' . $product_id . ' AND host_id=' . $host_id;
            $this->mobile_model->ExecuteQuery($delete_failed_payment);
        }
        $last_cron_id = $this->db->select('*')->from('fc_currency_cron')->order_by('curren_id','desc')->limit(1)->get();
        $admin = $this->user_model->get_all_details(ADMIN, array('admin_type' => 'super'));
        $data = $admin->row();
        $admin_currencyCode = trim($data->admin_currencyCode);
        /* Start - Get Experience currency code, compare with admin currency**/
        $getExpDetails = $this->mobile_model->get_all_details(EXPERIENCE, array('experience_id' => $product_id));
        $theCurrency = $getExpDetails->row()->currency;
        if ($theCurrency != $admin_currencyCode) {
            $unit_price = convertCurrency($admin_currencyCode, $theCurrency, 1, $last_cron_id->row()->curren_id);
        } else {
            $unit_price = 1;
        }
        $paymentArr = array('product_id' => $product_id, 'amount' => $this->input->post('hosting_price'), 'host_id' => $host_id, 'payment_status' => 'Pending', 'payment_type' => $this->input->post('payment_method'),
            'currency_code' => $admin_currencyCode, 'currency_code_host' => $theCurrency, 'unitPerCurrencyHost' => $unit_price, 'commission' => $this->input->post('commission'), 'commission_type' => $this->input->post('commission_type'), 'hosting_price' => $this->input->post('hosting_price'));
        $this->mobile_model->simple_insert(EXPERIENCE_LISTING_PAYMENT, $paymentArr);
        $totalAmount = $this->input->post('hosting_price');
        $StripDetVal=unserialize(StripeDetails);
        $StripeVals=unserialize($StripDetVal['settings']);
        require_once('./stripe/lib/Stripe.php');
        $secret_key = $StripeVals['secret_key'];
        $publishable_key = $StripeVals['publishable_key'];
        $stripe = array("secret_key" => $secret_key,"publishable_key" => $publishable_key);
        \Stripe\Stripe::setApiKey($stripe['secret_key']);
        $stripeToken = \Stripe\Token::create(
            array(
                "card" => array(
                    "name" => $userDetails->row()->firstname,
                    "number" => $this->input->post('cardNumber'),
                    "exp_month" => $this->input->post('CCExpMonth'),
                    "exp_year" => $this->input->post('CCExpYear'),
                    "cvc" => $this->input->post('creditCardIdentifier')
                )
            )
        );
        $token = $stripeToken['id'];
        $amounts = round($totalAmount * 100);
        try {
            $customer = \Stripe\Customer::create(array("card" => $token, "description" => "Experience Listing Purhcase for " . $this->config->item('email_title'), "email" => $this->input->post('email')));
            \Stripe\Charge::create(array("amount" => $amounts,
                "currency" => $admin_currencyCode, "customer" => $customer->id));
            $bookingId = 'XP' . time();
            $this->data['bookingId'] = $bookingId;
            $dataArr = array('payment_status' => 'paid');
            $condition = array('product_id' => $product_id);
            $this->mobile_model->update_details(EXPERIENCE_LISTING_PAYMENT, $dataArr, $condition);
            $json_encode = json_encode(array("status"=>1,"message"=>"Successfully Paid for yor Experience","currencycode" =>$admin_currencyCode,"total_price" =>floatval($totalAmount)));
            echo $json_encode;
            exit();
        } catch (Exception $e) {
            $e =  $e->getMessage();
            $json_encode = json_encode(array("status"=>0,"message"=>"payment unsuccessful","code"=>$e));
            echo $json_encode;
            exit();
        }
    }
    public function experience_host_pay_paypal()
    {
        $product_id = $this->input->post('exp_id');
        $price = $this->input->post('hosting_price');
        $host_id = $this->input->post('host_id');
        $commission = $this->input->post('commission');
        $commission_type = $this->input->post('commission_type');
        $transId = $this->input->post('txn_id');
        $payer_email = $this->input->post('payer_email');
        if($transId != "")
        {
            $host_payment=$this->mobile_model->get_all_details(EXPERIENCE_LISTING_PAYMENT,array('product_id' => $product_id,'host_id'=>$host_id));
            if($host_payment->num_rows() > 0)
            {
                $delete_failed_payment='DELETE FROM '.EXPERIENCE_LISTING_PAYMENT.' WHERE product_id='.$product_id.' AND host_id='.$host_id;
                $this->mobile_model->ExecuteQuery($delete_failed_payment);
            }
            $product = $this->mobile_model->get_all_details(EXPERIENCE,array('experience_id' => $product_id));
            $seller = $this->mobile_model->get_all_details(USERS,array('id' => $product->row()->user_id));
            $this->load->library('paypal_class');
            $item_name = $this->config->item('email_title').' Experiences';
            $admin=$this->mobile_model->get_all_details (ADMIN,array('admin_type'=>'super'));
            $data=$admin->row();
            $admin_currencyCode=trim($data->admin_currencyCode);
            $getExpDetails=$this->mobile_model->get_all_details(EXPERIENCE,array('experience_id'=>$product_id));
            $theCurrency=$getExpDetails->row()->currency;
            if($theCurrency != $admin_currencyCode)
            {
                $unit_price=convertCurrency($admin_currencyCode,$theCurrency,1);
            }
            else
            {
                $unit_price=1;
            }
            $quantity = 1;
            $insertIds = array();
            $now = date("Y-m-d H:i:s");
            $paymentArr = array('product_id' => $product_id, 'amount' => $price, 'host_id' => $host_id, 'payment_status' => 'Pending', 'currency_code_host' => $theCurrency, 'unitPerCurrencyHost' => $unit_price, 'payment_type' => 'paypal', 'currency_code' => $admin_currencyCode, 'commission' => $commission,'commission_type' => $commission_type, 'hosting_price' => $price );
            $this->mobile_model->simple_insert(EXPERIENCE_LISTING_PAYMENT,$paymentArr);
            $insertIds[]=$this->db->insert_id();
            $paymtdata = array(
                'randomNo' => $dealCodeNumber,
                'randomIds' => $insertIds
            );
            $this->session->set_userdata($paymtdata);
            $bookingId = 'XP' . time();
            $dataArr = array('paypal_txn_id' => $transId,'paypal_email' => $payer_email,'payment_status'=>'paid', 'bookingId'=>$bookingId);
            $condition=array('product_id'=>$product_id);
            $this->mobile_model->update_details(EXPERIENCE_LISTING_PAYMENT, $dataArr, $condition);
            $json_encode = json_encode(array("status"=>1,"message"=>"Payment Made Successfull, please wait for Approval to list your Product"));
            echo $json_encode;
            exit();
        }
        else
        {
            $json_encode = json_encode(array("status"=>0,"message"=>"payment unsuccessful"));
            echo $json_encode;
            exit();
        }
    }
    public function payment_gateway_status()
    {
        $check_paypal_enabled = $this->db->select('id')->where('gateway_name','Paypal IPN')->where('status','Enable')->get(PAYMENT_GATEWAY)->num_rows();
        if($check_paypal_enabled == 1){ $paypal_status = true; }else{ $paypal_status = false; }
        $check_stripe_enabled = $this->db->select('id')->where('gateway_name','Stripe')->where('status','Enable')->get(PAYMENT_GATEWAY)->num_rows();
        if($check_stripe_enabled == 1){ $stripe_status = true; }else{ $stripe_status = false; }
        $check_credit_enabled = $this->db->select('id')->where('gateway_name','Credit Card')->where('status','Enable')->get(PAYMENT_GATEWAY)->num_rows();
        if($check_credit_enabled == 1){ $creditcard_status = true; }else{ $creditcard_status = false; }
        $check_paymaya_enabled = $this->db->select('id')->where('gateway_name','PayMaya')->where('status','Enable')->get(PAYMENT_GATEWAY)->num_rows();
        if($check_paymaya_enabled == 1){ $paymaya_status = true; }else{ $paymaya_status = false; }
        echo $json_decode = json_encode(array("status"=>1,"message"=>$this->dta_found,"paypal_status"=>$paypal_status,"stripe_status"=>$stripe_status,"creditcard_status"=>$creditcard_status,"paymaya_status"=>$paymaya_status));
        // exit();
    }
    /*Test Part*/
    public function sendGCM($message, $id) {
        $id =
        $url = 'https://fcm.googleapis.com/fcm/send';
        $fields = array (
            'to' => "cS2uObgsskc:APA91bHgpR8S3hRoZxhz58GA1sC5M5DQo-j2dohbwO2xUtP2lE0lBxdY60L-F5LLWP-Xd5HOJthtQjx0bcQ4Fe78U8Tntq6lY-Cnb97iLsI4_ojsg-XSuGwUzv847KZJEqepaoW53idA",
            'notification' => array (
                "title" => "Test FCM",
                "text"=>"hgadhghdghagd",
                "click_action"=>"YOUR_MESSAGES"
            )
        );
        $fields = json_encode ( $fields );
        $headers = array (
            'Authorization: key=' . "AAAA7kKYps0:APA91bHKkXrAsYZcjLgV_ogS0h60y92onKmlAmfZHkWeOoTuQjG0AtoiQHsJt9LIKiYcNskAkFHH-fVumivkZnswaYXRDewrZwSyTLrFZOkq7M_9X8RuDjXLfrcgUEseUl_A9mMVT1TI",
            'Content-Type: application/json'
        );
        $ch = curl_init ();
        curl_setopt ( $ch, CURLOPT_URL, $url );
        curl_setopt ( $ch, CURLOPT_POST, true );
        curl_setopt ( $ch, CURLOPT_HTTPHEADER, $headers );
        curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, true );
        curl_setopt ( $ch, CURLOPT_POSTFIELDS, $fields );
        $result = curl_exec ( $ch );
        echo $result;
        curl_close ( $ch );
    }

    /*USER CANCEL PROPERTY*/
    public function mobile_property_cancel()
    {
        $rental_type = $this->input->post('base_id');
        $prd_id = $this->input->post('property_id');
        $bookingNo = $this->input->post('bookingno');
        $cancel_percentage = $this->input->post('cancel_percentage');
        $user_id = $this->input->post('user_id');
        $disputer_id = $this->input->post('disputer_id');
        $message = $this->input->post('message');
        $email = $this->input->post('email');
        /* echo $rental_type.'-'.$prd_id.'-'.$bookingNo.'-'.$cancel_percentage.'-'.$user_id.'-'.$disputer_id.'-'.$message.'-'.$email; exit();*/
        if($disputer_id != "" && $user_id != "" && $prd_id != "" && $bookingNo != "" &&  $message != "" && $rental_type != "" && $email != "")
        {
            $check_already_cancel = "SELECT * FROM fc_dispute WHERE booking_no = '".$bookingNo."' AND prd_id = '".$prd_id."' AND cancel_status = 1";
            $excute = $this->mobile_model->ExecuteQuery($check_already_cancel);
            if($excute->num_rows() > 0)
            {
                echo json_encode(array('status'=>0,"message"=>"Booking Already Cancelled"));
                exit;
            }
            $excludeArr = array();
            $dataArr = array('prd_id' => $prd_id, 'cancellation_percentage' => $cancel_percentage, 'message' => $message, 'user_id' => $user_id, 'booking_no' => $bookingNo, 'email' => $email, 'disputer_id' => $disputer_id, 'cancel_status' => 1);

            /* Mail to Host Start*/
            $newsid = '56';
            $template_values = $this->mobile_model->get_newsletter_template_details($newsid);
            if ($template_values['sender_name'] == '' && $template_values['sender_email'] == '') {
                $sender_email = $this->data['siteContactMail'];
                $sender_name = $this->data['siteTitle'];
            } else {
                $sender_name = $template_values['sender_name'];
                $sender_email = $template_values['sender_email'];
            }
            $condition = array('id' => $disputer_id);
            $hostDetails = $this->mobile_model->get_all_details(USERS, $condition);
            $uid = $hostDetails->row()->id;
            $hostname = $hostDetails->row()->user_name;
            $host_email = $hostDetails->row()->email;
            $condition = array('id' => $user_id);
            $custDetails = $this->mobile_model->get_all_details(USERS, $condition);
            $cust_name = $custDetails->row()->user_name;
            $condition = array('id' => $prd_id);
            $prdDetails = $this->mobile_model->get_all_details(PRODUCT, $condition);
            $prd_title = $prdDetails->row()->product_title;
            $reason = $this->input->post('message');
            $booking_no = $bookingNo;
            $email_values = array('from_mail_id' => $sender_email, 'to_mail_id' => $host_email, 'subject_message' => $template_values ['news_subject'], 'body_messages' => $message);
            $reg = array('logo' => $this->data['logo'],'host_name' => $hostname, 'cust_name' => $cust_name, 'prd_title' => $prd_title, 'reason' => $reason, 'booking_no' => $booking_no);
            $message = $this->load->view('newsletter/ToHostCancelBooking' . $newsid . '.php', $reg, TRUE);

            $this->load->library('email', $config);
            $this->email->from($email_values['from_mail_id'], $sender_name);
            $this->email->to($email_values['to_mail_id']);
            $this->email->subject($email_values['subject_message']);
            $this->email->set_mailtype("html");
            $this->email->message($message);
            try {
                $this->email->send();
                $returnStr ['msg'] = 'Successfully registered';
                $returnStr ['success'] = '1';
            } catch (Exception $e) {
                /*echo $e->getMessage();*/
            }

            $this->mobile_model->add_cancellation($dataArr);

            //Start - Update Rental enquiry and commission tracking.
            //$UpdateArr=array('cancelled'=>'Yes');
            $UpdateArr=array('cancelled'=>'No');
            $Condition=array('prd_id'=>$prd_id,
                'user_id'=>$user_id,
                'Bookingno'=>$bookingNo);
            $this->mobile_model->update_details(RENTALENQUIRY,$UpdateArr,$Condition);

            $getEnquiryDet=$this->mobile_model->get_all_details(RENTALENQUIRY,array('Bookingno'=>$bookingNo));
            $TheSubTot=$getEnquiryDet->row()->subTotal;//200
            $SecDeposit=$getEnquiryDet->row()->secDeposit;//30
            $CancelPercentage=$getEnquiryDet->row()->cancel_percentage;//50
            $CancelPercentAmt=$TheSubTot/100*$CancelPercentage;
            $cancel_amount_toGuest=$TheSubTot-$CancelPercentAmt;

            if($getEnquiryDet->row()->cancel_percentage!="100"){ //For Moderate,Flexible
                $CancelAmountWithSecDeposit=$cancel_amount_toGuest+$SecDeposit;
            }else{  //For Strict
                $CancelAmountWithSecDeposit=$SecDeposit;
            }

            $UpdateCommissionArr=array('paid_cancel_amount'=>$CancelAmountWithSecDeposit);
            $ConditionCommission=array('booking_no'=>$bookingNo);
            $this->mobile_model->update_details(COMMISSION_TRACKING,$UpdateCommissionArr,$ConditionCommission);

            echo json_encode(array("status"=>1,"message"=>$this->succ/*,"dispute_id"=>intval($dispute_id)*/),JSON_PRETTY_PRINT);
            exit;
        }
        else
        {
            echo json_encode(array("status"=>0,"message"=>$this->parm_missing),JSON_PRETTY_PRINT);
            exit;
        }
    }
    /* invoice added */
    public function invoice(){

        $id = $this->input->post('booking_no');
        $user_id= $this->input->post('user_id');
        $user_currency_code = $this->input->post('currency_code');
        $paid_currency_details = $this->mobile_model->get_all_details ( CURRENCY, array('currency_type' => $user_currency_code) );
        $currencySymbol = $paid_currency_details->row()->currency_symbols;
        $user_res = $this->mobile_model->get_all_details(USERS, array('id' => $user_id));
        $res = array();
        if ($user_id != '' && $user_res->num_rows() > 0) {

            $Invoicetmp = $this->mobile_model->get_all_details(RENTALENQUIRY, array('Bookingno' => $id));
            $inv_data = $Invoicetmp->row();
            //$res['booking_details']=$Invoicetmp->row_array();
            $res['numofdates']=$inv_data->numofdates;
            $res['NoofGuest']=$inv_data->NoofGuest;
            $res['product_unit_price']=$inv_data->prd_price;
            $res['payment_option']=$inv_data->choosed_option;
            $res['approval']=$inv_data->approval;
            $res['booking_status']=$inv_data->booking_status;
            $res['cancelled_status']=$inv_data->cancelled;
            $res['currencycode']=$inv_data->currencycode;// property
            //$res['user_currencycode']=$inv_data->user_currencycode;

            $res['currency_code']=$user_currency_code;

            $user_currencycode = $inv_data->currencycode;
            $user_buked_currency = $inv_data->user_currencycode;
            $unitprice = $inv_data->unitPerCurrencyUser;
            $eId = $inv_data->id;
            $transactionid = $this->mobile_model->get_all_details(PAYMENT, array('EnquiryId' => $eId));

            $payment_data = $transactionid->row();

            if (!empty($payment_data) && !empty($inv_data)) {
                // $res['Invoicetmp'] = $Invoicetmp;
                $res['booking_no'] = $transid = $inv_data->Bookingno;
                $productvalue = $this->mobile_model->get_all_details(PRODUCT, array('id' => $inv_data->prd_id));
                //$res['product_details']=$productvalue->row_array();
                $res['product_title']=($productvalue->row()->product_title) ? $productvalue->row()->product_title : '';
                if ($inv_data->secDeposit != 0) {
                    $res['securityDepositeTemp']=$securityDepositeTemp= $inv_data->secDeposit;
                }else{
                    $res['securityDepositeTemp']=$securityDepositeTemp=0;
                }
                $productaddress= $this->mobile_model->get_all_details(PRODUCT_ADDRESS_NEW, array('productId' => $inv_data->prd_id));
                //$res['productaddress'] =$productaddress->row_array();
                $productaddr=$productaddress->row();
                if(!empty($productaddr)) {
                    $res['address'] = $productaddr->address;
                    $res['street'] = $productaddr->street;
                    $res['area'] = $productaddr->area;
                    $res['location'] = $productaddr->location;
                    $res['city'] = $productaddr->city;
                    $res['state'] = $productaddr->state;
                    $res['country'] = $productaddr->country;
                }

                $res['product_id'] = $inv_data->prd_id;
                $res['checkindate'] = date('d-M-Y', strtotime($inv_data->checkin));
                $res['checkoutdate'] = date('d-M-Y', strtotime($inv_data->checkout));
                $res['TotalAmt_temp'] = ($inv_data->totalAmt) - ($inv_data->serviceFee);
                //SECURITY DEPOSITE
                if ($user_buked_currency == $user_currency_code) {
                    $res['securityDeposite'] = number_format($securityDepositeTemp, 2);
                } else {
                    $price = currency_conversion($user_buked_currency, $user_currency_code, $securityDepositeTemp, $inv_data->currency_cron_id);
                    $res['securityDeposite'] = number_format($price, 2);
                }
                //SUB TOTAL
                if ($user_buked_currency == $user_currency_code) {
                    $res['TotalwithoutService'] = number_format($inv_data->subTotal, 2);
                } else {
                    $price = currency_conversion($user_buked_currency, $user_currency_code, $inv_data->subTotal, $inv_data->currency_cron_id);
                    $res['TotalwithoutService'] = number_format($price, 2);
                }
                //EOF SUB TOTAL

                $service= $this->user_model->get_all_details(COMMISSION, array('id' => 2, 'status' => 'Active'));
                //$res['service'] = $service->row_array();
                //SERVICE FEE
                if ($user_buked_currency == $user_currency_code) {
                    $res['servicefee'] = number_format($inv_data->serviceFee, 2);
                } else {
                    $price = currency_conversion($user_buked_currency, $user_currency_code, $inv_data->serviceFee, $inv_data->currency_cron_id);
                    $res['servicefee'] = number_format($price, 2);
                }
                //$this->data['TotalAmt'] = $this->data['TotalwithoutService'] + $this->data['servicefee'] + $this->data['securityDeposite'];
                if ($user_buked_currency == $user_currency_code) {
                    $res['TotalAmt'] = number_format($inv_data->totalAmt, 2);
                } else {
                    $price = currency_conversion($user_buked_currency, $user_currency_code, $inv_data->totalAmt, $inv_data->currency_cron_id);
                    $res['TotalAmt'] = number_format($price, 2);
                }


                //$res['gtotalAmt'] = number_format(pastDateCurrency($this->data['product_id'], $inv_data->dateAdded, $productvalue->row()->price), 2);

                if ($payment_data->is_coupon_used == 'Yes') {
                    $couponDiscount = $payment_data->total_amt - $payment_data->discount;
                    $res['couponDiscount'] = number_format($couponDiscount, 2);
                    if ($user_buked_currency != $user_currency_code) {
                        $res['couponDiscount'] = number_format(currency_conversion($user_buked_currency, $user_currency_code, $couponDiscount, $inv_data->currency_cron_id), 2);
                    }
                    $res['is_coupon_used'] = $payment_data->is_coupon_used;
                } else {
                    $res['couponDiscount'] = '0.00';
                    $res['is_coupon_used'] = 'No';
                }

                if ($payment_data->is_wallet_used == 'Yes') {

                    $wallet_Amount = $payment_data->wallet_Amount;

                    if ($user_buked_currency != $user_currency_code) {
                        $res['wallet_Amount'] = number_format(currency_conversion($user_buked_currency, $user_currency_code, $wallet_Amount, $inv_data->currency_cron_id), 2);
                    } else {
                        $res['wallet_Amount'] = $wallet_Amount;
                    }  $res['is_wallet_used'] = $payment_data->is_wallet_used;
                } else {
                    $res['wallet_Amount'] = '0.00';
                      $res['is_wallet_used'] = 'No';
                }

                if ($user_buked_currency != $user_currency_code) {
                    $res['paidTotal'] = number_format(currency_conversion($user_buked_currency, $user_currency_code, $payment_data->total, $inv_data->currency_cron_id), 2);
                } else {
                    $res['paidTotal'] = number_format($payment_data->total, 2);
                }

                $res['currency_symbol'] =  $currencySymbol;


                $res=array('status'=>1,'invoice_details'=>$res);


            } else {
                $res = array('status' => 0, 'message' => 'Invoice is not available');
            }
        } else {
            $res = array('status' => 0, 'message' => 'Login is required');
        }

        echo json_encode($res);
    }
    /* invoice added */



    /*COMMON USER AND HOST CANCEL PROPERTY VIEW*/
    public function mobile_property_cancel_view()
    {
        $user_id = $this->input->post('user_id');
        $product_id = $this->input->post('product_id');
        $bookingno = $this->input->post('bookingno');
        $cancel_by = $this->input->post('cancel_by');
        $get_details = array();
        $cancel_view_arr = array();
        if(strtolower($cancel_by) == 'host')
        {
            $this->db->select('d.*,p.product_title,pn.address,pn.city,pn.state,pn.country');
            $this->db->from(DISPUTE.' as d');
            $this->db->join(PRODUCT.' as p', 'p.id = d.prd_id','left');
            $this->db->join(PRODUCT_ADDRESS_NEW.' as pn', 'pn.productId = d.prd_id','left');
            $this->db->where('d.dispute_by','Host');
            $this->db->where('d.cancel_status',1);
            //$this->db->where('d.user_id',$user_id);
            $this->db->where('d.prd_id',$product_id);
            $this->db->where('d.booking_no',$bookingno);
            $get_details = $this->db->get()->result();
        }
        elseif(strtolower($cancel_by) == 'user')
        {
            $this->db->select('d.*,p.product_title,pn.address,pn.city,pn.state,pn.country');
            $this->db->from(DISPUTE.' as d');
            $this->db->join(PRODUCT.' as p', 'p.id = d.prd_id','left');
            $this->db->join(PRODUCT_ADDRESS_NEW.' as pn', 'pn.productId = d.prd_id','left');
            $this->db->where('d.dispute_by','');
            $this->db->where('d.cancel_status',1);
            //$this->db->where('d.user_id',$user_id);
            $this->db->where('d.prd_id',$product_id);
            $this->db->where('d.booking_no',$bookingno);
            $get_details = $this->db->get()->result();
        }else{
            $get_details = array();
        }
        if(count($get_details) > 0)
        {
            foreach ($get_details as $cancel)
            {
                $cancel_view_arr[]= array(
                    'name'=>$cancel->product_title,
                    'Booking_no'=>$cancel->booking_no,
                    'address'=>$cancel->city.','.$cancel->state.','.$cancel->country,
                    'message'=>$cancel->message,
                    'cancelled_date'=>$cancel->created_date,
                );
            }

            $response = array("status"=>1,"message"=>"Cancel details available","Cancel_details"=>$cancel_view_arr);
            echo json_encode($response);
        }
        else
        {
            $response = array("status"=>0,"message"=>"No Cancel details found","Cancel_details"=>$cancel_view_arr);
            echo json_encode($response);
        }

    }
    /** END***/


    /*** HOST ACCEPT USER CANCEL REQUEST ***/
    public function host_accept_cancel_request()
    {
        $user_id = $this->input->post('user_id');
        $cancel_id = $this->input->post('cancel_id');
        $booking_no = $this->input->post('booking_no');
        $cancel_booking_id = 1;
        $condition = array('id' => $cancel_id, 'cancel_status' => $cancel_booking_id);
        if($cancel_id == "" || $booking_no == "" || $user_id == "")
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }
        $disputeData = $this->mobile_model->get_all_details(DISPUTE, $condition);

        if($disputeData->num_rows() > 0)
        {
            $data = array('status' => 'Accept');
            $this->mobile_model->update_details(DISPUTE, $data, $condition);
            $getBookedDate = $this->mobile_model->ExecuteQuery("select DATE(checkin) as checkinDate ,DATE(checkout) as checkoutDate from " . RENTALENQUIRY . " where Bookingno='" . $booking_no . "'")->row();
            $schedule_q = $this->mobile_model->get_all_details(SCHEDULE, array('id' => $disputeData->row()->prd_id));
            $sched = $schedule_q->row()->data;
            $data = json_decode($sched, true);
            /*Unset the rental booked checkin and checkout date*/
            foreach ($data as $key => $entry) {
                if ($key >= $getBookedDate->checkinDate && $key <= $getBookedDate->checkoutDate) {
                    if($entry['status'] != 'available')
                    {
                        unset($data[$key]);
                    }
                    /*delete booking date to bookings table*/
                    $up_Q = "delete from bookings WHERE the_date='" . $key . "' and PropId=" . $disputeData->row()->prd_id;
                    $this->mobile_model->ExecuteQuery($up_Q);
                }
            }
            $nw_schedule = json_encode($data);
            $up_Q = "UPDATE schedule SET data='" . $nw_schedule . "' WHERE id=" . $disputeData->row()->prd_id;
            $this->mobile_model->ExecuteQuery($up_Q);
            /* Start - Update RentalEnquiry and Commission Tracking*/
            $UpdateArr = array('cancelled' => 'Yes');
            $Condition = array('prd_id' => $disputeData->row()->prd_id, 'user_id' => $disputeData->row()->user_id, 'Bookingno' => $disputeData->row()->booking_no);
            $this->mobile_model->update_details(RENTALENQUIRY, $UpdateArr, $Condition);
            $getEnquiryDet = $this->mobile_model->get_all_details(RENTALENQUIRY, array('Bookingno' => $disputeData->row()->booking_no));
            $TheSubTot = $getEnquiryDet->row()->subTotal;
            $CancelPercentage = $getEnquiryDet->row()->cancel_percentage;
            $CancelAmount = $TheSubTot / 100 * $CancelPercentage;
            $UpdateCommissionArr = array('paid_cancel_amount' => $CancelAmount);
            $ConditionCommission = array('booking_no' => $disputeData->row()->booking_no);
            $this->mobile_model->update_details(COMMISSION_TRACKING, $UpdateCommissionArr, $ConditionCommission);
            /* End - Update RentalEnquiry and Commission Tracking*/
            /*Mail To Guest Start*/
            $condition = array('id' => $user_id);
            $hostDetails = $this->mobile_model->get_all_details(USERS, $condition);
            $uid = $hostDetails->row()->id;
            $hostname = $hostDetails->row()->user_name;
            $host_email = $hostDetails->row()->email;
            $condition = array('id' => $disputeData->row()->user_id);
            $custDetails = $this->mobile_model->get_all_details(USERS, $condition);
            $cust_name = $custDetails->row()->user_name;
            $cust_email = $custDetails->row()->email;
            $newsid = '57';
            $template_values = $this->mobile_model->get_newsletter_template_details($newsid);
            if ($template_values['sender_name'] == '' && $template_values['sender_email'] == '') {
                $sender_email = $this->data['siteContactMail'];
                $sender_name = $this->data['siteTitle'];
            } else {
                $sender_name = $template_values['sender_name'];
                $sender_email = $template_values['sender_email'];
            }
            $email_values = array('mail_type' => 'html', 'from_mail_id' => $sender_email, //'from_mail_id'=>'kathirvel@pofitec.com',
                'to_mail_id' => $cust_email, 'subject_message' => $template_values ['news_subject'],);
            $reg = array('name' => 'Accepted', 'host_name' => $hostname, 'cus_name' => $cust_name,'logo' => $this->data['logo']);
            $message = $this->load->view('newsletter/ToGuestAcceptRejection' . $newsid . '.php', $reg, TRUE);
            $this->load->library('email');
            $this->email->set_mailtype($email_values['mail_type']);
            $this->email->from($email_values['from_mail_id'], $sender_name);
            $this->email->to($email_values['to_mail_id']);
            $this->email->subject($email_values['subject_message']);
            $this->email->message($message);
            try {
                $this->email->send();
                if ($this->lang->line('mail_send_success') != '') {
                    $message = stripslashes($this->lang->line('mail_send_success'));
                } else {
                    $message = "mail send success";
                }
                $this->setErrorMessage('success', $message);
            } catch (Exception $e) {
                echo $e->getMessage();
            }
            /*Mail To Guest End*/
            $response = array("status"=>1,"message"=>"Host Accepted Successfully");
            echo json_encode($response);
        }
        else{
            $response = array("status"=>0,"message"=>"No details found");
            echo json_encode($response);
        }

    }
    /***END***/

    /** HOST REJECT CANCEL REQUEST***/
    public function host_reject_cancel_request()
    {
        $user_id = $this->input->post('user_id');
        $cancel_id = $this->input->post('cancel_id');
        $booking_no = $this->input->post('booking_no');
        $cancel_booking_id = 1;
        if($cancel_id == "" || $booking_no == "" || $user_id == "")
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }
        $condition = array('id' => $cancel_id, 'cancel_status' => $cancel_booking_id);
        $disputeData = $this->mobile_model->get_all_details(DISPUTE, $condition);

        if($disputeData->num_rows() > 0)
        {
            $data = array('status' => 'Reject');

            $ok = $this->mobile_model->update_details(DISPUTE, $data, $condition);

            /* Mail to Guest Start*/
            $newsid = '58';
            $template_values = $this->mobile_model->get_newsletter_template_details($newsid);
            if ($template_values['sender_name'] == '' && $template_values['sender_email'] == '') {
                $sender_email = $this->data['siteContactMail'];
                $sender_name = $this->data['siteTitle'];
            } else {
                $sender_name = $template_values['sender_name'];
                $sender_email = $template_values['sender_email'];
            }
            $getdisputeDetails = $this->mobile_model->get_all_details(DISPUTE, $condition);
            $condition = array('id' => $user_id);
            $hostDetails = $this->mobile_model->get_all_details(USERS, $condition);
            $uid = $hostDetails->row()->id;
            $hostname = $hostDetails->row()->user_name;
            $host_email = $hostDetails->row()->email;
            $condition = array('id' => $getdisputeDetails->row()->user_id);
            $custDetails = $this->mobile_model->get_all_details(USERS, $condition);
            $cust_name = $custDetails->row()->user_name;
            $email = $custDetails->row()->email;
            $condition = array('id' => $getdisputeDetails->row()->prd_id);
            $prdDetails = $this->mobile_model->get_all_details(PRODUCT, $condition);
            $prd_title = $prdDetails->row()->product_title;
            $email_values = array('from_mail_id' => $sender_email, //'from_mail_id'=>'kailashkumar.r@pofitec.com',
                'to_mail_id' => $email, //'to_mail_id'=> 'preetha@pofitec.com',
                'subject_message' => $template_values ['news_subject'], 'body_messages' => $message);
            $reg = array('host_name' => $hostname, 'cust_name' => $cust_name, 'prd_title' => $prd_title,'logo' => $this->data['logo']);
            $message = $this->load->view('newsletter/ToGuestRejectCancelBooking' . $newsid . '.php', $reg, TRUE);
            //send mail
            $this->load->library('email', $config);
            $this->email->from($email_values['from_mail_id'], $sender_name);
            $this->email->to($email_values['to_mail_id']);
            $this->email->subject($email_values['subject_message']);
            $this->email->set_mailtype("html");
            $this->email->message($message);
            try {
                $this->email->send();
                $returnStr ['msg'] = 'Successfully registered';
                $returnStr ['success'] = '1';
            } catch (Exception $e) {
                echo $e->getMessage();
            }

            $response = array("status"=>1,"message"=>"Host Rejected Successfully");
            echo json_encode($response);

        }
        else
        {
            $response = array("status"=>0,"message"=>"No details Found");
            echo json_encode($response);
        }

    }


    public function mobile_host_cancel_booking()
    {
        $vehicle_id = $this->input->post('prd_id');
        $user_id = $this->input->post('user_id');
        //$vehicle_type = $this->input->post('vehicle_type');
        $cancel_percentage = $this->input->post('cancellation_percentage');
        $bookingNo = $this->input->post('Bookingno');
        $device_type = $this->input->post('device_type');
        $currency_code = $this->input->post('currency_code');
        $trip_url = 'listing-reservation';
        $email = $this->input->post('email');
        $message = $this->input->post('message');
        $disputer_id = $this->input->post('disputer_id');
        $excludeArr = array('currency_code', 'device_type','Bookingno');

        $condition = array('Bookingno' => $bookingNo);
        $check_bookingno_exist = $this->mobile_model->get_all_details(RENTALENQUIRY, $condition);

        if($vehicle_id == "" || $bookingNo == ""|| $email == ""|| $disputer_id == ""|| $cancel_percentage == "" || $user_id == ""|| $message == "")
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }

        /*check already cancel the booking host or user*/
        $condition = array('prd_id' => $vehicle_id, 'booking_no' => $bookingNo,'cancel_status'=>1);
        $check_cancel_exist = $this->mobile_model->get_all_details(DISPUTE, $condition);
        // print_r($check_cancel_exist->num_rows());exit;

        if($check_bookingno_exist->num_rows() == 0)
        {
            $response = array("status"=>0,"message"=>"Booking Not Available");
            echo json_encode($response);exit;
        }
        elseif($check_cancel_exist->num_rows() > 0)
        {
            $response = array("status"=>0,"message"=>"Already cancelled the Booking");
            echo json_encode($response);exit;
        }else{
            $dataArr = array('prd_id' => $vehicle_id, 'cancellation_percentage' => $cancel_percentage, 'message' => $message, 'user_id' => $user_id, 'booking_no' => $bookingNo, 'email' => $email, 'disputer_id' => $disputer_id, 'cancel_status' => 1,'dispute_by'=>'Host','status'=>'Accept');
            /* Mail to Host Start*/
            // print_r($dataArr);exit();
            $newsid = '72';
            $template_values = $this->mobile_model->get_newsletter_template_details($newsid);
            if ($template_values['sender_name'] == '' && $template_values['sender_email'] == '') {
                $sender_email = $this->data['siteContactMail'];
                $sender_name = $this->data['siteTitle'];
            } else {
                $sender_name = $template_values['sender_name'];
                $sender_email = $template_values['sender_email'];
            }
            //HOST DETAILS
            $condition = array('id' => $disputer_id);
            $hostDetails = $this->mobile_model->get_all_details(USERS, $condition);
            $uid = $hostDetails->row()->id;
            $hostname = $hostDetails->row()->user_name;
            $host_email = $hostDetails->row()->email;

            //GUEST DETAILS
            $getEnquiryDet = $this->mobile_model->get_all_details(RENTALENQUIRY, array('Bookingno' => $bookingNo))->row();
            $guest_id = $getEnquiryDet->user_id;
            $EnquiryId=$getEnquiryDet->id;
            $checkInDate = $getEnquiryDet->checkin;
            $checkOutDate = $getEnquiryDet->checkout;
            $Enquser_id=$getEnquiryDet->user_id;
            $Enqsell_id=$getEnquiryDet->renter_id;
            $Enqvehicle_id=$getEnquiryDet->prd_id;

            $condition = array('id' => $guest_id);
            $custDetails = $this->mobile_model->get_all_details(USERS, $condition);
            $cust_name = $custDetails->row()->user_name;
            $cust_email = $custDetails->row()->email;

            //email_title
            $condition = array('id' => $vehicle_id);
            $prdDetails = $this->mobile_model->get_all_details(PRODUCT, $condition);
            $prd_title = $prdDetails->row()->veh_title;
            $reason = $this->input->post('message');
            $booking_no = $bookingNo;
            $reg = array('logo' => $this->data['logo'],'host_name' => $hostname, 'cust_name' => $cust_name, 'prd_title' => $prd_title, 'reason' => $reason, 'booking_no' => $booking_no);
            $message = $this->load->view('newsletter/ToGuestCancelBooking' . $newsid . '.php', $reg, TRUE);
            $email_values = array('from_mail_id' => $sender_email, 'to_mail_id' => $cust_email, 'subject_message' => $template_values ['news_subject'], 'body_messages' => $message);


            $this->load->library('email', $config);
            $this->email->from($email_values['from_mail_id'], $sender_name);
            $this->email->to($email_values['to_mail_id']);
            $this->email->subject($email_values['subject_message']);
            $this->email->set_mailtype("html");
            $this->email->message($message);
            try {
                $this->email->send();
                $returnStr ['msg'] = 'Successfully registered';
                $returnStr ['success'] = '1';
            } catch (Exception $e) {
                echo $e->getMessage();
            }
            /* Mail to Host End*/

            /* MAIL TO ADMIN */

            $newsid='72';
            $template_values=$this->mobile_model->get_newsletter_template_details($newsid);
            if($template_values['sender_name']=='' && $template_values['sender_email']=='')
            {
                $sender_email=$this->data['siteContactMail'];
                $sender_name=$this->data['siteTitle'];
            }
            else
            {
                $sender_name=$template_values['sender_name'];
                $sender_email=$template_values['sender_email'];
            }

            $reg = array('logo' => $this->data['logo'],'host_name' => $hostname, 'guest_name' => $cust_name, 'prd_title' => $prd_title, 'reason' => $reason, 'booking_no' => $booking_no);
            $message = $this->load->view('newsletter/ToAdminCancelBooking' . $newsid . '.php', $reg, TRUE);

            $this->load->library('email');
            $this->email->set_mailtype($email_values['mail_type']);
            $this->email->from($email_values['from_mail_id'], $sender_name);
            $this->email->to($sender_email);
            $this->email->subject($email_values['subject_message']);
            $this->email->message($message);
            try {
                $this->email->send();
                $returnStr ['msg'] = 'Successfully registered';
                $returnStr ['success'] = '1';
            } catch (Exception $e) {
                echo $e->getMessage();
            }
            /* EOF MAIL TO ADMIN */

            $this->mobile_model->commonInsertUpdate(DISPUTE, 'insert', $excludeArr, $dataArr, $condition);

            /*   Start - Update Rental enquiry and commission tracking.*/
            /*    $UpdateArr=array('cancelled'=>'Yes');*/
            $UpdateArr=array('cancelled'=>'Yes','dispute_by'=>'Host');
            $Condition=array('prd_id'=>$vehicle_id,
                'Bookingno'=>$bookingNo);
            $this->mobile_model->update_details(RENTALENQUIRY,$UpdateArr,$Condition);

            $getBookedDate = $this->mobile_model->ExecuteQuery("select DATE(checkin) as checkinDate ,DATE(checkout) as checkoutDate from " . RENTALENQUIRY . " where Bookingno='" . $bookingNo . "'")->row();
            $schedule_q = $this->mobile_model->get_all_details(SCHEDULE, array('id' => $vehicle_id));
            $sched = $schedule_q->row()->data;
            $data = json_decode($sched, true);
            foreach ($data as $key => $entry) {
                if ($key >= $getBookedDate->checkinDate && $key <= $getBookedDate->checkoutDate) {
                    if($entry['status'] != 'available')
                    {
                        unset($data[$key]);
                    }
                    $up_Q = "delete from bookings WHERE the_date='" . $key . "' and PropId=" . $vehicle_id;
                    $this->mobile_model->ExecuteQuery($up_Q);
                }
            }
            $nw_schedule = json_encode($data);
            $up_Q = "UPDATE schedule SET data='" . $nw_schedule . "' WHERE id=" . $vehicle_id;
            $this->mobile_model->ExecuteQuery($up_Q);

            $get_paid_amount = $this->mobile_model->get_all_details(PAYMENT,array('EnquiryId'=>$EnquiryId,'user_id'=>$Enquser_id,'sell_id'=>$Enqsell_id,'product_id'=>$Enqvehicle_id));
            $paidAmount = $get_paid_amount->row()->price;
            //echo $CancelAmountWithSecDeposit;exit;
            //Note :based On paid_cancel_amount Commission is updated, see commission before updating paid_cancel_amount..
            $UpdateCommissionArr=array('paid_cancel_amount'=>$paidAmount,'dispute_by'=>'Host','disputer_id'=>$disputer_id);
            $ConditionCommission=array('booking_no'=>$bookingNo);
            $this->mobile_model->update_details(COMMISSION_TRACKING,$UpdateCommissionArr,$ConditionCommission);
            /* End - Update Rental enquiry and commission tracking.*/

            $response = array("status"=>1,"message"=>"Host Cancelled Successfully");
            echo json_encode($response);exit;
        }
        /*end*/
    }

    public function mobile_get_host_cancellation()
    {
        $host_id = $this->input->post('host_id');

        if($host_id == "")
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }
        else
        {
            $cancel_details = $this->mobile_model->get_host_calcelled_bookings($host_id);

            if($cancel_details->num_rows() == 0)
            {
                $response = array("status"=>0,"message"=>"No Host Cancellation Found");
                echo json_encode($response);exit;
            }
            else
            {
                //print_r($cancel_details->result());exit;
                foreach($cancel_details->result() as $host)
                {
                    /*Get currency symbol*/
                    $paid_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition );
                    $currencySymbol = $paid_currency_details->row()->currency_symbols;
                    $currencyCronId = $host->currency_cron_id;
                    $user_currencycode = $host->user_currencycode;

                    /*Paid Amount*/
                    if ($user_currencycode != $this->session->userdata('currency_type'))
                    { $Paid = changeCurrency($user_currencycode,$this->session->userdata('currency_type'),$host->paid_cancel_amount,$currencyCronId);

                    } else {   $Paid = $host->paid_cancel_amount;
                    }

                    /*cancellation amount*/
                    if ($host->paid_canel_status == 1)
                    { if ($user_currencycode != $this->session->userdata('currency_type'))
                    { $Paid_amt = changeCurrency($user_currencycode,$this->session->userdata('currency_type'),$host->paid_cancel_amount,$currencyCronId);
                    }else{  $Paid_amt = $host->paid_cancel_amount; }
                        $cancel_amt = $currencySymbol . ' ' . $Paid_amt;
                    }
                    else
                    {
                        $cancel_amt = $currencySymbol . '' . "0.00";
                    }
                    /*balance amount*/
                    if ($host->paid_canel_status == 0)
                    { if ($user_currencycode != $this->session->userdata('currency_type'))
                    { $amount = changeCurrency($user_currencycode,$this->session->userdata('currency_type'),$host->paid_cancel_amount,$currencyCronId);
                    } else{ $amount = $host->paid_cancel_amount; }
                        $bal_amt = $currencySymbol . ' ' . $amount;
                    }
                    else
                    { $bal_amt = $currencySymbol . '' . "0.00";}
                    if($host->product_image != ''){
                        $p_img = explode('.',$host->product_image);
                        $suffix = strrchr($host->product_image, ".");
                        $pos = strpos  ( $host->product_image  , $suffix);
                        $name = substr_replace ($host->product_image, "", $pos);
                        // echo $suffix . "<br><br>". $name;
                        $pro_img = $name.''.$suffix;
                        $proImage = base_url().'images/rental/'.$pro_img;
                    }else{
                        $proImage = base_url().'images/rental/dummyProductImage.jpg';
                    }
                    if ($host->paid_canel_status == 0)
                    {
                        $paid_canel_status = "Pending" ;
                    }
                    else
                    {
                        $paid_canel_status = "Paid" ;

                    }

                    $host_cancel_details[] = array(
                        'product_title'     => $host->product_title,
                        'booking_no'        => $host->booking_no,
                        'paid_amount'=> $currencySymbol . ' ' . $Paid,
                        'cancellation_amount'=> $cancel_amt,
                        'balance_amount'=> $bal_amt,
                        'paid_status'=> $paid_canel_status,
                        'bookedDate'=> $host->bookedDate,
                        'checkin'=> date('M d,Y',strtotime($host->checkin)),
                        'checkout'=> date('M d,Y',strtotime($host->checkout)),
                        'currencycode'=> $host->currencycode,
                        'user_image'=> $proImage
                    );
                }

                $response = array("status"=>1,"message"=>"Host Cancellation Available","host_cancel_details"=>$host_cancel_details);
                echo json_encode($response);exit;
            }
        }
    }

    /*GET COUPON DETAILS*/
    public function get_coupon_details()
    {
        $curr_date = date('Y-m-d');
        $user_id = $this->input->post('user_id');
        $coupon_details =array();
        if($user_id == "")
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }
        else
        {
            $get_coupon = $this->mobile_model->get_coupon_available($curr_date);
            if($get_coupon->num_rows() == 0)
            {
                $response = array("status"=>0,"message"=>"No Coupon Available");
                echo json_encode($response);exit;
            }
            else
            {
                foreach ($get_coupon->result() as $coupon)
                {
                    $get_prpducts = "select p.id,p.product_title,pa.address,pa.city,pa.state,pa.country from " . PRODUCT . " p LEFT JOIN ".USERS ." u ON u.id = p.user_id LEFT JOIN ".PRODUCT_ADDRESS_NEW." pa ON p.id = pa.productId where p.id IN (" . $coupon->product_id . ") AND p.status = 'Publish' AND u.status = 'Active' ";
                    $products=$this->mobile_model->ExecuteQuery($get_prpducts);
                    $productjson = $products->result();/*get coupon assigned products array*/
                    if(($coupon->quantity != $coupon->purchase_count) && ($coupon->dateto >= date('Y-m-d')) && ($products->num_rows() >0))
                    {
                        $coupon_details[] = array(
                            'coupon_name' =>$coupon->coupon_name,
                            'coupon_code' =>$coupon->code,
                            'coupon_type' =>$coupon->coupon_type,
                            'coupon_price_value' =>$coupon->price_value,
                            'coupon_limit' =>$coupon->quantity,
                            'coupon_purchase_count' =>$coupon->purchase_count,
                            'coupon_available_count' =>intval($coupon->quantity - $coupon->purchase_count),
                            'coupon_datefrom' =>$coupon->datefrom,
                            'coupon_dateto' =>$coupon->dateto,
                            'coupon_status' =>$coupon->status,
                            'coupon_assigned_products' =>$productjson,
                        );
                    }

                }
                if(count($coupon_details) == 0)
                {
                    $response = array("status"=>0,"message"=>"No Coupon Details",'coupon_details'=>$coupon_details);
                    echo json_encode($response);exit;
                }else{
                    $response = array("status"=>1,"message"=>"Coupon Details",'coupon_details'=>$coupon_details);
                    echo json_encode($response);exit;
                }

            }
        }

    }

    public function mobile_coupon_code_apply()
    {
        $currency_code = $this->input->post('currency_code');
        $coupon_code = $this->input->post('coupon_code');
        $product_id = $this->input->post('product_id');
        $total_price = $this->input->post('sub_total');
        $service_fee = $this->input->post('service_fee');
        $deposit_fee = $this->input->post('deposit_fee');

        if($coupon_code == '' || $product_id == '' || $total_price == '' || $service_fee== '' || $deposit_fee == '')
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }
        else{

            $get_prd_coupon =$this->mobile_model->get_coupon_details($coupon_code,$product_id);

            if($get_prd_coupon->num_rows() > 0)
            {
                $totalAvail = $get_prd_coupon->row()->quantity; // 10
                $purchase_count = $get_prd_coupon->row()->purchase_count;//0
                $dbCouponcode = $get_prd_coupon->row()->code;
                $coupon_datefrom = strtotime($get_prd_coupon->row()->datefrom);
                $coupon_dateto = strtotime($get_prd_coupon->row()->dateto);
                $coupon_price = $get_prd_coupon->row()->price_value;
                $curr_date = strtotime(date('Y-m-d'));

                $condition1=array('couponCode'=>$this->input->post('couponcode'));
                $countUsedRslt = $this->product_model->get_all_details(PAYMENT,$condition1);
                $countUsed = $countUsedRslt->num_rows();

                /*get and calculate currency*/
                $currencyCode     = $this->db->where('id',$product_id)->get(PRODUCT)->row()->currency; /*product currency*/
                $getAdminCurrency=$this->product_model->get_all_details(ADMIN,array());
                $theCurrency=$getAdminCurrency->row()->admin_currencyCode; //admin currency

                /*Covert Coupon amount(from admin currency) into product currency*/
                if ($currencyCode==$theCurrency){
                    $couponoff=$coupon_price;
                }else{
                    $couponoffConverted= currency_conversion($currencyCode,$theCurrency,$coupon_price);
                    $coupon_currency_price = str_replace( ',', '', $couponoffConverted );
                    if( is_numeric( $coupon_currency_price ) ) {
                        $couponoff = $coupon_currency_price;
                    }
                }

                $calculate = ($coupon_price/100) * $total_price;//10
                $final_total = $total_price - $calculate;
            }else{

                echo json_encode(array('status'=>0,'message'=>"Invalid Coupon"));
                exit();
            }
            /*  echo $final_total.'-'.$calculate.'-'.$coupon_price;exit;*/
            if($coupon_code != $dbCouponcode)/*check coupon code*/
            {
                echo json_encode(array('status'=>0,'message'=>"Invalid Coupon"));
                exit();
            }
            elseif($totalAvail <= $purchase_count)/*check coupon count*/
            {
                echo json_encode(array('status'=>0,'message'=>"Coupon is Not Available.."));
                exit();
            }
            elseif($curr_date < $coupon_datefrom)
            {
                echo json_encode(array('status'=>0,'message'=>"Coupon Code Not Yet be Started"));
                exit();
            }
            elseif($coupon_dateto < $curr_date && $curr_date > $coupon_datefrom)/*check coupon expired data*/
            {
                echo json_encode(array('status'=>0,'message'=>"Coupon Code Expired..!"));
                exit();
            }else{

                $total_amount = $final_total + $service_fee + $deposit_fee;
                /*For paypal payment amount convert to USD currency(paypal accept USD currency)*/
                if($currency_code != 'USD'){

                    $paypal_USD_amount=currency_conversion($currency_code,'USD', $total_amount);
                }else{
                    $paypal_USD_amount=$total_amount;
                }
                $coupon_amount[] = array(
                    'coupon_price' => $coupon_price. ' %',
                    'sub_total'=>$total_price,
                    'amount_discount'=>$calculate,
                    'subtotal_with_discount_amount' => $final_total,
                    'total_amount' => $total_amount,
                    'paypal_USD_amount' => $paypal_USD_amount,
                );

                echo json_encode(array('status'=>1,'message'=>"Coupon Amount Available","coupon_amount"=>$coupon_amount));
                exit();

            }

        }
    }
    public function mobile_coupon_code_reject()
    {
        $coupon_code = $this->input->post('coupon_code');
        $product_id = $this->input->post('product_id');

        if($coupon_code == '' || $product_id == '' )
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }
        else
        {
            $get_prd_coupon =$this->mobile_model->get_coupon_details($coupon_code,$product_id);

            if($get_prd_coupon->num_rows() > 0)
            {
                $coupon_details[] = array(
                    'coupon_code' => $get_prd_coupon->row()->code,
                    'coupon_limit' => $get_prd_coupon->row()->quantity,
                    'coupon_purchase_count' => $get_prd_coupon->row()->purchase_count,
                    'coupon_datefrom' => $get_prd_coupon->row()->datefrom,
                    'coupon_dateto' => $get_prd_coupon->row()->dateto,
                );

                echo json_encode(array('status'=>1,'message'=>"Coupon details Available","coupon_amount"=>$coupon_details));
                exit();
            }
            else{
                echo json_encode(array('status'=>0,'message'=>"No Details Found"));
                exit();
            }
        }
    }

    public function mobile_overall_wallet()
    {
        $user_id = $this->input->post('user_id');
        $currency_code = $this->input->post('currency_code');
        $user_wallet=array();
        if($user_id == '' && $currency_code == '')
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }
        else{
            $user_details = $this->mobile_model->get_all_details(USERS,array('id'=>$user_id));
            if($user_details->num_rows() > 0)
            {
                $condition_new = array('currency_type' => $currency_code);
                $user_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition_new );
                $user_currency_symbol = $user_currency_details->row()->currency_symbols;
                $wallet_usage_details = "select sum(wallet_Amount) as usedWallet,currency_code from " . PAYMENT . " where user_id='" . $user_id . "' and is_wallet_used='Yes' and wallet_Amount!='0.00'";
                $wallet_usage = $this->mobile_model->ExecuteQuery($wallet_usage_details);
                $user_currency = $user_details->row()->referalAmount_currency;

                if($user_currency != $currency_code)
                {
                    $referal_amount = currency_conversion($user_currency, $currency_code, $user_details->row()->totalReferalAmount);
                }else{
                    $referal_amount = $user_details->row()->totalReferalAmount;
                }

                if ($wallet_usage->row()->usedWallet != null) {
                    $usedWallet = $wallet_usage->row()->usedWallet;
                    $usedCurrency = $wallet_usage->row()->currency_code;
                } else{
                    $GetusedCurrency= $this->db->where('user_id', $user_details->row()->id)->get(PAYMENT)->row();
                    $usedCurrency=$GetusedCurrency->currency_code;
                    $usedWallet = "0.00";
                }

                if ($user_currency != $currency_code) {
                    $cnt_usedWallet =  currency_conversion($user_currency, $currency_code, $usedWallet);
                    $cnt_usedWallet; } else { $cnt_usedWallet=$usedWallet;  }

                $balence_in=$referal_amount - $cnt_usedWallet;


                $user_wallet[]=array(
                    'user_id' => $user_details->row()->id,
                    'user_name' => $user_details->row()->user_name,
                    'user_email' => $user_details->row()->email,
                    'user_currency' => $user_currency,
                    'user_currency_symbol' => $user_currency_symbol,
                    'total_wallet_amount' => floatval(round(($referal_amount),2)),
                    'used_from_wallet' => floatval(round(($cnt_usedWallet),2)),
                    'balance_from_wallet' => floatval(round(($balence_in),2)),
                );

                echo json_encode(array('status'=>1,'message'=>"Wallet details Available","user_wallet"=>$user_wallet));
                exit();
            }
            else{
                echo json_encode(array('status'=>1,'message'=>"No Wallet details Available","user_wallet"=>$user_wallet));
                exit();
            }

        }
    }

    public function mobile_wallet_apply()
    {
        $user_id = $this->input->post('user_id');
        $product_id = $this->input->post('product_id');
        $sub_total = $this->input->post('sub_total');
        $wallet_amount = $this->input->post('wallet_amount');
        $currency_code = $this->input->post('currency_code');
        $service_fee = $this->input->post('service_fee');
        $deposit_fee = $this->input->post('deposit_fee');
        $wallet_amount_details = array();

        $user_details = $this->mobile_model->get_all_details(USERS,array('id'=>$user_id));
        $walletCurrencyGets = $user_details->row()->referalAmount_currency;
        /*Get Mobile response currency*/
        $condition_new = array('currency_type' => $currency_code);
        $user_currency_details = $this->mobile_model->get_all_details ( CURRENCY, $condition_new );
        $user_currency_symbol = $user_currency_details->row()->currency_symbols;

        //Start - Convert Amount in Mobile response Currency
        if($walletCurrencyGets!=$currency_code){  //USD!=INR

            $walletAmount=currency_conversion($currency_code,$walletCurrencyGets, $wallet_amount);
        }else{
            $walletAmount=$wallet_amount;
        }

        if($user_id == '' || $product_id == '' || $sub_total == '' || $wallet_amount== ''|| $currency_code== ''|| $service_fee== '' || $deposit_fee == '')
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }
        else{

            if($user_details->row()->totalReferalAmount > 0 )
            {
                if($sub_total >= $wallet_amount)
                {
                    $balance = $sub_total - $wallet_amount;
                    $wallet_balance = 0;
                    $final_total = $balance + $service_fee + $deposit_fee;

                }else if($sub_total < $wallet_amount){
                    $balance = 0;
                    $wallet_balance = $wallet_amount - $sub_total;
                    $final_total = $service_fee + $deposit_fee;
                }
            }else{
                echo json_encode(array('status'=>0,'message'=>"No Wallet Amount Available","wallet_amount_details"=>$wallet_amount_details));
                exit();
            }


            /*if($walletCurrencyGets!=$currency_code){

                   $grandTotal=currency_conversion($walletCurrencyGets,$currency_code, $final_total);
               }else{
                   $grandTotal=$final_total;
               }*/

            /*For paypal payment amount convert to USD currency(paypal accept USD currency)*/
            if($currency_code != 'USD'){

                $paypal_USD_amount=currency_conversion($currency_code,'USD', $final_total);
            }else{
                $paypal_USD_amount=$final_total;
            }

            $wallet_amount_details[] = array(
                'user_currency_symbol' => $user_currency_symbol,
                'sub_total' => floatval(round(($sub_total),2)),
                'wallet_amount' => $wallet_amount,
                'wallet_balance_amount'=>floatval(round(($wallet_balance),2)),
                'service_fee' => $service_fee,
                'deposit_fee' => $deposit_fee,
                'total_amount' => floatval(round(($final_total),2)),
                'paypal_USD_amount' => floatval(round(($paypal_USD_amount),2)),
            );
            echo json_encode(array('status'=>1,'message'=>"Wallet Amount Available","wallet_amount_details"=>$wallet_amount_details));
            exit();
        }
    }

    /*Dispute status change */
    public function mobile_dispute_status_change()
    {
        $disputeId = $this->input->post('disputeId');
        $booking_no = $this->input->post('booking_no');
        $change_status = $this->input->post('change_status');

        if($disputeId == '' || $booking_no == '' || $change_status == '')
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }
        else
        {
            $condition = array('id' => $disputeId,'cancel_status'=>0,'booking_no' => $booking_no);
            $disputeData = $this->mobile_model->get_all_details(DISPUTE, $condition);

            if($disputeData->num_rows() == 0)/*check dispute available or not*/
            {
                echo json_encode(array('status'=>0,'message'=>"No Dispute Details Found"));
                exit();
            }else{
                /*update the dispute status*/
                $data = array('status' => $change_status);
                $this->mobile_model->update_details(DISPUTE, $data, $condition);
                if($change_status == "Processing")
                {
                    echo json_encode(array('status'=>1,'message'=>"Status Changed to Processing"));
                    exit();
                }
                else if($change_status == "Completed")
                {
                    echo json_encode(array('status'=>1,'message'=>"Status Changed to Completed"));
                    exit();
                }else if($change_status == "Reject")
                {
                    echo json_encode(array('status'=>1,'message'=>"Status Changed to Rejected"));
                    exit();
                }
            }
        }
    }

    /*Get Inbox Starred Message with bookingno search*/
    public function mobile_inbox_starred_message()
    {
        $userid = $this->input->post('userid');
        $booking_numbers = (!empty($this->input->post('booking_numbers')) ? $this->input->post('booking_numbers') : []);
        //$booking_numbers = array(bookingno[0]=>'EN1500818',bookingno[1]=>'EN1500798');
        //print_r($booking_numbers);exit;
        $starred_message = array();
        $inbox_starred_msg = $this->mobile_model->get_inbox_starred_message($userid,$booking_numbers);
        if($inbox_starred_msg->num_rows() > 0)
        {
            foreach($inbox_starred_msg->result() as $starred)
            {
                if($starred->image != '') {
                    $img = base_url().'images/users/'.$starred->image;
                }else{
                    $img = base_url().'images/users/profile.png';
                }
                $starred_message[] = array(
                    "id"=>$starred->id,
                    "msg_unread_count"=>$starred->msg_unread_count,
                    "property_id"=>$starred->productId,
                    "dateAdded"=>$starred->dateAdded,
                    "message"=>$starred->message,
                    "subject"=>$starred->subject,
                    "bookingno"=>$starred->bookingNo,
                    "msg_read"=>$starred->msg_read,
                    "star_status"=>(($starred->msg_star_status == "Yes" ) ? "1" : "0"),
                    "status"=>$starred->status,
                    "user_msgread_status"=>(($starred->user_msgread_status == "Yes" ) ? "1" : "0"),
                    "host_msgread_status"=>(($starred->host_msgread_status == "Yes" ) ? "1" : "0"),
                    "msg_status"=>$starred->msg_status,
                    "sender_name"=>ucfirst($starred->firstname.' '.$starred->lastname),
                    "user_image"=>$img);
            }

            echo json_encode(array('status'=>1,"message"=>"Starred Message Available","message_values"=>$starred_message));exit();

        }else
        {
            echo json_encode(array('status'=>0,"message"=>"No Starred Message Available","message_values"=>$starred_message));exit();
        }
    }

    /*Get Inbox Unread Message with bookingno search*/
    public function mobile_inbox_unread_message()
    {
        $userid = $this->input->post('userid');
        $booking_numbers = (!empty($this->input->post('booking_numbers')) ? $this->input->post('booking_numbers') : []);
        $unread_message = array();
        $inbox_unread_msg = $this->mobile_model->get_inbox_unread_message($userid,$booking_numbers);
        if($inbox_unread_msg->num_rows() > 0)
        {
            foreach($inbox_unread_msg->result() as $unread_msg)
            {
                if($unread_msg->image != '') {
                    $img = base_url().'images/users/'.$unread_msg->image;
                }else{
                    $img = base_url().'images/users/profile.png';
                }
                $unread_message[] = array(
                    "id"=>$unread_msg->id,
                    "msg_unread_count"=>$unread_msg->msg_unread_count,
                    "property_id"=>$unread_msg->productId,
                    "dateAdded"=>$unread_msg->dateAdded,
                    "message"=>$unread_msg->message,
                    "subject"=>$unread_msg->subject,
                    "bookingno"=>$unread_msg->bookingNo,
                    "msg_read"=>$unread_msg->msg_read,
                    "star_status"=>(($unread_msg->msg_star_status == "Yes" ) ? "1" : "0"),
                    "status"=>$unread_msg->status,
                    "user_msgread_status"=>(($unread_msg->user_msgread_status == "Yes" ) ? "1" : "0"),
                    "host_msgread_status"=>(($unread_msg->host_msgread_status == "Yes" ) ? "1" : "0"),
                    "msg_status"=>$unread_msg->msg_status,
                    "sender_name"=>ucfirst($unread_msg->firstname.' '.$unread_msg->lastname),
                    "user_image"=>$img);
            }

            echo json_encode(array('status'=>1,"message"=>"Unread Message Available","message_values"=>$unread_message));exit();

        }else
        {
            echo json_encode(array('status'=>0,"message"=>"No Unread Message Available","message_values"=>$unread_message));exit();
        }
    }

    /*Get Inbox Reservation message with bookingno search*/
    public function mobile_inbox_reservation_message()
    {
        $userid = $this->input->post('userid');
        $booking_numbers = (!empty($this->input->post('booking_numbers')) ? $this->input->post('booking_numbers') : []);
        $reservation_message = array();
        $inbox_reservation_message = $this->mobile_model->get_inbox_reservation_message($userid,$booking_numbers);
        if($inbox_reservation_message->num_rows() > 0)
        {
            foreach($inbox_reservation_message->result() as $reservation)
            {
                if($reservation->image != '') {
                    $img = base_url().'images/users/'.$reservation->image;
                }else{
                    $img = base_url().'images/users/profile.png';
                }
                $reservation_message[] = array(
                    "id"=>$reservation->id,
                    "msg_unread_count"=>$reservation->msg_unread_count,
                    "property_id"=>$reservation->productId,
                    "dateAdded"=>$reservation->dateAdded,
                    "message"=>$reservation->message,
                    "subject"=>$reservation->subject,
                    "bookingno"=>$reservation->bookingNo,
                    "msg_read"=>$reservation->msg_read,
                    "star_status"=>(($reservation->msg_star_status == "Yes" ) ? "1": "0"),
                    "status"=>$reservation->status,
                    "user_msgread_status"=>(($reservation->user_msgread_status == "Yes" ) ? "1": "0"),
                    "host_msgread_status"=>(($reservation->host_msgread_status == "Yes" ) ? "1": "0"),
                    "msg_status"=>$reservation->msg_status,
                    "sender_name"=>ucfirst($reservation->firstname.' '.$reservation->lastname),
                    "user_image"=>$img);
            }
            echo json_encode(array('status'=>1,"message"=>"Reservation Message Available","message_values"=>$reservation_message));exit();

        }else
        {
            echo json_encode(array('status'=>0,"message"=>"No Reservation Message Available","message_values"=>$reservation_message));exit();
        }
    }

    /*Get Inbox Pending request Message with bookingno search*/
    public function mobile_inbox_pending_req_message()
    {
        $userid = $this->input->post('userid');
        $booking_numbers = (!empty($this->input->post('booking_numbers')) ? $this->input->post('booking_numbers') : []);
        $pending_request_message = array();
        $inbox_pending_req_message = $this->mobile_model->get_pending_request_message($userid,$booking_numbers);
        if($inbox_pending_req_message->num_rows() > 0)
        {
            foreach($inbox_pending_req_message->result() as $pending_req)
            {
                if($pending_req->image != '') {
                    $img = base_url().'images/users/'.$pending_req->image;
                }else{
                    $img = base_url().'images/users/profile.png';
                }
                $pending_request_message[] = array(
                    "id"=>$pending_req->id,
                    "msg_unread_count"=>$pending_req->msg_unread_count,
                    "property_id"=>$pending_req->productId,
                    "dateAdded"=>$pending_req->dateAdded,
                    "message"=>$pending_req->message,
                    "subject"=>$pending_req->subject,
                    "bookingno"=>$pending_req->bookingNo,
                    "msg_read"=>$pending_req->msg_read,
                    "star_status"=>(($pending_req->msg_star_status == "Yes") ? "1" : "0"),
                    "status"=>$pending_req->status,
                    "user_msgread_status"=>(($pending_req->user_msgread_status == "Yes") ? "1" : "0"),
                    "host_msgread_status"=>(($pending_req->host_msgread_status == "Yes") ? "1" : "0"),
                    "msg_status"=>$pending_req->msg_status,
                    "sender_name"=>ucfirst($pending_req->firstname.' '.$pending_req->lastname),
                    "user_image"=>$img);
            }
            echo json_encode(array('status'=>1,"message"=>"Pending Request Message Available","message_values"=>$pending_request_message));exit();

        }else
        {
            echo json_encode(array('status'=>0,"message"=>"No Pending Request Message Available","message_values"=>$pending_request_message));exit();
        }
    }

    /*Get Inbox Archive message with bookingno search*/
    public function mobile_inbox_archived_message()
    {
        $userid = $this->input->post('userid');
        $booking_numbers = (!empty($this->input->post('booking_numbers')) ? $this->input->post('booking_numbers') : []);
        $pending_request_message = array();
        $inbox_archive_message = $this->mobile_model->get_inbox_archive_message($userid,$booking_numbers);
        if($inbox_archive_message->num_rows() > 0)
        {
            foreach($inbox_archive_message->result() as $archive_msg)
            {
                if($archive_msg->image != '') {
                    $img = base_url().'images/users/'.$archive_msg->image;
                }else{
                    $img = base_url().'images/users/profile.png';
                }
                $archive_message[] = array(
                    "id"=>$archive_msg->id,
                    "msg_unread_count"=>$archive_msg->msg_unread_count,
                    "property_id"=>$archive_msg->productId,
                    "dateAdded"=>$archive_msg->dateAdded,
                    "message"=>$archive_msg->message,
                    "subject"=>$archive_msg->subject,
                    "bookingno"=>$archive_msg->bookingNo,
                    "msg_read"=>$archive_msg->msg_read,
                    "star_status"=>(($archive_msg->msg_star_status == "Yes") ? "1" : "0") ,
                    "status"=>$archive_msg->status,
                    "user_msgread_status"=>(($archive_msg->user_msgread_status == "Yes") ? "1" : "0"),
                    "host_msgread_status"=>(($archive_msg->host_msgread_status == "Yes") ? "1" : "0"),
                    "msg_status"=>$archive_msg->msg_status,
                    "sender_name"=>ucfirst($archive_msg->firstname.' '.$archive_msg->lastname),
                    "user_image"=>$img);
            }
            echo json_encode(array('status'=>1,"message"=>"Archive Message Available","message_values"=>$archive_message));exit();

        }else
        {
            echo json_encode(array('status'=>0,"message"=>"No Archive Message Available","message_values"=>$archive_message));exit();
        }
    }

    /*inbox change star status*/
    public function mobile_inbox_star_status()
    {
        $message_id = $this->input->post('message_id');
        $bookingNo = $this->input->post('bookingNo');
        $star_change_status = $this->input->post('star_change_status');/*yes or no*/
        if($message_id == '' || $bookingNo == '' || $star_change_status == '')
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }else{
            $check_message = "select * from ".MED_MESSAGE." where id = ".$message_id." and bookingNo = '".$bookingNo."'";
            $result = $this->mobile_model->ExecuteQuery($check_message);
            if($result->num_rows() > 0)
            {
                $this->db->where('bookingNo', $bookingNo);
                $this->db->where('id', $message_id);
                $this->db->update(MED_MESSAGE, array('msg_star_status' => $star_change_status));

                if($star_change_status == 'Yes')
                {
                    echo json_encode(array('status'=>1,'message'=>"Added to Starred Status"));
                    exit();
                }else{/*No*/
                    echo json_encode(array('status'=>1,'message'=>"Removed From Starred Status"));
                    exit();
                }
            }else{
                echo json_encode(array('status'=>0,'message'=>"No Message Details Found"));
                exit();
            }

        }

    }

    /*inbox archive status change*/
    public function mobile_inbox_archive_status()
    {
        $message_id = $this->input->post('message_id');

        if($message_id == '')
        {
            echo json_encode(array('status'=>0,'message'=>"Parameter Missing"));
            exit();
        }else{
            $check_message = "select * from ".MED_MESSAGE." where id = ".$message_id;
            $result = $this->mobile_model->ExecuteQuery($check_message);
            if($result->num_rows() == 0)
            {
                echo json_encode(array('status'=>0,'message'=>"No Message Details Found"));
                exit();
            }else{
                $this->db->set(array('msg_status' => 1));
                $this->db->where('id',$message_id);
                $this->db->update(MED_MESSAGE);

                echo json_encode(array('status'=>1,'message'=>"Message Archived Successfully"));
                exit();
            }

        }
    }
}
/* End of file mobile.php no_image.jpg */
/* Location: ./application/controllers/site/mobile.php */